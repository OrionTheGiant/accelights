
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000200 	.word	0x20000200
 8000004:	08000191 	.word	0x08000191
 8000008:	08001871 	.word	0x08001871
 800000c:	08000192 	.word	0x08000192
 8000010:	08000192 	.word	0x08000192
 8000014:	08000192 	.word	0x08000192
 8000018:	08000192 	.word	0x08000192
 800001c:	08000192 	.word	0x08000192
 8000020:	08000192 	.word	0x08000192
 8000024:	08000192 	.word	0x08000192
 8000028:	08000192 	.word	0x08000192
 800002c:	08000192 	.word	0x08000192
 8000030:	08000192 	.word	0x08000192
 8000034:	08000192 	.word	0x08000192
 8000038:	08000192 	.word	0x08000192
 800003c:	08000192 	.word	0x08000192
 8000040:	08000192 	.word	0x08000192
 8000044:	08000192 	.word	0x08000192
 8000048:	08000192 	.word	0x08000192
 800004c:	08000192 	.word	0x08000192
 8000050:	08000192 	.word	0x08000192
 8000054:	08000192 	.word	0x08000192
 8000058:	08000192 	.word	0x08000192
 800005c:	08000192 	.word	0x08000192
 8000060:	08000192 	.word	0x08000192
 8000064:	08001ec1 	.word	0x08001ec1
 8000068:	08001f71 	.word	0x08001f71
 800006c:	08001f01 	.word	0x08001f01
 8000070:	08000192 	.word	0x08000192
 8000074:	08000192 	.word	0x08000192
 8000078:	08000192 	.word	0x08000192
 800007c:	08001be1 	.word	0x08001be1
 8000080:	08000192 	.word	0x08000192
 8000084:	08000192 	.word	0x08000192
 8000088:	08000192 	.word	0x08000192
 800008c:	08000192 	.word	0x08000192
 8000090:	08000192 	.word	0x08000192
 8000094:	08000192 	.word	0x08000192
 8000098:	08000192 	.word	0x08000192
 800009c:	08001c81 	.word	0x08001c81
 80000a0:	08000192 	.word	0x08000192
 80000a4:	08000192 	.word	0x08000192
 80000a8:	08000192 	.word	0x08000192
 80000ac:	08001a71 	.word	0x08001a71
 80000b0:	08000192 	.word	0x08000192
 80000b4:	08000192 	.word	0x08000192
 80000b8:	08000192 	.word	0x08000192
 80000bc:	08000192 	.word	0x08000192

Disassembly of section .text:

080000c0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80000c0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80000c2:	4824      	ldr	r0, [pc, #144]	; (8000154 <endfiniloop+0x6>)
                msr     MSP, r0
 80000c4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80000c8:	4823      	ldr	r0, [pc, #140]	; (8000158 <endfiniloop+0xa>)
                msr     PSP, r0
 80000ca:	f380 8809 	msr	PSP, r0

                /* CPU mode initialization as configured.*/
                movs    r0, #CRT0_CONTROL_INIT
 80000ce:	2002      	movs	r0, #2
                msr     CONTROL, r0
 80000d0:	f380 8814 	msr	CONTROL, r0
                isb
 80000d4:	f3bf 8f6f 	isb	sy
                str     r0, [r1]
#endif

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 80000d8:	f001 ffc2 	bl	8002060 <__core_init>
#endif

                /* Early initialization..*/
                bl      __early_init
 80000dc:	f001 fc18 	bl	8001910 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 80000e0:	481e      	ldr	r0, [pc, #120]	; (800015c <endfiniloop+0xe>)
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80000e2:	491f      	ldr	r1, [pc, #124]	; (8000160 <endfiniloop+0x12>)
                ldr     r2, =__main_stack_end__
 80000e4:	4a1b      	ldr	r2, [pc, #108]	; (8000154 <endfiniloop+0x6>)

080000e6 <msloop>:
msloop:
                cmp     r1, r2
 80000e6:	4291      	cmp	r1, r2
                bge     endmsloop
 80000e8:	da02      	bge.n	80000f0 <endmsloop>
                str     r0, [r1]
 80000ea:	6008      	str	r0, [r1, #0]
                add     r1, r1, #4
 80000ec:	3104      	adds	r1, #4
                b       msloop
 80000ee:	e7fa      	b.n	80000e6 <msloop>

080000f0 <endmsloop>:
endmsloop:
                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80000f0:	491c      	ldr	r1, [pc, #112]	; (8000164 <endfiniloop+0x16>)
                ldr     r2, =__process_stack_end__
 80000f2:	4a19      	ldr	r2, [pc, #100]	; (8000158 <endfiniloop+0xa>)

080000f4 <psloop>:
psloop:
                cmp     r1, r2
 80000f4:	4291      	cmp	r1, r2
                bge     endpsloop
 80000f6:	da02      	bge.n	80000fe <endpsloop>
                str     r0, [r1]
 80000f8:	6008      	str	r0, [r1, #0]
                add     r1, r1, #4
 80000fa:	3104      	adds	r1, #4
                b       psloop
 80000fc:	e7fa      	b.n	80000f4 <psloop>

080000fe <endpsloop>:
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata
 80000fe:	491a      	ldr	r1, [pc, #104]	; (8000168 <endfiniloop+0x1a>)
                ldr     r2, =_data
 8000100:	4a1a      	ldr	r2, [pc, #104]	; (800016c <endfiniloop+0x1e>)
                ldr     r3, =_edata
 8000102:	4b1b      	ldr	r3, [pc, #108]	; (8000170 <endfiniloop+0x22>)

08000104 <dloop>:
dloop:
                cmp     r2, r3
 8000104:	429a      	cmp	r2, r3
                bge     enddloop
 8000106:	da04      	bge.n	8000112 <enddloop>
                ldr     r0, [r1]
 8000108:	6808      	ldr	r0, [r1, #0]
                str     r0, [r2]
 800010a:	6010      	str	r0, [r2, #0]
                add     r1, r1, #4
 800010c:	3104      	adds	r1, #4
                add     r2, r2, #4
 800010e:	3204      	adds	r2, #4
                b       dloop
 8000110:	e7f8      	b.n	8000104 <dloop>

08000112 <enddloop>:
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000112:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000114:	4917      	ldr	r1, [pc, #92]	; (8000174 <endfiniloop+0x26>)
                ldr     r2, =_bss_end
 8000116:	4a18      	ldr	r2, [pc, #96]	; (8000178 <endfiniloop+0x2a>)

08000118 <bloop>:
bloop:
                cmp     r1, r2
 8000118:	4291      	cmp	r1, r2
                bge     endbloop
 800011a:	da02      	bge.n	8000122 <endbloop>
                str     r0, [r1]
 800011c:	6008      	str	r0, [r1, #0]
                add     r1, r1, #4
 800011e:	3104      	adds	r1, #4
                b       bloop
 8000120:	e7fa      	b.n	8000118 <bloop>

08000122 <endbloop>:
endbloop:
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000122:	f001 ff5d 	bl	8001fe0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000126:	f001 ff93 	bl	8002050 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 800012a:	4c14      	ldr	r4, [pc, #80]	; (800017c <endfiniloop+0x2e>)
                ldr     r5, =__init_array_end
 800012c:	4d14      	ldr	r5, [pc, #80]	; (8000180 <endfiniloop+0x32>)

0800012e <initloop>:
initloop:
                cmp     r4, r5
 800012e:	42ac      	cmp	r4, r5
                bge     endinitloop
 8000130:	da03      	bge.n	800013a <endinitloop>
                ldr     r1, [r4]
 8000132:	6821      	ldr	r1, [r4, #0]
                blx     r1
 8000134:	4788      	blx	r1
                add     r4, r4, #4
 8000136:	3404      	adds	r4, #4
                b       initloop
 8000138:	e7f9      	b.n	800012e <initloop>

0800013a <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 800013a:	f001 f8c9 	bl	80012d0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800013e:	4c11      	ldr	r4, [pc, #68]	; (8000184 <endfiniloop+0x36>)
                ldr     r5, =__fini_array_end
 8000140:	4d11      	ldr	r5, [pc, #68]	; (8000188 <endfiniloop+0x3a>)

08000142 <finiloop>:
finiloop:
                cmp     r4, r5
 8000142:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000144:	da03      	bge.n	800014e <endfiniloop>
                ldr     r1, [r4]
 8000146:	6821      	ldr	r1, [r4, #0]
                blx     r1
 8000148:	4788      	blx	r1
                add     r4, r4, #4
 800014a:	3404      	adds	r4, #4
                b       finiloop
 800014c:	e7f9      	b.n	8000142 <finiloop>

0800014e <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                ldr     r1, =__default_exit
 800014e:	490f      	ldr	r1, [pc, #60]	; (800018c <endfiniloop+0x3e>)
                bx      r1
 8000150:	4708      	bx	r1
 8000152:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 8000154:	20000200 	.word	0x20000200
                ldr     r0, =__process_stack_end__
 8000158:	20000400 	.word	0x20000400
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800015c:	55555555 	.word	0x55555555
                ldr     r1, =__main_stack_base__
 8000160:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000164:	20000200 	.word	0x20000200
                ldr     r1, =_textdata
 8000168:	0800241c 	.word	0x0800241c
                ldr     r2, =_data
 800016c:	20000400 	.word	0x20000400
                ldr     r3, =_edata
 8000170:	20000400 	.word	0x20000400
                ldr     r1, =_bss_start
 8000174:	20000400 	.word	0x20000400
                ldr     r2, =_bss_end
 8000178:	200007e8 	.word	0x200007e8
                ldr     r4, =__init_array_start
 800017c:	080000c0 	.word	0x080000c0
                ldr     r5, =__init_array_end
 8000180:	080000c0 	.word	0x080000c0
                ldr     r4, =__fini_array_start
 8000184:	080000c0 	.word	0x080000c0
                ldr     r5, =__fini_array_end
 8000188:	080000c0 	.word	0x080000c0
                ldr     r1, =__default_exit
 800018c:	08002041 	.word	0x08002041

08000190 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000190:	e796      	b.n	80000c0 <_crt0_entry>

08000192 <BusFault_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 8000192:	f000 f800 	bl	8000196 <_unhandled_exception>

08000196 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8000196:	e7fe      	b.n	8000196 <_unhandled_exception>

08000198 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, lr}
 8000198:	b5f0      	push	{r4, r5, r6, r7, lr}
                mov     r4, r8
 800019a:	4644      	mov	r4, r8
                mov     r5, r9
 800019c:	464d      	mov	r5, r9
                mov     r6, r10
 800019e:	4656      	mov	r6, sl
                mov     r7, r11
 80001a0:	465f      	mov	r7, fp
                push    {r4, r5, r6, r7}
 80001a2:	b4f0      	push	{r4, r5, r6, r7}
                
                mov     r3, sp
 80001a4:	466b      	mov	r3, sp
                str     r3, [r1, #CONTEXT_OFFSET]
 80001a6:	60cb      	str	r3, [r1, #12]
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80001a8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80001aa:	469d      	mov	sp, r3
                
                pop     {r4, r5, r6, r7}
 80001ac:	bcf0      	pop	{r4, r5, r6, r7}
                mov     r8, r4
 80001ae:	46a0      	mov	r8, r4
                mov     r9, r5
 80001b0:	46a9      	mov	r9, r5
                mov     r10, r6
 80001b2:	46b2      	mov	sl, r6
                mov     r11, r7
 80001b4:	46bb      	mov	fp, r7
                pop     {r4, r5, r6, r7, pc}
 80001b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080001b8 <_port_thread_start>:
                bl      _dbg_check_unlock
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
#endif
                cpsie   i
 80001b8:	b662      	cpsie	i
                mov     r0, r5
 80001ba:	1c28      	adds	r0, r5, #0
                blx     r4
 80001bc:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80001be:	2000      	movs	r0, #0
                bl      chThdExit
 80001c0:	f001 fb5e 	bl	8001880 <chThdExit>

080001c4 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80001c4:	f001 fb84 	bl	80018d0 <chSchDoReschedule>

080001c8 <_port_exit_from_isr>:
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
#endif
                .globl  _port_exit_from_isr
_port_exit_from_isr:
                ldr     r2, .L2
 80001c8:	4a01      	ldr	r2, [pc, #4]	; (80001d0 <_port_exit_from_isr+0x8>)
                ldr     r3, .L3
 80001ca:	4b02      	ldr	r3, [pc, #8]	; (80001d4 <_port_exit_from_isr+0xc>)
                str     r3, [r2, #0]
 80001cc:	6013      	str	r3, [r2, #0]
#if CORTEX_ALTERNATE_SWITCH
                cpsie   i
#endif
.L1:            b       .L1
 80001ce:	e7fe      	b.n	80001ce <_port_exit_from_isr+0x6>
 80001d0:	e000ed04 	.word	0xe000ed04
 80001d4:	80000000 	.word	0x80000000

080001d8 <__udivsi3>:
 80001d8:	2200      	movs	r2, #0
 80001da:	0843      	lsrs	r3, r0, #1
 80001dc:	428b      	cmp	r3, r1
 80001de:	d374      	bcc.n	80002ca <__udivsi3+0xf2>
 80001e0:	0903      	lsrs	r3, r0, #4
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d35f      	bcc.n	80002a6 <__udivsi3+0xce>
 80001e6:	0a03      	lsrs	r3, r0, #8
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d344      	bcc.n	8000276 <__udivsi3+0x9e>
 80001ec:	0b03      	lsrs	r3, r0, #12
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d328      	bcc.n	8000244 <__udivsi3+0x6c>
 80001f2:	0c03      	lsrs	r3, r0, #16
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d30d      	bcc.n	8000214 <__udivsi3+0x3c>
 80001f8:	22ff      	movs	r2, #255	; 0xff
 80001fa:	0209      	lsls	r1, r1, #8
 80001fc:	ba12      	rev	r2, r2
 80001fe:	0c03      	lsrs	r3, r0, #16
 8000200:	428b      	cmp	r3, r1
 8000202:	d302      	bcc.n	800020a <__udivsi3+0x32>
 8000204:	1212      	asrs	r2, r2, #8
 8000206:	0209      	lsls	r1, r1, #8
 8000208:	d065      	beq.n	80002d6 <__udivsi3+0xfe>
 800020a:	0b03      	lsrs	r3, r0, #12
 800020c:	428b      	cmp	r3, r1
 800020e:	d319      	bcc.n	8000244 <__udivsi3+0x6c>
 8000210:	e000      	b.n	8000214 <__udivsi3+0x3c>
 8000212:	0a09      	lsrs	r1, r1, #8
 8000214:	0bc3      	lsrs	r3, r0, #15
 8000216:	428b      	cmp	r3, r1
 8000218:	d301      	bcc.n	800021e <__udivsi3+0x46>
 800021a:	03cb      	lsls	r3, r1, #15
 800021c:	1ac0      	subs	r0, r0, r3
 800021e:	4152      	adcs	r2, r2
 8000220:	0b83      	lsrs	r3, r0, #14
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x52>
 8000226:	038b      	lsls	r3, r1, #14
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	0b43      	lsrs	r3, r0, #13
 800022e:	428b      	cmp	r3, r1
 8000230:	d301      	bcc.n	8000236 <__udivsi3+0x5e>
 8000232:	034b      	lsls	r3, r1, #13
 8000234:	1ac0      	subs	r0, r0, r3
 8000236:	4152      	adcs	r2, r2
 8000238:	0b03      	lsrs	r3, r0, #12
 800023a:	428b      	cmp	r3, r1
 800023c:	d301      	bcc.n	8000242 <__udivsi3+0x6a>
 800023e:	030b      	lsls	r3, r1, #12
 8000240:	1ac0      	subs	r0, r0, r3
 8000242:	4152      	adcs	r2, r2
 8000244:	0ac3      	lsrs	r3, r0, #11
 8000246:	428b      	cmp	r3, r1
 8000248:	d301      	bcc.n	800024e <__udivsi3+0x76>
 800024a:	02cb      	lsls	r3, r1, #11
 800024c:	1ac0      	subs	r0, r0, r3
 800024e:	4152      	adcs	r2, r2
 8000250:	0a83      	lsrs	r3, r0, #10
 8000252:	428b      	cmp	r3, r1
 8000254:	d301      	bcc.n	800025a <__udivsi3+0x82>
 8000256:	028b      	lsls	r3, r1, #10
 8000258:	1ac0      	subs	r0, r0, r3
 800025a:	4152      	adcs	r2, r2
 800025c:	0a43      	lsrs	r3, r0, #9
 800025e:	428b      	cmp	r3, r1
 8000260:	d301      	bcc.n	8000266 <__udivsi3+0x8e>
 8000262:	024b      	lsls	r3, r1, #9
 8000264:	1ac0      	subs	r0, r0, r3
 8000266:	4152      	adcs	r2, r2
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d301      	bcc.n	8000272 <__udivsi3+0x9a>
 800026e:	020b      	lsls	r3, r1, #8
 8000270:	1ac0      	subs	r0, r0, r3
 8000272:	4152      	adcs	r2, r2
 8000274:	d2cd      	bcs.n	8000212 <__udivsi3+0x3a>
 8000276:	09c3      	lsrs	r3, r0, #7
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__udivsi3+0xa8>
 800027c:	01cb      	lsls	r3, r1, #7
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0983      	lsrs	r3, r0, #6
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__udivsi3+0xb4>
 8000288:	018b      	lsls	r3, r1, #6
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0943      	lsrs	r3, r0, #5
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__udivsi3+0xc0>
 8000294:	014b      	lsls	r3, r1, #5
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0903      	lsrs	r3, r0, #4
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__udivsi3+0xcc>
 80002a0:	010b      	lsls	r3, r1, #4
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	08c3      	lsrs	r3, r0, #3
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__udivsi3+0xd8>
 80002ac:	00cb      	lsls	r3, r1, #3
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0883      	lsrs	r3, r0, #2
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__udivsi3+0xe4>
 80002b8:	008b      	lsls	r3, r1, #2
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0843      	lsrs	r3, r0, #1
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__udivsi3+0xf0>
 80002c4:	004b      	lsls	r3, r1, #1
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	1a41      	subs	r1, r0, r1
 80002cc:	d200      	bcs.n	80002d0 <__udivsi3+0xf8>
 80002ce:	4601      	mov	r1, r0
 80002d0:	4152      	adcs	r2, r2
 80002d2:	4610      	mov	r0, r2
 80002d4:	4770      	bx	lr
 80002d6:	e7ff      	b.n	80002d8 <__udivsi3+0x100>
 80002d8:	b501      	push	{r0, lr}
 80002da:	2000      	movs	r0, #0
 80002dc:	f000 f806 	bl	80002ec <__aeabi_idiv0>
 80002e0:	bd02      	pop	{r1, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__aeabi_uidivmod>:
 80002e4:	2900      	cmp	r1, #0
 80002e6:	d0f7      	beq.n	80002d8 <__udivsi3+0x100>
 80002e8:	e776      	b.n	80001d8 <__udivsi3>
 80002ea:	4770      	bx	lr

080002ec <__aeabi_idiv0>:
 80002ec:	4770      	bx	lr
 80002ee:	46c0      	nop			; (mov r8, r8)

080002f0 <__aeabi_uldivmod>:
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d111      	bne.n	8000318 <__aeabi_uldivmod+0x28>
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	d10f      	bne.n	8000318 <__aeabi_uldivmod+0x28>
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d100      	bne.n	80002fe <__aeabi_uldivmod+0xe>
 80002fc:	2800      	cmp	r0, #0
 80002fe:	d002      	beq.n	8000306 <__aeabi_uldivmod+0x16>
 8000300:	2100      	movs	r1, #0
 8000302:	43c9      	mvns	r1, r1
 8000304:	1c08      	adds	r0, r1, #0
 8000306:	b407      	push	{r0, r1, r2}
 8000308:	4802      	ldr	r0, [pc, #8]	; (8000314 <__aeabi_uldivmod+0x24>)
 800030a:	a102      	add	r1, pc, #8	; (adr r1, 8000314 <__aeabi_uldivmod+0x24>)
 800030c:	1840      	adds	r0, r0, r1
 800030e:	9002      	str	r0, [sp, #8]
 8000310:	bd03      	pop	{r0, r1, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	ffffffd9 	.word	0xffffffd9
 8000318:	b403      	push	{r0, r1}
 800031a:	4668      	mov	r0, sp
 800031c:	b501      	push	{r0, lr}
 800031e:	9802      	ldr	r0, [sp, #8]
 8000320:	f000 f830 	bl	8000384 <__udivmoddi4>
 8000324:	9b01      	ldr	r3, [sp, #4]
 8000326:	469e      	mov	lr, r3
 8000328:	b002      	add	sp, #8
 800032a:	bc0c      	pop	{r2, r3}
 800032c:	4770      	bx	lr
 800032e:	46c0      	nop			; (mov r8, r8)

08000330 <__aeabi_lmul>:
 8000330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000332:	46ce      	mov	lr, r9
 8000334:	4647      	mov	r7, r8
 8000336:	0415      	lsls	r5, r2, #16
 8000338:	0c2d      	lsrs	r5, r5, #16
 800033a:	002e      	movs	r6, r5
 800033c:	b580      	push	{r7, lr}
 800033e:	0407      	lsls	r7, r0, #16
 8000340:	0c14      	lsrs	r4, r2, #16
 8000342:	0c3f      	lsrs	r7, r7, #16
 8000344:	4699      	mov	r9, r3
 8000346:	0c03      	lsrs	r3, r0, #16
 8000348:	437e      	muls	r6, r7
 800034a:	435d      	muls	r5, r3
 800034c:	4367      	muls	r7, r4
 800034e:	4363      	muls	r3, r4
 8000350:	197f      	adds	r7, r7, r5
 8000352:	0c34      	lsrs	r4, r6, #16
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	469c      	mov	ip, r3
 8000358:	42a5      	cmp	r5, r4
 800035a:	d903      	bls.n	8000364 <__aeabi_lmul+0x34>
 800035c:	2380      	movs	r3, #128	; 0x80
 800035e:	025b      	lsls	r3, r3, #9
 8000360:	4698      	mov	r8, r3
 8000362:	44c4      	add	ip, r8
 8000364:	464b      	mov	r3, r9
 8000366:	4343      	muls	r3, r0
 8000368:	4351      	muls	r1, r2
 800036a:	0c25      	lsrs	r5, r4, #16
 800036c:	0436      	lsls	r6, r6, #16
 800036e:	4465      	add	r5, ip
 8000370:	0c36      	lsrs	r6, r6, #16
 8000372:	0424      	lsls	r4, r4, #16
 8000374:	19a4      	adds	r4, r4, r6
 8000376:	195b      	adds	r3, r3, r5
 8000378:	1859      	adds	r1, r3, r1
 800037a:	0020      	movs	r0, r4
 800037c:	bc0c      	pop	{r2, r3}
 800037e:	4690      	mov	r8, r2
 8000380:	4699      	mov	r9, r3
 8000382:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000384 <__udivmoddi4>:
 8000384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000386:	464f      	mov	r7, r9
 8000388:	4646      	mov	r6, r8
 800038a:	46d6      	mov	lr, sl
 800038c:	b5c0      	push	{r6, r7, lr}
 800038e:	0004      	movs	r4, r0
 8000390:	b082      	sub	sp, #8
 8000392:	000d      	movs	r5, r1
 8000394:	4691      	mov	r9, r2
 8000396:	4698      	mov	r8, r3
 8000398:	428b      	cmp	r3, r1
 800039a:	d82f      	bhi.n	80003fc <__udivmoddi4+0x78>
 800039c:	d02c      	beq.n	80003f8 <__udivmoddi4+0x74>
 800039e:	4641      	mov	r1, r8
 80003a0:	4648      	mov	r0, r9
 80003a2:	f000 f8b1 	bl	8000508 <__clzdi2>
 80003a6:	0029      	movs	r1, r5
 80003a8:	0006      	movs	r6, r0
 80003aa:	0020      	movs	r0, r4
 80003ac:	f000 f8ac 	bl	8000508 <__clzdi2>
 80003b0:	1a33      	subs	r3, r6, r0
 80003b2:	469c      	mov	ip, r3
 80003b4:	3b20      	subs	r3, #32
 80003b6:	469a      	mov	sl, r3
 80003b8:	d500      	bpl.n	80003bc <__udivmoddi4+0x38>
 80003ba:	e076      	b.n	80004aa <__udivmoddi4+0x126>
 80003bc:	464b      	mov	r3, r9
 80003be:	4652      	mov	r2, sl
 80003c0:	4093      	lsls	r3, r2
 80003c2:	001f      	movs	r7, r3
 80003c4:	464b      	mov	r3, r9
 80003c6:	4662      	mov	r2, ip
 80003c8:	4093      	lsls	r3, r2
 80003ca:	001e      	movs	r6, r3
 80003cc:	42af      	cmp	r7, r5
 80003ce:	d828      	bhi.n	8000422 <__udivmoddi4+0x9e>
 80003d0:	d025      	beq.n	800041e <__udivmoddi4+0x9a>
 80003d2:	4653      	mov	r3, sl
 80003d4:	1ba4      	subs	r4, r4, r6
 80003d6:	41bd      	sbcs	r5, r7
 80003d8:	2b00      	cmp	r3, #0
 80003da:	da00      	bge.n	80003de <__udivmoddi4+0x5a>
 80003dc:	e07b      	b.n	80004d6 <__udivmoddi4+0x152>
 80003de:	2200      	movs	r2, #0
 80003e0:	2300      	movs	r3, #0
 80003e2:	9200      	str	r2, [sp, #0]
 80003e4:	9301      	str	r3, [sp, #4]
 80003e6:	2301      	movs	r3, #1
 80003e8:	4652      	mov	r2, sl
 80003ea:	4093      	lsls	r3, r2
 80003ec:	9301      	str	r3, [sp, #4]
 80003ee:	2301      	movs	r3, #1
 80003f0:	4662      	mov	r2, ip
 80003f2:	4093      	lsls	r3, r2
 80003f4:	9300      	str	r3, [sp, #0]
 80003f6:	e018      	b.n	800042a <__udivmoddi4+0xa6>
 80003f8:	4282      	cmp	r2, r0
 80003fa:	d9d0      	bls.n	800039e <__udivmoddi4+0x1a>
 80003fc:	2200      	movs	r2, #0
 80003fe:	2300      	movs	r3, #0
 8000400:	9200      	str	r2, [sp, #0]
 8000402:	9301      	str	r3, [sp, #4]
 8000404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <__udivmoddi4+0x8a>
 800040a:	601c      	str	r4, [r3, #0]
 800040c:	605d      	str	r5, [r3, #4]
 800040e:	9800      	ldr	r0, [sp, #0]
 8000410:	9901      	ldr	r1, [sp, #4]
 8000412:	b002      	add	sp, #8
 8000414:	bc1c      	pop	{r2, r3, r4}
 8000416:	4690      	mov	r8, r2
 8000418:	4699      	mov	r9, r3
 800041a:	46a2      	mov	sl, r4
 800041c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800041e:	42a3      	cmp	r3, r4
 8000420:	d9d7      	bls.n	80003d2 <__udivmoddi4+0x4e>
 8000422:	2200      	movs	r2, #0
 8000424:	2300      	movs	r3, #0
 8000426:	9200      	str	r2, [sp, #0]
 8000428:	9301      	str	r3, [sp, #4]
 800042a:	4663      	mov	r3, ip
 800042c:	2b00      	cmp	r3, #0
 800042e:	d0e9      	beq.n	8000404 <__udivmoddi4+0x80>
 8000430:	07fb      	lsls	r3, r7, #31
 8000432:	4698      	mov	r8, r3
 8000434:	4641      	mov	r1, r8
 8000436:	0872      	lsrs	r2, r6, #1
 8000438:	430a      	orrs	r2, r1
 800043a:	087b      	lsrs	r3, r7, #1
 800043c:	4666      	mov	r6, ip
 800043e:	e00e      	b.n	800045e <__udivmoddi4+0xda>
 8000440:	42ab      	cmp	r3, r5
 8000442:	d101      	bne.n	8000448 <__udivmoddi4+0xc4>
 8000444:	42a2      	cmp	r2, r4
 8000446:	d80c      	bhi.n	8000462 <__udivmoddi4+0xde>
 8000448:	1aa4      	subs	r4, r4, r2
 800044a:	419d      	sbcs	r5, r3
 800044c:	2001      	movs	r0, #1
 800044e:	1924      	adds	r4, r4, r4
 8000450:	416d      	adcs	r5, r5
 8000452:	2100      	movs	r1, #0
 8000454:	3e01      	subs	r6, #1
 8000456:	1824      	adds	r4, r4, r0
 8000458:	414d      	adcs	r5, r1
 800045a:	2e00      	cmp	r6, #0
 800045c:	d006      	beq.n	800046c <__udivmoddi4+0xe8>
 800045e:	42ab      	cmp	r3, r5
 8000460:	d9ee      	bls.n	8000440 <__udivmoddi4+0xbc>
 8000462:	3e01      	subs	r6, #1
 8000464:	1924      	adds	r4, r4, r4
 8000466:	416d      	adcs	r5, r5
 8000468:	2e00      	cmp	r6, #0
 800046a:	d1f8      	bne.n	800045e <__udivmoddi4+0xda>
 800046c:	9800      	ldr	r0, [sp, #0]
 800046e:	9901      	ldr	r1, [sp, #4]
 8000470:	4653      	mov	r3, sl
 8000472:	1900      	adds	r0, r0, r4
 8000474:	4169      	adcs	r1, r5
 8000476:	2b00      	cmp	r3, #0
 8000478:	db23      	blt.n	80004c2 <__udivmoddi4+0x13e>
 800047a:	002b      	movs	r3, r5
 800047c:	4652      	mov	r2, sl
 800047e:	40d3      	lsrs	r3, r2
 8000480:	002a      	movs	r2, r5
 8000482:	4664      	mov	r4, ip
 8000484:	40e2      	lsrs	r2, r4
 8000486:	001c      	movs	r4, r3
 8000488:	4653      	mov	r3, sl
 800048a:	0015      	movs	r5, r2
 800048c:	2b00      	cmp	r3, #0
 800048e:	db2d      	blt.n	80004ec <__udivmoddi4+0x168>
 8000490:	0026      	movs	r6, r4
 8000492:	4657      	mov	r7, sl
 8000494:	40be      	lsls	r6, r7
 8000496:	0033      	movs	r3, r6
 8000498:	0026      	movs	r6, r4
 800049a:	4667      	mov	r7, ip
 800049c:	40be      	lsls	r6, r7
 800049e:	0032      	movs	r2, r6
 80004a0:	1a80      	subs	r0, r0, r2
 80004a2:	4199      	sbcs	r1, r3
 80004a4:	9000      	str	r0, [sp, #0]
 80004a6:	9101      	str	r1, [sp, #4]
 80004a8:	e7ac      	b.n	8000404 <__udivmoddi4+0x80>
 80004aa:	4662      	mov	r2, ip
 80004ac:	2320      	movs	r3, #32
 80004ae:	1a9b      	subs	r3, r3, r2
 80004b0:	464a      	mov	r2, r9
 80004b2:	40da      	lsrs	r2, r3
 80004b4:	4661      	mov	r1, ip
 80004b6:	0013      	movs	r3, r2
 80004b8:	4642      	mov	r2, r8
 80004ba:	408a      	lsls	r2, r1
 80004bc:	0017      	movs	r7, r2
 80004be:	431f      	orrs	r7, r3
 80004c0:	e780      	b.n	80003c4 <__udivmoddi4+0x40>
 80004c2:	4662      	mov	r2, ip
 80004c4:	2320      	movs	r3, #32
 80004c6:	1a9b      	subs	r3, r3, r2
 80004c8:	002a      	movs	r2, r5
 80004ca:	4666      	mov	r6, ip
 80004cc:	409a      	lsls	r2, r3
 80004ce:	0023      	movs	r3, r4
 80004d0:	40f3      	lsrs	r3, r6
 80004d2:	4313      	orrs	r3, r2
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0xfc>
 80004d6:	4662      	mov	r2, ip
 80004d8:	2320      	movs	r3, #32
 80004da:	2100      	movs	r1, #0
 80004dc:	1a9b      	subs	r3, r3, r2
 80004de:	2200      	movs	r2, #0
 80004e0:	9100      	str	r1, [sp, #0]
 80004e2:	9201      	str	r2, [sp, #4]
 80004e4:	2201      	movs	r2, #1
 80004e6:	40da      	lsrs	r2, r3
 80004e8:	9201      	str	r2, [sp, #4]
 80004ea:	e780      	b.n	80003ee <__udivmoddi4+0x6a>
 80004ec:	2320      	movs	r3, #32
 80004ee:	4662      	mov	r2, ip
 80004f0:	0026      	movs	r6, r4
 80004f2:	1a9b      	subs	r3, r3, r2
 80004f4:	40de      	lsrs	r6, r3
 80004f6:	002f      	movs	r7, r5
 80004f8:	46b0      	mov	r8, r6
 80004fa:	4666      	mov	r6, ip
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	4646      	mov	r6, r8
 8000500:	003b      	movs	r3, r7
 8000502:	4333      	orrs	r3, r6
 8000504:	e7c8      	b.n	8000498 <__udivmoddi4+0x114>
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__clzdi2>:
 8000508:	b510      	push	{r4, lr}
 800050a:	2900      	cmp	r1, #0
 800050c:	d103      	bne.n	8000516 <__clzdi2+0xe>
 800050e:	f000 f807 	bl	8000520 <__clzsi2>
 8000512:	3020      	adds	r0, #32
 8000514:	e002      	b.n	800051c <__clzdi2+0x14>
 8000516:	1c08      	adds	r0, r1, #0
 8000518:	f000 f802 	bl	8000520 <__clzsi2>
 800051c:	bd10      	pop	{r4, pc}
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__clzsi2>:
 8000520:	211c      	movs	r1, #28
 8000522:	2301      	movs	r3, #1
 8000524:	041b      	lsls	r3, r3, #16
 8000526:	4298      	cmp	r0, r3
 8000528:	d301      	bcc.n	800052e <__clzsi2+0xe>
 800052a:	0c00      	lsrs	r0, r0, #16
 800052c:	3910      	subs	r1, #16
 800052e:	0a1b      	lsrs	r3, r3, #8
 8000530:	4298      	cmp	r0, r3
 8000532:	d301      	bcc.n	8000538 <__clzsi2+0x18>
 8000534:	0a00      	lsrs	r0, r0, #8
 8000536:	3908      	subs	r1, #8
 8000538:	091b      	lsrs	r3, r3, #4
 800053a:	4298      	cmp	r0, r3
 800053c:	d301      	bcc.n	8000542 <__clzsi2+0x22>
 800053e:	0900      	lsrs	r0, r0, #4
 8000540:	3904      	subs	r1, #4
 8000542:	a202      	add	r2, pc, #8	; (adr r2, 800054c <__clzsi2+0x2c>)
 8000544:	5c10      	ldrb	r0, [r2, r0]
 8000546:	1840      	adds	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	02020304 	.word	0x02020304
 8000550:	01010101 	.word	0x01010101
	...

08000560 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8000560:	b530      	push	{r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000562:	b672      	cpsid	i
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <chCoreAllocAlignedWithOffset+0x30>)
 8000566:	1e4c      	subs	r4, r1, #1
 8000568:	681d      	ldr	r5, [r3, #0]
  size = MEM_ALIGN_NEXT(size, align);
 800056a:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800056c:	18aa      	adds	r2, r5, r2
  size = MEM_ALIGN_NEXT(size, align);
 800056e:	1900      	adds	r0, r0, r4
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000570:	1912      	adds	r2, r2, r4
 8000572:	400a      	ands	r2, r1
  size = MEM_ALIGN_NEXT(size, align);
 8000574:	4001      	ands	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000576:	6858      	ldr	r0, [r3, #4]
  next = p + size;
 8000578:	1851      	adds	r1, r2, r1
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800057a:	4281      	cmp	r1, r0
 800057c:	d805      	bhi.n	800058a <chCoreAllocAlignedWithOffset+0x2a>
 800057e:	428d      	cmp	r5, r1
 8000580:	d803      	bhi.n	800058a <chCoreAllocAlignedWithOffset+0x2a>
  ch_memcore.nextmem = next;
 8000582:	6019      	str	r1, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000584:	b662      	cpsie	i
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000586:	0010      	movs	r0, r2
 8000588:	bd30      	pop	{r4, r5, pc}
    return NULL;
 800058a:	2200      	movs	r2, #0
 800058c:	e7fa      	b.n	8000584 <chCoreAllocAlignedWithOffset+0x24>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	20000650 	.word	0x20000650
	...

080005a0 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	4a02      	ldr	r2, [pc, #8]	; (80005ac <notify1+0xc>)
 80005a4:	6813      	ldr	r3, [r2, #0]
 80005a6:	430b      	orrs	r3, r1
 80005a8:	6013      	str	r3, [r2, #0]
}
 80005aa:	4770      	bx	lr
 80005ac:	40013800 	.word	0x40013800

080005b0 <_port_irq_epilogue.part.0>:
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80005b2:	f3ef 8309 	mrs	r3, PSP
    /* The extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 80005b6:	3b20      	subs	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80005b8:	f383 8809 	msr	PSP, r3

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	0452      	lsls	r2, r2, #17
 80005c0:	61da      	str	r2, [r3, #28]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <_port_irq_epilogue.part.0+0x2c>)
 80005c4:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80005c6:	6992      	ldr	r2, [r2, #24]

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80005c8:	6889      	ldr	r1, [r1, #8]
 80005ca:	6892      	ldr	r2, [r2, #8]
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d802      	bhi.n	80005d6 <_port_irq_epilogue.part.0+0x26>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80005d0:	4a03      	ldr	r2, [pc, #12]	; (80005e0 <_port_irq_epilogue.part.0+0x30>)
 80005d2:	619a      	str	r2, [r3, #24]
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
  }
}
 80005d4:	4770      	bx	lr
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80005d6:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <_port_irq_epilogue.part.0+0x34>)
 80005d8:	619a      	str	r2, [r3, #24]
 80005da:	e7fb      	b.n	80005d4 <_port_irq_epilogue.part.0+0x24>
 80005dc:	200004bc 	.word	0x200004bc
 80005e0:	080001c8 	.word	0x080001c8
 80005e4:	080001c5 	.word	0x080001c5
	...

080005f0 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80005f0:	b530      	push	{r4, r5, lr}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80005f2:	4c0a      	ldr	r4, [pc, #40]	; (800061c <chCoreAllocAlignedI+0x2c>)
  size = MEM_ALIGN_NEXT(size, align);
 80005f4:	424b      	negs	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80005f6:	6825      	ldr	r5, [r4, #0]
 80005f8:	1e6a      	subs	r2, r5, #1
 80005fa:	1852      	adds	r2, r2, r1
  size = MEM_ALIGN_NEXT(size, align);
 80005fc:	3901      	subs	r1, #1
 80005fe:	1809      	adds	r1, r1, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000600:	401a      	ands	r2, r3
  size = MEM_ALIGN_NEXT(size, align);
 8000602:	4019      	ands	r1, r3
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000604:	6863      	ldr	r3, [r4, #4]
  next = p + size;
 8000606:	1851      	adds	r1, r2, r1
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000608:	4299      	cmp	r1, r3
 800060a:	d804      	bhi.n	8000616 <chCoreAllocAlignedI+0x26>
 800060c:	428d      	cmp	r5, r1
 800060e:	d802      	bhi.n	8000616 <chCoreAllocAlignedI+0x26>
  ch_memcore.nextmem = next;
 8000610:	6021      	str	r1, [r4, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000612:	0010      	movs	r0, r2
 8000614:	bd30      	pop	{r4, r5, pc}
    return NULL;
 8000616:	2200      	movs	r2, #0
 8000618:	e7fb      	b.n	8000612 <chCoreAllocAlignedI+0x22>
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	20000650 	.word	0x20000650

08000620 <wakeup>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
  switch (tp->state) {
 8000622:	2320      	movs	r3, #32
 8000624:	5cc3      	ldrb	r3, [r0, r3]
 8000626:	2b07      	cmp	r3, #7
 8000628:	d80c      	bhi.n	8000644 <wakeup+0x24>
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <wakeup+0x54>)
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	58d3      	ldr	r3, [r2, r3]
 8000630:	469f      	mov	pc, r3
    chSemFastSignalI(tp->u.wtsemp);
 8000632:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000634:	6893      	ldr	r3, [r2, #8]
 8000636:	3301      	adds	r3, #1
 8000638:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800063a:	6802      	ldr	r2, [r0, #0]
 800063c:	6843      	ldr	r3, [r0, #4]
 800063e:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000640:	6802      	ldr	r2, [r0, #0]
 8000642:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 8000644:	2301      	movs	r3, #1
  tp->state = CH_STATE_READY;
 8000646:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000648:	425b      	negs	r3, r3
 800064a:	6243      	str	r3, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800064c:	3321      	adds	r3, #33	; 0x21
 800064e:	54c2      	strb	r2, [r0, r3]
  } while (cp->prio >= tp->prio);
 8000650:	6882      	ldr	r2, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <wakeup+0x58>)
    cp = cp->queue.next;
 8000654:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000656:	6899      	ldr	r1, [r3, #8]
 8000658:	4291      	cmp	r1, r2
 800065a:	d2fb      	bcs.n	8000654 <wakeup+0x34>
  tp->queue.prev             = cp->queue.prev;
 800065c:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 800065e:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8000660:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8000662:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000664:	6058      	str	r0, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000666:	b662      	cpsie	i
}
 8000668:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800066a:	2200      	movs	r2, #0
 800066c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	e7e8      	b.n	8000644 <wakeup+0x24>
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	080020ec 	.word	0x080020ec
 8000678:	200004bc 	.word	0x200004bc
 800067c:	00000000 	.word	0x00000000

08000680 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000680:	2320      	movs	r3, #32
 8000682:	2200      	movs	r2, #0
 8000684:	54c2      	strb	r2, [r0, r3]
  } while (cp->prio >= tp->prio);
 8000686:	6882      	ldr	r2, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <chSchReadyI+0x20>)
    cp = cp->queue.next;
 800068a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800068c:	6899      	ldr	r1, [r3, #8]
 800068e:	4291      	cmp	r1, r2
 8000690:	d2fb      	bcs.n	800068a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8000692:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8000694:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8000696:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8000698:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800069a:	6058      	str	r0, [r3, #4]
}
 800069c:	4770      	bx	lr
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	200004bc 	.word	0x200004bc
	...

080006b0 <chEvtBroadcastFlagsI.constprop.14>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80006b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b2:	46c6      	mov	lr, r8
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 80006b4:	4d18      	ldr	r5, [pc, #96]	; (8000718 <chEvtBroadcastFlagsI.constprop.14+0x68>)
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80006b6:	b500      	push	{lr}
  elp = esp->next;
 80006b8:	686c      	ldr	r4, [r5, #4]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80006ba:	3504      	adds	r5, #4
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80006bc:	0006      	movs	r6, r0
  while (elp != (event_listener_t *)esp) {
 80006be:	42ac      	cmp	r4, r5
 80006c0:	d022      	beq.n	8000708 <chEvtBroadcastFlagsI.constprop.14+0x58>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 80006c2:	2300      	movs	r3, #0
  if (((tp->state == CH_STATE_WTOREVT) &&
 80006c4:	2720      	movs	r7, #32
    tp->u.rdymsg = MSG_OK;
 80006c6:	4698      	mov	r8, r3
 80006c8:	e004      	b.n	80006d4 <chEvtBroadcastFlagsI.constprop.14+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80006ca:	2a0b      	cmp	r2, #11
 80006cc:	d01f      	beq.n	800070e <chEvtBroadcastFlagsI.constprop.14+0x5e>
    elp = elp->next;
 80006ce:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80006d0:	42ac      	cmp	r4, r5
 80006d2:	d019      	beq.n	8000708 <chEvtBroadcastFlagsI.constprop.14+0x58>
    elp->flags |= flags;
 80006d4:	68e3      	ldr	r3, [r4, #12]
 80006d6:	4333      	orrs	r3, r6
 80006d8:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80006da:	2e00      	cmp	r6, #0
 80006dc:	d002      	beq.n	80006e4 <chEvtBroadcastFlagsI.constprop.14+0x34>
 80006de:	6922      	ldr	r2, [r4, #16]
 80006e0:	421a      	tst	r2, r3
 80006e2:	d0f4      	beq.n	80006ce <chEvtBroadcastFlagsI.constprop.14+0x1e>
      chEvtSignalI(elp->listener, elp->events);
 80006e4:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
 80006e6:	68a3      	ldr	r3, [r4, #8]
 80006e8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80006ea:	4313      	orrs	r3, r2
 80006ec:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80006ee:	5dc2      	ldrb	r2, [r0, r7]
 80006f0:	2a0a      	cmp	r2, #10
 80006f2:	d1ea      	bne.n	80006ca <chEvtBroadcastFlagsI.constprop.14+0x1a>
 80006f4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80006f6:	421a      	tst	r2, r3
 80006f8:	d0e9      	beq.n	80006ce <chEvtBroadcastFlagsI.constprop.14+0x1e>
    tp->u.rdymsg = MSG_OK;
 80006fa:	4643      	mov	r3, r8
 80006fc:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80006fe:	f7ff ffbf 	bl	8000680 <chSchReadyI>
    elp = elp->next;
 8000702:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000704:	42ac      	cmp	r4, r5
 8000706:	d1e5      	bne.n	80006d4 <chEvtBroadcastFlagsI.constprop.14+0x24>
}
 8000708:	bc04      	pop	{r2}
 800070a:	4690      	mov	r8, r2
 800070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800070e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000710:	4013      	ands	r3, r2
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000712:	429a      	cmp	r2, r3
 8000714:	d1db      	bne.n	80006ce <chEvtBroadcastFlagsI.constprop.14+0x1e>
 8000716:	e7f0      	b.n	80006fa <chEvtBroadcastFlagsI.constprop.14+0x4a>
 8000718:	20000434 	.word	0x20000434
 800071c:	00000000 	.word	0x00000000

08000720 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000720:	e7fe      	b.n	8000720 <_idle_thread>
 8000722:	46c0      	nop			; (mov r8, r8)
	...

08000730 <_pal_lld_setgroupmode>:
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000730:	2303      	movs	r3, #3
                           iomode_t mode) {
 8000732:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000734:	4657      	mov	r7, sl
 8000736:	4645      	mov	r5, r8
 8000738:	46de      	mov	lr, fp
 800073a:	464e      	mov	r6, r9
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800073c:	4013      	ands	r3, r2
 800073e:	4699      	mov	r9, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 8000740:	2301      	movs	r3, #1
                           iomode_t mode) {
 8000742:	b5e0      	push	{r5, r6, r7, lr}
    if ((mask & 1) != 0) {
 8000744:	4698      	mov	r8, r3
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8000746:	3306      	adds	r3, #6
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8000748:	0752      	lsls	r2, r2, #29
      altrmask = altr << ((bit & 7) * 4);
 800074a:	469b      	mov	fp, r3
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 800074c:	3b04      	subs	r3, #4
                           iomode_t mode) {
 800074e:	b083      	sub	sp, #12
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8000750:	0fd2      	lsrs	r2, r2, #31
  uint32_t bit     = 0;
 8000752:	2700      	movs	r7, #0
      m2 = 3 << (bit * 2);
 8000754:	469a      	mov	sl, r3
      m4 = 15 << ((bit & 7) * 4);
 8000756:	464d      	mov	r5, r9
 8000758:	e00f      	b.n	800077a <_pal_lld_setgroupmode+0x4a>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 800075a:	6806      	ldr	r6, [r0, #0]
 800075c:	4033      	ands	r3, r6
 800075e:	432b      	orrs	r3, r5
 8000760:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8000762:	2f07      	cmp	r7, #7
 8000764:	d83f      	bhi.n	80007e6 <_pal_lld_setgroupmode+0xb6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000766:	6a03      	ldr	r3, [r0, #32]
 8000768:	9e01      	ldr	r6, [sp, #4]
 800076a:	401c      	ands	r4, r3
 800076c:	4326      	orrs	r6, r4
 800076e:	6206      	str	r6, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
 8000770:	0849      	lsrs	r1, r1, #1
    if (!mask)
 8000772:	d031      	beq.n	80007d8 <_pal_lld_setgroupmode+0xa8>
      return;
    otyper <<= 1;
 8000774:	0052      	lsls	r2, r2, #1
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8000776:	00ad      	lsls	r5, r5, #2
    bit++;
 8000778:	3701      	adds	r7, #1
    if ((mask & 1) != 0) {
 800077a:	4643      	mov	r3, r8
 800077c:	420b      	tst	r3, r1
 800077e:	d0f7      	beq.n	8000770 <_pal_lld_setgroupmode+0x40>
      altrmask = altr << ((bit & 7) * 4);
 8000780:	465c      	mov	r4, fp
 8000782:	4646      	mov	r6, r8
 8000784:	403c      	ands	r4, r7
 8000786:	00a4      	lsls	r4, r4, #2
 8000788:	40a6      	lsls	r6, r4
 800078a:	9601      	str	r6, [sp, #4]
      m1 = 1 << bit;
 800078c:	4646      	mov	r6, r8
 800078e:	40be      	lsls	r6, r7
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000790:	6843      	ldr	r3, [r0, #4]
 8000792:	43b3      	bics	r3, r6
      m2 = 3 << (bit * 2);
 8000794:	4656      	mov	r6, sl
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000796:	4313      	orrs	r3, r2
 8000798:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800079a:	6883      	ldr	r3, [r0, #8]
 800079c:	469c      	mov	ip, r3
      m2 = 3 << (bit * 2);
 800079e:	007b      	lsls	r3, r7, #1
 80007a0:	409e      	lsls	r6, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80007a2:	43f3      	mvns	r3, r6
 80007a4:	4666      	mov	r6, ip
 80007a6:	401e      	ands	r6, r3
 80007a8:	6086      	str	r6, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80007aa:	68c6      	ldr	r6, [r0, #12]
 80007ac:	401e      	ands	r6, r3
 80007ae:	60c6      	str	r6, [r0, #12]
      m4 = 15 << ((bit & 7) * 4);
 80007b0:	260f      	movs	r6, #15
 80007b2:	40a6      	lsls	r6, r4
 80007b4:	43f4      	mvns	r4, r6
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80007b6:	464e      	mov	r6, r9
 80007b8:	2e02      	cmp	r6, #2
 80007ba:	d1ce      	bne.n	800075a <_pal_lld_setgroupmode+0x2a>
        if (bit < 8)
 80007bc:	2f07      	cmp	r7, #7
 80007be:	d818      	bhi.n	80007f2 <_pal_lld_setgroupmode+0xc2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80007c0:	6a06      	ldr	r6, [r0, #32]
 80007c2:	4034      	ands	r4, r6
 80007c4:	9e01      	ldr	r6, [sp, #4]
 80007c6:	4326      	orrs	r6, r4
 80007c8:	6206      	str	r6, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 80007ca:	6804      	ldr	r4, [r0, #0]
    mask >>= 1;
 80007cc:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 80007ce:	4023      	ands	r3, r4
 80007d0:	432b      	orrs	r3, r5
 80007d2:	6003      	str	r3, [r0, #0]
    if (!mask)
 80007d4:	2900      	cmp	r1, #0
 80007d6:	d1cd      	bne.n	8000774 <_pal_lld_setgroupmode+0x44>
  }
}
 80007d8:	b003      	add	sp, #12
 80007da:	bc3c      	pop	{r2, r3, r4, r5}
 80007dc:	4690      	mov	r8, r2
 80007de:	4699      	mov	r9, r3
 80007e0:	46a2      	mov	sl, r4
 80007e2:	46ab      	mov	fp, r5
 80007e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80007e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007e8:	9e01      	ldr	r6, [sp, #4]
 80007ea:	401c      	ands	r4, r3
 80007ec:	4326      	orrs	r6, r4
 80007ee:	6246      	str	r6, [r0, #36]	; 0x24
 80007f0:	e7be      	b.n	8000770 <_pal_lld_setgroupmode+0x40>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80007f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80007f4:	4034      	ands	r4, r6
 80007f6:	9e01      	ldr	r6, [sp, #4]
 80007f8:	4326      	orrs	r6, r4
 80007fa:	6246      	str	r6, [r0, #36]	; 0x24
 80007fc:	e7e5      	b.n	80007ca <_pal_lld_setgroupmode+0x9a>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8000800:	2000      	movs	r0, #0
 8000802:	4770      	bx	lr
	...

08000810 <dmaStreamAllocate.constprop.23>:
 * @retval false        no error, stream taken.
 * @retval true         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8000810:	b5f0      	push	{r4, r5, r6, r7, lr}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma.streams_mask & (1U << dmastp->selfindex)) != 0U)
 8000812:	2401      	movs	r4, #1
 8000814:	0026      	movs	r6, r4
 8000816:	7c42      	ldrb	r2, [r0, #17]
 8000818:	4d12      	ldr	r5, [pc, #72]	; (8000864 <dmaStreamAllocate.constprop.23+0x54>)
 800081a:	4096      	lsls	r6, r2
 800081c:	0037      	movs	r7, r6
 800081e:	682b      	ldr	r3, [r5, #0]
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8000820:	0001      	movs	r1, r0
  if ((dma.streams_mask & (1U << dmastp->selfindex)) != 0U)
 8000822:	401f      	ands	r7, r3
    return true;
 8000824:	2001      	movs	r0, #1
  if ((dma.streams_mask & (1U << dmastp->selfindex)) != 0U)
 8000826:	2f00      	cmp	r7, #0
 8000828:	d115      	bne.n	8000856 <dmaStreamAllocate.constprop.23+0x46>

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800082a:	480f      	ldr	r0, [pc, #60]	; (8000868 <dmaStreamAllocate.constprop.23+0x58>)
 800082c:	00d2      	lsls	r2, r2, #3
 800082e:	5017      	str	r7, [r2, r0]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8000830:	1882      	adds	r2, r0, r2
 8000832:	480e      	ldr	r0, [pc, #56]	; (800086c <dmaStreamAllocate.constprop.23+0x5c>)
 8000834:	6050      	str	r0, [r2, #4]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8000836:	06da      	lsls	r2, r3, #27
 8000838:	d00e      	beq.n	8000858 <dmaStreamAllocate.constprop.23+0x48>
    rccEnableDMA2(true);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800083a:	240f      	movs	r4, #15
 800083c:	684a      	ldr	r2, [r1, #4]
    }
    dma.isr_mask |= (1U << dmastp->selfindex);
  }

  /* Marks the stream as allocated.*/
  dma.streams_mask |= (1U << dmastp->selfindex);
 800083e:	4333      	orrs	r3, r6
  dmaStreamDisable(dmastp);
 8000840:	6810      	ldr	r0, [r2, #0]
 8000842:	43a0      	bics	r0, r4
 8000844:	6010      	str	r0, [r2, #0]
 8000846:	7c0c      	ldrb	r4, [r1, #16]
 8000848:	6808      	ldr	r0, [r1, #0]
 800084a:	210e      	movs	r1, #14
 800084c:	40a1      	lsls	r1, r4
 800084e:	6041      	str	r1, [r0, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8000850:	2000      	movs	r0, #0
  dma.streams_mask |= (1U << dmastp->selfindex);
 8000852:	602b      	str	r3, [r5, #0]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8000854:	6010      	str	r0, [r2, #0]

  return false;
}
 8000856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rccEnableDMA1(true);
 8000858:	4a05      	ldr	r2, [pc, #20]	; (8000870 <dmaStreamAllocate.constprop.23+0x60>)
 800085a:	6950      	ldr	r0, [r2, #20]
 800085c:	4304      	orrs	r4, r0
 800085e:	6154      	str	r4, [r2, #20]
 8000860:	e7eb      	b.n	800083a <dmaStreamAllocate.constprop.23+0x2a>
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	20000674 	.word	0x20000674
 8000868:	20000494 	.word	0x20000494
 800086c:	20000400 	.word	0x20000400
 8000870:	40021000 	.word	0x40021000
	...

08000880 <chprintf.constprop.7>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8000880:	b40e      	push	{r1, r2, r3}
 8000882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000884:	4657      	mov	r7, sl
 8000886:	464e      	mov	r6, r9
 8000888:	46de      	mov	lr, fp
 800088a:	4645      	mov	r5, r8
 800088c:	b5e0      	push	{r5, r6, r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8000890:	ab14      	add	r3, sp, #80	; 0x50
 8000892:	4699      	mov	r9, r3
  int n = 0;
 8000894:	2700      	movs	r7, #0
  va_start(ap, fmt);
 8000896:	9306      	str	r3, [sp, #24]
    c = *fmt++;
 8000898:	2357      	movs	r3, #87	; 0x57
 800089a:	46ba      	mov	sl, r7
 800089c:	4dcb      	ldr	r5, [pc, #812]	; (8000bcc <chprintf.constprop.7+0x34c>)
 800089e:	4ecc      	ldr	r6, [pc, #816]	; (8000bd0 <chprintf.constprop.7+0x350>)
 80008a0:	001f      	movs	r7, r3
 80008a2:	46cb      	mov	fp, r9
 80008a4:	e001      	b.n	80008aa <chprintf.constprop.7+0x2a>
    if (c != '%') {
 80008a6:	2f25      	cmp	r7, #37	; 0x25
 80008a8:	d01a      	beq.n	80008e0 <chprintf.constprop.7+0x60>
      streamPut(chp, (uint8_t)c);
 80008aa:	6833      	ldr	r3, [r6, #0]
 80008ac:	0039      	movs	r1, r7
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	0030      	movs	r0, r6
 80008b2:	4798      	blx	r3
      n++;
 80008b4:	2301      	movs	r3, #1
 80008b6:	469c      	mov	ip, r3
 80008b8:	002b      	movs	r3, r5
 80008ba:	46a8      	mov	r8, r5
 80008bc:	3301      	adds	r3, #1
 80008be:	782f      	ldrb	r7, [r5, #0]
 80008c0:	44e2      	add	sl, ip
 80008c2:	9300      	str	r3, [sp, #0]
    c = *fmt++;
 80008c4:	9d00      	ldr	r5, [sp, #0]
    if (c == 0)
 80008c6:	2f00      	cmp	r7, #0
 80008c8:	d1ed      	bne.n	80008a6 <chprintf.constprop.7+0x26>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80008ca:	4650      	mov	r0, sl
 80008cc:	b00a      	add	sp, #40	; 0x28
 80008ce:	bc3c      	pop	{r2, r3, r4, r5}
 80008d0:	4690      	mov	r8, r2
 80008d2:	4699      	mov	r9, r3
 80008d4:	46a2      	mov	sl, r4
 80008d6:	46ab      	mov	fp, r5
 80008d8:	bcf0      	pop	{r4, r5, r6, r7}
 80008da:	bc08      	pop	{r3}
 80008dc:	b003      	add	sp, #12
 80008de:	4718      	bx	r3
    if (*fmt == '-') {
 80008e0:	4643      	mov	r3, r8
    left_align = FALSE;
 80008e2:	2200      	movs	r2, #0
    if (*fmt == '-') {
 80008e4:	785b      	ldrb	r3, [r3, #1]
    left_align = FALSE;
 80008e6:	9203      	str	r2, [sp, #12]
    if (*fmt == '-') {
 80008e8:	2b2d      	cmp	r3, #45	; 0x2d
 80008ea:	d104      	bne.n	80008f6 <chprintf.constprop.7+0x76>
      fmt++;
 80008ec:	4643      	mov	r3, r8
      left_align = TRUE;
 80008ee:	3201      	adds	r2, #1
      fmt++;
 80008f0:	1c9d      	adds	r5, r3, #2
 80008f2:	789b      	ldrb	r3, [r3, #2]
      left_align = TRUE;
 80008f4:	9203      	str	r2, [sp, #12]
    filler = ' ';
 80008f6:	2220      	movs	r2, #32
 80008f8:	9201      	str	r2, [sp, #4]
    if (*fmt == '0') {
 80008fa:	2b30      	cmp	r3, #48	; 0x30
 80008fc:	d103      	bne.n	8000906 <chprintf.constprop.7+0x86>
      filler = '0';
 80008fe:	3210      	adds	r2, #16
 8000900:	786b      	ldrb	r3, [r5, #1]
 8000902:	9201      	str	r2, [sp, #4]
      fmt++;
 8000904:	3501      	adds	r5, #1
    width = 0;
 8000906:	2400      	movs	r4, #0
 8000908:	4658      	mov	r0, fp
 800090a:	0021      	movs	r1, r4
 800090c:	e006      	b.n	800091c <chprintf.constprop.7+0x9c>
        c = va_arg(ap, int);
 800090e:	7802      	ldrb	r2, [r0, #0]
 8000910:	3004      	adds	r0, #4
      width = width * 10 + c;
 8000912:	008c      	lsls	r4, r1, #2
 8000914:	1864      	adds	r4, r4, r1
 8000916:	0064      	lsls	r4, r4, #1
 8000918:	782b      	ldrb	r3, [r5, #0]
 800091a:	1911      	adds	r1, r2, r4
      if (c >= '0' && c <= '9')
 800091c:	001a      	movs	r2, r3
 800091e:	3a30      	subs	r2, #48	; 0x30
 8000920:	b2d2      	uxtb	r2, r2
      c = *fmt++;
 8000922:	3501      	adds	r5, #1
      if (c >= '0' && c <= '9')
 8000924:	2a09      	cmp	r2, #9
 8000926:	d9f4      	bls.n	8000912 <chprintf.constprop.7+0x92>
      else if (c == '*')
 8000928:	2b2a      	cmp	r3, #42	; 0x2a
 800092a:	d0f0      	beq.n	800090e <chprintf.constprop.7+0x8e>
 800092c:	4683      	mov	fp, r0
 800092e:	000c      	movs	r4, r1
    precision = 0;
 8000930:	2200      	movs	r2, #0
    if (c == '.') {
 8000932:	2b2e      	cmp	r3, #46	; 0x2e
 8000934:	d100      	bne.n	8000938 <chprintf.constprop.7+0xb8>
 8000936:	e0dc      	b.n	8000af2 <chprintf.constprop.7+0x272>
 8000938:	1c69      	adds	r1, r5, #1
 800093a:	9100      	str	r1, [sp, #0]
    if (c == 'l' || c == 'L') {
 800093c:	0018      	movs	r0, r3
 800093e:	2120      	movs	r1, #32
 8000940:	782f      	ldrb	r7, [r5, #0]
 8000942:	4388      	bics	r0, r1
 8000944:	284c      	cmp	r0, #76	; 0x4c
 8000946:	d00d      	beq.n	8000964 <chprintf.constprop.7+0xe4>
      is_long = (c >= 'A') && (c <= 'Z');
 8000948:	0018      	movs	r0, r3
 800094a:	3841      	subs	r0, #65	; 0x41
 800094c:	b2c1      	uxtb	r1, r0
 800094e:	4688      	mov	r8, r1
    switch (c) {
 8000950:	0019      	movs	r1, r3
 8000952:	3944      	subs	r1, #68	; 0x44
 8000954:	b2c9      	uxtb	r1, r1
 8000956:	2934      	cmp	r1, #52	; 0x34
 8000958:	d900      	bls.n	800095c <chprintf.constprop.7+0xdc>
 800095a:	e0bc      	b.n	8000ad6 <chprintf.constprop.7+0x256>
 800095c:	489d      	ldr	r0, [pc, #628]	; (8000bd4 <chprintf.constprop.7+0x354>)
 800095e:	0089      	lsls	r1, r1, #2
 8000960:	5841      	ldr	r1, [r0, r1]
 8000962:	468f      	mov	pc, r1
      if (*fmt)
 8000964:	2f00      	cmp	r7, #0
 8000966:	d109      	bne.n	800097c <chprintf.constprop.7+0xfc>
    switch (c) {
 8000968:	0019      	movs	r1, r3
 800096a:	3944      	subs	r1, #68	; 0x44
 800096c:	b2c9      	uxtb	r1, r1
 800096e:	2934      	cmp	r1, #52	; 0x34
 8000970:	d900      	bls.n	8000974 <chprintf.constprop.7+0xf4>
 8000972:	e0b0      	b.n	8000ad6 <chprintf.constprop.7+0x256>
 8000974:	4898      	ldr	r0, [pc, #608]	; (8000bd8 <chprintf.constprop.7+0x358>)
 8000976:	0089      	lsls	r1, r1, #2
 8000978:	5841      	ldr	r1, [r0, r1]
 800097a:	468f      	mov	pc, r1
      if (*fmt)
 800097c:	003b      	movs	r3, r7
 800097e:	786f      	ldrb	r7, [r5, #1]
        c = *fmt++;
 8000980:	9d00      	ldr	r5, [sp, #0]
 8000982:	1c69      	adds	r1, r5, #1
 8000984:	9100      	str	r1, [sp, #0]
 8000986:	e7ef      	b.n	8000968 <chprintf.constprop.7+0xe8>
    switch (c) {
 8000988:	2310      	movs	r3, #16
 800098a:	46a8      	mov	r8, r5
 800098c:	4699      	mov	r9, r3
 800098e:	465b      	mov	r3, fp
 8000990:	cb01      	ldmia	r3!, {r0}
  q = p + MAX_FILLER;
 8000992:	aa06      	add	r2, sp, #24
 8000994:	469b      	mov	fp, r3
 8000996:	4694      	mov	ip, r2
 8000998:	230f      	movs	r3, #15
 800099a:	4463      	add	r3, ip
 800099c:	001d      	movs	r5, r3
 800099e:	464b      	mov	r3, r9
 80009a0:	46a1      	mov	r9, r4
 80009a2:	001c      	movs	r4, r3
 80009a4:	0021      	movs	r1, r4
 80009a6:	f7ff fc9d 	bl	80002e4 <__aeabi_uidivmod>
    i += '0';
 80009aa:	000b      	movs	r3, r1
 80009ac:	3330      	adds	r3, #48	; 0x30
    if (i > '9')
 80009ae:	2b39      	cmp	r3, #57	; 0x39
 80009b0:	dd00      	ble.n	80009b4 <chprintf.constprop.7+0x134>
      i += 'A' - '0' - 10;
 80009b2:	3307      	adds	r3, #7
    *--q = i;
 80009b4:	3d01      	subs	r5, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	702b      	strb	r3, [r5, #0]
  } while ((ll /= radix) != 0);
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1f2      	bne.n	80009a4 <chprintf.constprop.7+0x124>
  i = (int)(p + MAX_FILLER - q);
 80009be:	a906      	add	r1, sp, #24
 80009c0:	468c      	mov	ip, r1
 80009c2:	220f      	movs	r2, #15
 80009c4:	4462      	add	r2, ip
 80009c6:	1b51      	subs	r1, r2, r5
 80009c8:	464c      	mov	r4, r9
 80009ca:	2200      	movs	r2, #0
 80009cc:	e000      	b.n	80009d0 <chprintf.constprop.7+0x150>
 80009ce:	5cab      	ldrb	r3, [r5, r2]
    *p++ = *q++;
 80009d0:	a807      	add	r0, sp, #28
 80009d2:	5483      	strb	r3, [r0, r2]
 80009d4:	3201      	adds	r2, #1
  while (--i);
 80009d6:	428a      	cmp	r2, r1
 80009d8:	d1f9      	bne.n	80009ce <chprintf.constprop.7+0x14e>
    s = tmpbuf;
 80009da:	4681      	mov	r9, r0
 80009dc:	1e53      	subs	r3, r2, #1
 80009de:	1aa4      	subs	r4, r4, r2
 80009e0:	9302      	str	r3, [sp, #8]
    if ((width -= i) < 0)
 80009e2:	2c00      	cmp	r4, #0
 80009e4:	db15      	blt.n	8000a12 <chprintf.constprop.7+0x192>
    if (left_align == FALSE)
 80009e6:	9b03      	ldr	r3, [sp, #12]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d17e      	bne.n	8000aea <chprintf.constprop.7+0x26a>
      width = -width;
 80009ec:	4265      	negs	r5, r4
    if (width < 0) {
 80009ee:	2c00      	cmp	r4, #0
 80009f0:	d07a      	beq.n	8000ae8 <chprintf.constprop.7+0x268>
      if (*s == '-' && filler == '0') {
 80009f2:	464a      	mov	r2, r9
 80009f4:	6833      	ldr	r3, [r6, #0]
 80009f6:	7812      	ldrb	r2, [r2, #0]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	2a2d      	cmp	r2, #45	; 0x2d
 80009fc:	d102      	bne.n	8000a04 <chprintf.constprop.7+0x184>
 80009fe:	e0f8      	b.n	8000bf2 <chprintf.constprop.7+0x372>
 8000a00:	6833      	ldr	r3, [r6, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
        streamPut(chp, (uint8_t)filler);
 8000a04:	9901      	ldr	r1, [sp, #4]
 8000a06:	0030      	movs	r0, r6
      } while (++width != 0);
 8000a08:	3501      	adds	r5, #1
        streamPut(chp, (uint8_t)filler);
 8000a0a:	4798      	blx	r3
      } while (++width != 0);
 8000a0c:	2d00      	cmp	r5, #0
 8000a0e:	d1f7      	bne.n	8000a00 <chprintf.constprop.7+0x180>
 8000a10:	44a2      	add	sl, r4
    while (--i >= 0) {
 8000a12:	9b02      	ldr	r3, [sp, #8]
 8000a14:	2400      	movs	r4, #0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	da00      	bge.n	8000a1c <chprintf.constprop.7+0x19c>
 8000a1a:	e753      	b.n	80008c4 <chprintf.constprop.7+0x44>
      width = -width;
 8000a1c:	0023      	movs	r3, r4
 8000a1e:	9d02      	ldr	r5, [sp, #8]
 8000a20:	002c      	movs	r4, r5
 8000a22:	464d      	mov	r5, r9
 8000a24:	4699      	mov	r9, r3
      streamPut(chp, (uint8_t)*s++);
 8000a26:	6833      	ldr	r3, [r6, #0]
 8000a28:	7829      	ldrb	r1, [r5, #0]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0030      	movs	r0, r6
 8000a2e:	4798      	blx	r3
 8000a30:	3501      	adds	r5, #1
    while (--i >= 0) {
 8000a32:	3c01      	subs	r4, #1
 8000a34:	d2f7      	bcs.n	8000a26 <chprintf.constprop.7+0x1a6>
 8000a36:	9a02      	ldr	r2, [sp, #8]
 8000a38:	4653      	mov	r3, sl
 8000a3a:	4692      	mov	sl, r2
 8000a3c:	464c      	mov	r4, r9
 8000a3e:	3301      	adds	r3, #1
 8000a40:	449a      	add	sl, r3
    while (width) {
 8000a42:	2c00      	cmp	r4, #0
 8000a44:	d100      	bne.n	8000a48 <chprintf.constprop.7+0x1c8>
 8000a46:	e73d      	b.n	80008c4 <chprintf.constprop.7+0x44>
 8000a48:	0025      	movs	r5, r4
 8000a4a:	46a1      	mov	r9, r4
 8000a4c:	9c01      	ldr	r4, [sp, #4]
      streamPut(chp, (uint8_t)filler);
 8000a4e:	6833      	ldr	r3, [r6, #0]
 8000a50:	0021      	movs	r1, r4
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0030      	movs	r0, r6
      width--;
 8000a56:	3d01      	subs	r5, #1
      streamPut(chp, (uint8_t)filler);
 8000a58:	4798      	blx	r3
    while (width) {
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d1f7      	bne.n	8000a4e <chprintf.constprop.7+0x1ce>
 8000a5e:	44ca      	add	sl, r9
 8000a60:	e730      	b.n	80008c4 <chprintf.constprop.7+0x44>
      *p++ = va_arg(ap, int);
 8000a62:	465b      	mov	r3, fp
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	aa06      	add	r2, sp, #24
 8000a68:	7113      	strb	r3, [r2, #4]
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	469c      	mov	ip, r3
 8000a6e:	2300      	movs	r3, #0
 8000a70:	9302      	str	r3, [sp, #8]
      filler = ' ';
 8000a72:	3320      	adds	r3, #32
 8000a74:	9301      	str	r3, [sp, #4]
    s = tmpbuf;
 8000a76:	ab07      	add	r3, sp, #28
 8000a78:	3c01      	subs	r4, #1
      *p++ = va_arg(ap, int);
 8000a7a:	46a8      	mov	r8, r5
 8000a7c:	44e3      	add	fp, ip
    s = tmpbuf;
 8000a7e:	4699      	mov	r9, r3
 8000a80:	e7af      	b.n	80009e2 <chprintf.constprop.7+0x162>
      if ((s = va_arg(ap, char *)) == 0)
 8000a82:	465b      	mov	r3, fp
 8000a84:	1d19      	adds	r1, r3, #4
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4699      	mov	r9, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d100      	bne.n	8000a90 <chprintf.constprop.7+0x210>
 8000a8e:	e095      	b.n	8000bbc <chprintf.constprop.7+0x33c>
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	46cc      	mov	ip, r9
      if (precision == 0)
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	d000      	beq.n	8000a9a <chprintf.constprop.7+0x21a>
 8000a98:	e0ba      	b.n	8000c10 <chprintf.constprop.7+0x390>
      for (p = s; *p && (--precision >= 0); p++)
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d100      	bne.n	8000aa0 <chprintf.constprop.7+0x220>
 8000a9e:	e0a1      	b.n	8000be4 <chprintf.constprop.7+0x364>
 8000aa0:	4a4e      	ldr	r2, [pc, #312]	; (8000bdc <chprintf.constprop.7+0x35c>)
 8000aa2:	464b      	mov	r3, r9
 8000aa4:	e001      	b.n	8000aaa <chprintf.constprop.7+0x22a>
 8000aa6:	3a01      	subs	r2, #1
 8000aa8:	d403      	bmi.n	8000ab2 <chprintf.constprop.7+0x232>
 8000aaa:	3301      	adds	r3, #1
 8000aac:	7818      	ldrb	r0, [r3, #0]
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d1f9      	bne.n	8000aa6 <chprintf.constprop.7+0x226>
 8000ab2:	4662      	mov	r2, ip
 8000ab4:	1a9b      	subs	r3, r3, r2
 8000ab6:	1ae4      	subs	r4, r4, r3
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	9302      	str	r3, [sp, #8]
      filler = ' ';
 8000abc:	2320      	movs	r3, #32
      for (p = s; *p && (--precision >= 0); p++)
 8000abe:	46a8      	mov	r8, r5
      if ((s = va_arg(ap, char *)) == 0)
 8000ac0:	468b      	mov	fp, r1
      filler = ' ';
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	e78d      	b.n	80009e2 <chprintf.constprop.7+0x162>
    case 'U':
 8000ac6:	230a      	movs	r3, #10
 8000ac8:	46a8      	mov	r8, r5
 8000aca:	4699      	mov	r9, r3
 8000acc:	e75f      	b.n	800098e <chprintf.constprop.7+0x10e>
    case 'O':
 8000ace:	2308      	movs	r3, #8
 8000ad0:	46a8      	mov	r8, r5
 8000ad2:	4699      	mov	r9, r3
 8000ad4:	e75b      	b.n	800098e <chprintf.constprop.7+0x10e>
      *p++ = c;
 8000ad6:	aa06      	add	r2, sp, #24
 8000ad8:	7113      	strb	r3, [r2, #4]
 8000ada:	2300      	movs	r3, #0
 8000adc:	9302      	str	r3, [sp, #8]
    s = tmpbuf;
 8000ade:	ab07      	add	r3, sp, #28
 8000ae0:	3c01      	subs	r4, #1
      *p++ = c;
 8000ae2:	46a8      	mov	r8, r5
    s = tmpbuf;
 8000ae4:	4699      	mov	r9, r3
 8000ae6:	e77c      	b.n	80009e2 <chprintf.constprop.7+0x162>
      width = -width;
 8000ae8:	002c      	movs	r4, r5
    while (--i >= 0) {
 8000aea:	9b02      	ldr	r3, [sp, #8]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	da95      	bge.n	8000a1c <chprintf.constprop.7+0x19c>
 8000af0:	e7a7      	b.n	8000a42 <chprintf.constprop.7+0x1c2>
 8000af2:	0017      	movs	r7, r2
 8000af4:	468c      	mov	ip, r1
 8000af6:	0004      	movs	r4, r0
 8000af8:	e006      	b.n	8000b08 <chprintf.constprop.7+0x288>
          c = va_arg(ap, int);
 8000afa:	7820      	ldrb	r0, [r4, #0]
 8000afc:	3404      	adds	r4, #4
        c = *fmt++;
 8000afe:	000d      	movs	r5, r1
        precision *= 10;
 8000b00:	00ba      	lsls	r2, r7, #2
 8000b02:	19d2      	adds	r2, r2, r7
 8000b04:	0052      	lsls	r2, r2, #1
        precision += c;
 8000b06:	1887      	adds	r7, r0, r2
        c = *fmt++;
 8000b08:	782b      	ldrb	r3, [r5, #0]
 8000b0a:	1c69      	adds	r1, r5, #1
        if (c >= '0' && c <= '9')
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	3830      	subs	r0, #48	; 0x30
 8000b10:	b2c0      	uxtb	r0, r0
 8000b12:	2809      	cmp	r0, #9
 8000b14:	d9f3      	bls.n	8000afe <chprintf.constprop.7+0x27e>
        else if (c == '*')
 8000b16:	2b2a      	cmp	r3, #42	; 0x2a
 8000b18:	d0ef      	beq.n	8000afa <chprintf.constprop.7+0x27a>
 8000b1a:	46a3      	mov	fp, r4
 8000b1c:	003a      	movs	r2, r7
 8000b1e:	4664      	mov	r4, ip
        c = *fmt++;
 8000b20:	000d      	movs	r5, r1
 8000b22:	e709      	b.n	8000938 <chprintf.constprop.7+0xb8>
 8000b24:	465b      	mov	r3, fp
 8000b26:	cb04      	ldmia	r3!, {r2}
 8000b28:	4691      	mov	r9, r2
      if (is_long)
 8000b2a:	4642      	mov	r2, r8
 8000b2c:	2a19      	cmp	r2, #25
 8000b2e:	d93f      	bls.n	8000bb0 <chprintf.constprop.7+0x330>
 8000b30:	46a8      	mov	r8, r5
        l = va_arg(ap, int);
 8000b32:	469b      	mov	fp, r3
    p = tmpbuf;
 8000b34:	ab07      	add	r3, sp, #28
 8000b36:	9302      	str	r3, [sp, #8]
      if (l < 0) {
 8000b38:	464b      	mov	r3, r9
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	da09      	bge.n	8000b52 <chprintf.constprop.7+0x2d2>
        *p++ = '-';
 8000b3e:	232d      	movs	r3, #45	; 0x2d
 8000b40:	aa06      	add	r2, sp, #24
 8000b42:	7113      	strb	r3, [r2, #4]
        l = -l;
 8000b44:	464b      	mov	r3, r9
 8000b46:	425b      	negs	r3, r3
 8000b48:	4699      	mov	r9, r3
        *p++ = '-';
 8000b4a:	4694      	mov	ip, r2
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	4463      	add	r3, ip
 8000b50:	9302      	str	r3, [sp, #8]
  q = p + MAX_FILLER;
 8000b52:	9b02      	ldr	r3, [sp, #8]
 8000b54:	9705      	str	r7, [sp, #20]
 8000b56:	330b      	adds	r3, #11
 8000b58:	464f      	mov	r7, r9
 8000b5a:	46a1      	mov	r9, r4
 8000b5c:	001c      	movs	r4, r3
 8000b5e:	9304      	str	r3, [sp, #16]
    i = (int)(l % radix);
 8000b60:	0038      	movs	r0, r7
 8000b62:	210a      	movs	r1, #10
 8000b64:	f7ff fbbe 	bl	80002e4 <__aeabi_uidivmod>
    i += '0';
 8000b68:	3130      	adds	r1, #48	; 0x30
    *--q = i;
 8000b6a:	b2cd      	uxtb	r5, r1
 8000b6c:	3c01      	subs	r4, #1
    l /= radix;
 8000b6e:	0038      	movs	r0, r7
    *--q = i;
 8000b70:	7025      	strb	r5, [r4, #0]
    l /= radix;
 8000b72:	210a      	movs	r1, #10
 8000b74:	f7ff fb30 	bl	80001d8 <__udivsi3>
 8000b78:	1e07      	subs	r7, r0, #0
  } while ((ll /= radix) != 0);
 8000b7a:	d1f1      	bne.n	8000b60 <chprintf.constprop.7+0x2e0>
 8000b7c:	0020      	movs	r0, r4
  i = (int)(p + MAX_FILLER - q);
 8000b7e:	9b04      	ldr	r3, [sp, #16]
 8000b80:	9f05      	ldr	r7, [sp, #20]
 8000b82:	1a1a      	subs	r2, r3, r0
 8000b84:	464c      	mov	r4, r9
 8000b86:	2300      	movs	r3, #0
 8000b88:	9902      	ldr	r1, [sp, #8]
 8000b8a:	e000      	b.n	8000b8e <chprintf.constprop.7+0x30e>
 8000b8c:	5cc5      	ldrb	r5, [r0, r3]
    *p++ = *q++;
 8000b8e:	54cd      	strb	r5, [r1, r3]
 8000b90:	3301      	adds	r3, #1
  while (--i);
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d1fa      	bne.n	8000b8c <chprintf.constprop.7+0x30c>
 8000b96:	9b02      	ldr	r3, [sp, #8]
 8000b98:	469c      	mov	ip, r3
 8000b9a:	ab07      	add	r3, sp, #28
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	1ae4      	subs	r4, r4, r3
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	9302      	str	r3, [sp, #8]
    s = tmpbuf;
 8000ba6:	ab07      	add	r3, sp, #28
 8000ba8:	4699      	mov	r9, r3
 8000baa:	e71a      	b.n	80009e2 <chprintf.constprop.7+0x162>
 8000bac:	465b      	mov	r3, fp
 8000bae:	3304      	adds	r3, #4
        l = va_arg(ap, long);
 8000bb0:	465a      	mov	r2, fp
 8000bb2:	6812      	ldr	r2, [r2, #0]
 8000bb4:	46a8      	mov	r8, r5
 8000bb6:	4691      	mov	r9, r2
 8000bb8:	469b      	mov	fp, r3
 8000bba:	e7bb      	b.n	8000b34 <chprintf.constprop.7+0x2b4>
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <chprintf.constprop.7+0x360>)
 8000bbe:	469c      	mov	ip, r3
      if (precision == 0)
 8000bc0:	2a00      	cmp	r2, #0
 8000bc2:	d02e      	beq.n	8000c22 <chprintf.constprop.7+0x3a2>
 8000bc4:	4699      	mov	r9, r3
      for (p = s; *p && (--precision >= 0); p++)
 8000bc6:	3a01      	subs	r2, #1
 8000bc8:	e76b      	b.n	8000aa2 <chprintf.constprop.7+0x222>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	08002335 	.word	0x08002335
 8000bd0:	20000434 	.word	0x20000434
 8000bd4:	0800210c 	.word	0x0800210c
 8000bd8:	080021e0 	.word	0x080021e0
 8000bdc:	00007ffe 	.word	0x00007ffe
 8000be0:	08002348 	.word	0x08002348
 8000be4:	3b01      	subs	r3, #1
 8000be6:	9302      	str	r3, [sp, #8]
      filler = ' ';
 8000be8:	3321      	adds	r3, #33	; 0x21
      for (p = s; *p && (--precision >= 0); p++)
 8000bea:	46a8      	mov	r8, r5
      if ((s = va_arg(ap, char *)) == 0)
 8000bec:	468b      	mov	fp, r1
      filler = ' ';
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	e6f9      	b.n	80009e6 <chprintf.constprop.7+0x166>
      if (*s == '-' && filler == '0') {
 8000bf2:	9a01      	ldr	r2, [sp, #4]
 8000bf4:	2a30      	cmp	r2, #48	; 0x30
 8000bf6:	d000      	beq.n	8000bfa <chprintf.constprop.7+0x37a>
 8000bf8:	e704      	b.n	8000a04 <chprintf.constprop.7+0x184>
 8000bfa:	3a2f      	subs	r2, #47	; 0x2f
 8000bfc:	4694      	mov	ip, r2
        streamPut(chp, (uint8_t)*s++);
 8000bfe:	212d      	movs	r1, #45	; 0x2d
 8000c00:	0030      	movs	r0, r6
 8000c02:	44e2      	add	sl, ip
 8000c04:	44e1      	add	r9, ip
 8000c06:	4798      	blx	r3
 8000c08:	9b02      	ldr	r3, [sp, #8]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	9302      	str	r3, [sp, #8]
 8000c0e:	e6f7      	b.n	8000a00 <chprintf.constprop.7+0x180>
      for (p = s; *p && (--precision >= 0); p++)
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1d8      	bne.n	8000bc6 <chprintf.constprop.7+0x346>
 8000c14:	3b01      	subs	r3, #1
 8000c16:	9302      	str	r3, [sp, #8]
      filler = ' ';
 8000c18:	3321      	adds	r3, #33	; 0x21
      for (p = s; *p && (--precision >= 0); p++)
 8000c1a:	46a8      	mov	r8, r5
      if ((s = va_arg(ap, char *)) == 0)
 8000c1c:	468b      	mov	fp, r1
      filler = ' ';
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	e6df      	b.n	80009e2 <chprintf.constprop.7+0x162>
      if (precision == 0)
 8000c22:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <chprintf.constprop.7+0x3ac>)
      for (p = s; *p && (--precision >= 0); p++)
 8000c24:	4a02      	ldr	r2, [pc, #8]	; (8000c30 <chprintf.constprop.7+0x3b0>)
      if (precision == 0)
 8000c26:	4699      	mov	r9, r3
 8000c28:	e73b      	b.n	8000aa2 <chprintf.constprop.7+0x222>
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	08002348 	.word	0x08002348
 8000c30:	00007ffe 	.word	0x00007ffe
	...

08000c40 <chSchWakeupS.constprop.6>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000c40:	b570      	push	{r4, r5, r6, lr}
  ntp->u.rdymsg = msg;
 8000c42:	2500      	movs	r5, #0
  thread_t *otp = currp;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <chSchWakeupS.constprop.6+0x50>)
  if (ntp->prio <= otp->prio) {
 8000c46:	6882      	ldr	r2, [r0, #8]
  thread_t *otp = currp;
 8000c48:	6999      	ldr	r1, [r3, #24]
  ntp->u.rdymsg = msg;
 8000c4a:	6245      	str	r5, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8000c4c:	688c      	ldr	r4, [r1, #8]
 8000c4e:	42a2      	cmp	r2, r4
 8000c50:	d80b      	bhi.n	8000c6a <chSchWakeupS.constprop.6+0x2a>
  tp->state = CH_STATE_READY;
 8000c52:	2120      	movs	r1, #32
 8000c54:	5445      	strb	r5, [r0, r1]
    cp = cp->queue.next;
 8000c56:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000c58:	6899      	ldr	r1, [r3, #8]
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	d9fb      	bls.n	8000c56 <chSchWakeupS.constprop.6+0x16>
  tp->queue.prev             = cp->queue.prev;
 8000c5e:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8000c60:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8000c62:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8000c64:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000c66:	6058      	str	r0, [r3, #4]
}
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
  tp->state = CH_STATE_READY;
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	548d      	strb	r5, [r1, r2]
  cp = (thread_t *)&ch.rlist.queue;
 8000c6e:	001a      	movs	r2, r3
    cp = cp->queue.next;
 8000c70:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8000c72:	6895      	ldr	r5, [r2, #8]
 8000c74:	42ac      	cmp	r4, r5
 8000c76:	d9fb      	bls.n	8000c70 <chSchWakeupS.constprop.6+0x30>
  tp->queue.prev             = cp->queue.prev;
 8000c78:	6854      	ldr	r4, [r2, #4]
  tp->queue.next             = cp;
 8000c7a:	600a      	str	r2, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8000c7c:	604c      	str	r4, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8000c7e:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 8000c80:	6051      	str	r1, [r2, #4]
    currp = ntp;
 8000c82:	6198      	str	r0, [r3, #24]
    ntp->state = CH_STATE_CURRENT;
 8000c84:	2201      	movs	r2, #1
 8000c86:	2320      	movs	r3, #32
 8000c88:	54c2      	strb	r2, [r0, r3]
    chSysSwitch(ntp, otp);
 8000c8a:	f7ff fa85 	bl	8000198 <_port_switch>
 8000c8e:	e7eb      	b.n	8000c68 <chSchWakeupS.constprop.6+0x28>
 8000c90:	200004bc 	.word	0x200004bc
	...

08000ca0 <chSchGoSleepS>:
  otp->state = newstate;
 8000ca0:	2220      	movs	r2, #32
  thread_t *otp = currp;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <chSchGoSleepS+0x20>)
void chSchGoSleepS(tstate_t newstate) {
 8000ca4:	b510      	push	{r4, lr}
  thread_t *otp = currp;
 8000ca6:	6999      	ldr	r1, [r3, #24]
  otp->state = newstate;
 8000ca8:	5488      	strb	r0, [r1, r2]
  thread_t *tp = tqp->next;
 8000caa:	6818      	ldr	r0, [r3, #0]
  tqp->next             = tp->queue.next;
 8000cac:	6804      	ldr	r4, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000cae:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
 8000cb0:	601c      	str	r4, [r3, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000cb2:	6198      	str	r0, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	5483      	strb	r3, [r0, r2]
  chSysSwitch(currp, otp);
 8000cb8:	f7ff fa6e 	bl	8000198 <_port_switch>
}
 8000cbc:	bd10      	pop	{r4, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	200004bc 	.word	0x200004bc
	...

08000cd0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd2:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8000cd4:	1c4b      	adds	r3, r1, #1
 8000cd6:	d05e      	beq.n	8000d96 <chSchGoSleepTimeoutS+0xc6>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000cd8:	4c42      	ldr	r4, [pc, #264]	; (8000de4 <chSchGoSleepTimeoutS+0x114>)
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 8000cda:	ad01      	add	r5, sp, #4
 8000cdc:	69a3      	ldr	r3, [r4, #24]
 8000cde:	612b      	str	r3, [r5, #16]
  vtp->func = vtfunc;
 8000ce0:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <chSchGoSleepTimeoutS+0x118>)
 8000ce2:	60eb      	str	r3, [r5, #12]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	05db      	lsls	r3, r3, #23
 8000ce8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8000cea:	2902      	cmp	r1, #2
 8000cec:	d337      	bcc.n	8000d5e <chSchGoSleepTimeoutS+0x8e>
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000cee:	0022      	movs	r2, r4
 8000cf0:	69e3      	ldr	r3, [r4, #28]
 8000cf2:	321c      	adds	r2, #28
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d038      	beq.n	8000d6a <chSchGoSleepTimeoutS+0x9a>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8000cf8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000cfa:	689a      	ldr	r2, [r3, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000cfc:	1bf6      	subs	r6, r6, r7
 8000cfe:	1871      	adds	r1, r6, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8000d00:	428e      	cmp	r6, r1
 8000d02:	d941      	bls.n	8000d88 <chSchGoSleepTimeoutS+0xb8>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 8000d04:	681b      	ldr	r3, [r3, #0]
      delta -= p->delta;
 8000d06:	1a89      	subs	r1, r1, r2
 8000d08:	689a      	ldr	r2, [r3, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000d0a:	4291      	cmp	r1, r2
 8000d0c:	d8fa      	bhi.n	8000d04 <chSchGoSleepTimeoutS+0x34>
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8000d0e:	685a      	ldr	r2, [r3, #4]
  vtp->next = p;
 8000d10:	9301      	str	r3, [sp, #4]
  vtp->prev = vtp->next->prev;
 8000d12:	606a      	str	r2, [r5, #4]
  vtp->prev->next = vtp;
 8000d14:	6015      	str	r5, [r2, #0]
  p->prev = vtp;
 8000d16:	605d      	str	r5, [r3, #4]
  vtp->delta = delta;
 8000d18:	60a9      	str	r1, [r5, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	1a51      	subs	r1, r2, r1
 8000d1e:	6099      	str	r1, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	425b      	negs	r3, r3
 8000d24:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000d26:	f7ff ffbb 	bl	8000ca0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000d2a:	9b04      	ldr	r3, [sp, #16]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d012      	beq.n	8000d56 <chSchGoSleepTimeoutS+0x86>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000d30:	69e2      	ldr	r2, [r4, #28]
 8000d32:	9b01      	ldr	r3, [sp, #4]
 8000d34:	42aa      	cmp	r2, r5
 8000d36:	d032      	beq.n	8000d9e <chSchGoSleepTimeoutS+0xce>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000d38:	686a      	ldr	r2, [r5, #4]
 8000d3a:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8000d3c:	9b01      	ldr	r3, [sp, #4]
 8000d3e:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8000d40:	2200      	movs	r2, #0
 8000d42:	60ea      	str	r2, [r5, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000d44:	0022      	movs	r2, r4
 8000d46:	321c      	adds	r2, #28
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d004      	beq.n	8000d56 <chSchGoSleepTimeoutS+0x86>
      vtp->next->delta += vtp->delta;
 8000d4c:	6899      	ldr	r1, [r3, #8]
 8000d4e:	68aa      	ldr	r2, [r5, #8]
 8000d50:	468c      	mov	ip, r1
 8000d52:	4462      	add	r2, ip
 8000d54:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8000d56:	69a3      	ldr	r3, [r4, #24]
 8000d58:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8000d5a:	b007      	add	sp, #28
 8000d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000d5e:	0022      	movs	r2, r4
 8000d60:	69e3      	ldr	r3, [r4, #28]
 8000d62:	321c      	adds	r2, #28
 8000d64:	2102      	movs	r1, #2
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d1c6      	bne.n	8000cf8 <chSchGoSleepTimeoutS+0x28>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8000d6a:	9301      	str	r3, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8000d6c:	606b      	str	r3, [r5, #4]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000d6e:	2380      	movs	r3, #128	; 0x80
  STM32_ST_TIM->SR     = 0;
 8000d70:	2200      	movs	r2, #0
      vtp->delta = delay;
 8000d72:	60a9      	str	r1, [r5, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000d74:	05db      	lsls	r3, r3, #23
  return systime + (systime_t)interval;
 8000d76:	1871      	adds	r1, r6, r1
      ch.vtlist.lasttime = now;
 8000d78:	62a6      	str	r6, [r4, #40]	; 0x28
      ch.vtlist.next = vtp;
 8000d7a:	61e5      	str	r5, [r4, #28]
      ch.vtlist.prev = vtp;
 8000d7c:	6225      	str	r5, [r4, #32]
 8000d7e:	6359      	str	r1, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000d80:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000d82:	3202      	adds	r2, #2
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	e7ce      	b.n	8000d26 <chSchGoSleepTimeoutS+0x56>
    else if (delta < p->delta) {
 8000d88:	4291      	cmp	r1, r2
 8000d8a:	d2be      	bcs.n	8000d0a <chSchGoSleepTimeoutS+0x3a>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000d8c:	2680      	movs	r6, #128	; 0x80
 8000d8e:	187f      	adds	r7, r7, r1
 8000d90:	05f6      	lsls	r6, r6, #23
 8000d92:	6377      	str	r7, [r6, #52]	; 0x34
 8000d94:	e7b9      	b.n	8000d0a <chSchGoSleepTimeoutS+0x3a>
    chSchGoSleepS(newstate);
 8000d96:	f7ff ff83 	bl	8000ca0 <chSchGoSleepS>
 8000d9a:	4c12      	ldr	r4, [pc, #72]	; (8000de4 <chSchGoSleepTimeoutS+0x114>)
 8000d9c:	e7db      	b.n	8000d56 <chSchGoSleepTimeoutS+0x86>
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000d9e:	0022      	movs	r2, r4
  vtp->func = NULL;
 8000da0:	2100      	movs	r1, #0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000da2:	321c      	adds	r2, #28
  ch.vtlist.next = vtp->next;
 8000da4:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000da6:	605a      	str	r2, [r3, #4]
  vtp->func = NULL;
 8000da8:	60e9      	str	r1, [r5, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d015      	beq.n	8000dda <chSchGoSleepTimeoutS+0x10a>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000dae:	6899      	ldr	r1, [r3, #8]
 8000db0:	68aa      	ldr	r2, [r5, #8]
 8000db2:	468c      	mov	ip, r1
 8000db4:	4462      	add	r2, ip
 8000db6:	609a      	str	r2, [r3, #8]
  return (systime_t)STM32_ST_TIM->CNT;
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	05db      	lsls	r3, r3, #23
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8000dbc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8000dc0:	1a5b      	subs	r3, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d9c7      	bls.n	8000d56 <chSchGoSleepTimeoutS+0x86>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8000dc6:	1ad0      	subs	r0, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8000dc8:	2801      	cmp	r0, #1
 8000dca:	d904      	bls.n	8000dd6 <chSchGoSleepTimeoutS+0x106>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000dcc:	2380      	movs	r3, #128	; 0x80
  return systime + (systime_t)interval;
 8000dce:	188a      	adds	r2, r1, r2
 8000dd0:	05db      	lsls	r3, r3, #23
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd4:	e7bf      	b.n	8000d56 <chSchGoSleepTimeoutS+0x86>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8000dd6:	1c9a      	adds	r2, r3, #2
 8000dd8:	e7f8      	b.n	8000dcc <chSchGoSleepTimeoutS+0xfc>
  STM32_ST_TIM->DIER = 0;
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	60d9      	str	r1, [r3, #12]
 8000de0:	e7b9      	b.n	8000d56 <chSchGoSleepTimeoutS+0x86>
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	200004bc 	.word	0x200004bc
 8000de8:	08000621 	.word	0x08000621
 8000dec:	00000000 	.word	0x00000000

08000df0 <i2c_lld_master_transmit_timeout.constprop.19>:
 *                      timeout the driver must be stopped and restarted
 *                      because the bus is in an uncertain state</b>.
 *
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg_t msg;
  I2C_TypeDef *dp = i2cp->i2c;
  systime_t start, end;

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 8000df2:	2300      	movs	r3, #0
  I2C_TypeDef *dp = i2cp->i2c;
 8000df4:	4c37      	ldr	r4, [pc, #220]	; (8000ed4 <i2c_lld_master_transmit_timeout.constprop.19+0xe4>)
 8000df6:	6b25      	ldr	r5, [r4, #48]	; 0x30
  i2cp->errors = I2C_NO_ERROR;
 8000df8:	60a3      	str	r3, [r4, #8]
 8000dfa:	b662      	cpsie	i
  /* Releases the lock from high level driver.*/
  osalSysUnlock();

#if STM32_I2C_USE_DMA == TRUE
  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8000dfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000dfe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	601e      	str	r6, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8000e04:	60d8      	str	r0, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8000e06:	2004      	movs	r0, #4
 8000e08:	6058      	str	r0, [r3, #4]

  /* RX DMA setup, note, rxbytes can be zero but we write the value anyway.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8000e0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e0c:	6a20      	ldr	r0, [r4, #32]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	6018      	str	r0, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8000e12:	60d9      	str	r1, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8000e14:	605a      	str	r2, [r3, #4]
  return (systime_t)STM32_ST_TIM->CNT;
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	05d2      	lsls	r2, r2, #23
 8000e1a:	6a56      	ldr	r6, [r2, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if ((dp->ISR & I2C_ISR_BUSY) == 0)
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	69ab      	ldr	r3, [r5, #24]
 8000e22:	0209      	lsls	r1, r1, #8
 8000e24:	420b      	tst	r3, r1
 8000e26:	d00f      	beq.n	8000e48 <i2c_lld_master_transmit_timeout.constprop.19+0x58>
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 8000e28:	20f4      	movs	r0, #244	; 0xf4
 8000e2a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000e2c:	30ff      	adds	r0, #255	; 0xff
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((time - start) < (end - start));
 8000e2e:	1b9b      	subs	r3, r3, r6
 8000e30:	4283      	cmp	r3, r0
 8000e32:	d904      	bls.n	8000e3e <i2c_lld_master_transmit_timeout.constprop.19+0x4e>
 8000e34:	e04a      	b.n	8000ecc <i2c_lld_master_transmit_timeout.constprop.19+0xdc>
 8000e36:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	4283      	cmp	r3, r0
 8000e3c:	d846      	bhi.n	8000ecc <i2c_lld_master_transmit_timeout.constprop.19+0xdc>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e3e:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
    if ((dp->ISR & I2C_ISR_BUSY) == 0)
 8000e42:	69ab      	ldr	r3, [r5, #24]
 8000e44:	420b      	tst	r3, r1
 8000e46:	d1f6      	bne.n	8000e36 <i2c_lld_master_transmit_timeout.constprop.19+0x46>
  if ((i2cp->config->cr2 & I2C_CR2_ADD10) == 0U)
 8000e48:	6863      	ldr	r3, [r4, #4]
 8000e4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000e4c:	689e      	ldr	r6, [r3, #8]
 8000e4e:	0533      	lsls	r3, r6, #20
 8000e50:	d52f      	bpl.n	8000eb2 <i2c_lld_master_transmit_timeout.constprop.19+0xc2>
    dp->CR2 = (uint32_t)addr;
 8000e52:	236a      	movs	r3, #106	; 0x6a
 8000e54:	6043      	str	r3, [r0, #4]
  n = i2c_lld_get_txbytes(i2cp);
 8000e56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e58:	6859      	ldr	r1, [r3, #4]
 8000e5a:	684a      	ldr	r2, [r1, #4]
  if (n > 255U) {
 8000e5c:	2aff      	cmp	r2, #255	; 0xff
 8000e5e:	d82f      	bhi.n	8000ec0 <i2c_lld_master_transmit_timeout.constprop.19+0xd0>
    reload = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	469c      	mov	ip, r3
 8000e64:	0412      	lsls	r2, r2, #16
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8000e66:	6843      	ldr	r3, [r0, #4]
 8000e68:	4f1b      	ldr	r7, [pc, #108]	; (8000ed8 <i2c_lld_master_transmit_timeout.constprop.19+0xe8>)
  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
  tp->u.wttrp = trp;
 8000e6a:	341c      	adds	r4, #28
 8000e6c:	403b      	ands	r3, r7
            (n << 16U) | reload;
 8000e6e:	4333      	orrs	r3, r6
 8000e70:	4666      	mov	r6, ip
 8000e72:	4333      	orrs	r3, r6
 8000e74:	4313      	orrs	r3, r2
  /* Preparing the transfer.*/
  i2c_lld_setup_tx_transfer(i2cp);

#if STM32_I2C_USE_DMA == TRUE
  /* Enabling TX DMA.*/
  dmaStreamEnable(i2cp->dmatx);
 8000e76:	2201      	movs	r2, #1
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8000e78:	6043      	str	r3, [r0, #4]
  dmaStreamEnable(i2cp->dmatx);
 8000e7a:	680b      	ldr	r3, [r1, #0]

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	600b      	str	r3, [r1, #0]

  /* Transfer complete interrupt enabled.*/
  dp->CR1 |= I2C_CR1_TCIE;
 8000e82:	682b      	ldr	r3, [r5, #0]
 8000e84:	323f      	adds	r2, #63	; 0x3f
 8000e86:	4313      	orrs	r3, r2
 8000e88:	602b      	str	r3, [r5, #0]
  /* Transfer complete and TX interrupts enabled.*/
  dp->CR1 |= I2C_CR1_TCIE | I2C_CR1_TXIE;
#endif

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_START;
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	686a      	ldr	r2, [r5, #4]
 8000e8e:	019b      	lsls	r3, r3, #6
 8000e90:	4313      	orrs	r3, r2
 8000e92:	606b      	str	r3, [r5, #4]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <i2c_lld_master_transmit_timeout.constprop.19+0xec>)
 8000e96:	4912      	ldr	r1, [pc, #72]	; (8000ee0 <i2c_lld_master_transmit_timeout.constprop.19+0xf0>)
 8000e98:	699b      	ldr	r3, [r3, #24]
  *trp = tp;
 8000e9a:	6023      	str	r3, [r4, #0]
  tp->u.wttrp = trp;
 8000e9c:	625c      	str	r4, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8000e9e:	f7ff ff17 	bl	8000cd0 <chSchGoSleepTimeoutS>
  /* Waits for the operation completion or a timeout.*/
  msg = osalThreadSuspendTimeoutS(&i2cp->thread, timeout);

  /* In case of a software timeout a STOP is sent as an extreme attempt
     to release the bus.*/
  if (msg == MSG_TIMEOUT) {
 8000ea2:	1c43      	adds	r3, r0, #1
 8000ea4:	d104      	bne.n	8000eb0 <i2c_lld_master_transmit_timeout.constprop.19+0xc0>
    dp->CR2 |= I2C_CR2_STOP;
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	686a      	ldr	r2, [r5, #4]
 8000eaa:	01db      	lsls	r3, r3, #7
 8000eac:	4313      	orrs	r3, r2
 8000eae:	606b      	str	r3, [r5, #4]
  }

  return msg;
}
 8000eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dp->CR2 = (uint32_t)addr << 1U;
 8000eb2:	23d4      	movs	r3, #212	; 0xd4
 8000eb4:	6043      	str	r3, [r0, #4]
  n = i2c_lld_get_txbytes(i2cp);
 8000eb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000eb8:	6859      	ldr	r1, [r3, #4]
 8000eba:	684a      	ldr	r2, [r1, #4]
  if (n > 255U) {
 8000ebc:	2aff      	cmp	r2, #255	; 0xff
 8000ebe:	d9cf      	bls.n	8000e60 <i2c_lld_master_transmit_timeout.constprop.19+0x70>
    reload = I2C_CR2_RELOAD;
 8000ec0:	2380      	movs	r3, #128	; 0x80
  if (n > 255U) {
 8000ec2:	22ff      	movs	r2, #255	; 0xff
    reload = I2C_CR2_RELOAD;
 8000ec4:	045b      	lsls	r3, r3, #17
  if (n > 255U) {
 8000ec6:	0412      	lsls	r2, r2, #16
    reload = I2C_CR2_RELOAD;
 8000ec8:	469c      	mov	ip, r3
 8000eca:	e7cc      	b.n	8000e66 <i2c_lld_master_transmit_timeout.constprop.19+0x76>
      return MSG_TIMEOUT;
 8000ecc:	2001      	movs	r0, #1
 8000ece:	4240      	negs	r0, r0
 8000ed0:	e7ee      	b.n	8000eb0 <i2c_lld_master_transmit_timeout.constprop.19+0xc0>
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	20000400 	.word	0x20000400
 8000ed8:	fe00ffff 	.word	0xfe00ffff
 8000edc:	200004bc 	.word	0x200004bc
 8000ee0:	00002710 	.word	0x00002710
	...

08000ef0 <ThreadIMU>:
/*
 * IMU thread
 */
static THD_WORKING_AREA(waThreadIMU,128);
static THD_FUNCTION(ThreadIMU,arg)
{
 8000ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef2:	4645      	mov	r5, r8
 8000ef4:	46de      	mov	lr, fp
 8000ef6:	4657      	mov	r7, sl
 8000ef8:	464e      	mov	r6, r9
 8000efa:	b5e0      	push	{r5, r6, r7, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <ThreadIMU+0xe4>)
 8000efe:	4a36      	ldr	r2, [pc, #216]	; (8000fd8 <ThreadIMU+0xe8>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	b083      	sub	sp, #12
 8000f04:	619a      	str	r2, [r3, #24]
  msg_t msg;
  uint8_t CTRL1_XL_SETUP = CTRL1_XL_ODR_104Hz \
                         | CTRL1_XL_FS_2g     \
                         | CTRL1_XL_BW_200Hz;

  uint8_t cmd[] = {CTRL1_XL, CTRL1_XL_SETUP};
 8000f06:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <ThreadIMU+0xec>)
 8000f08:	ad01      	add	r5, sp, #4
 8000f0a:	802b      	strh	r3, [r5, #0]
 8000f0c:	b672      	cpsid	i
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <ThreadIMU+0xf0>)
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8000f10:	2100      	movs	r1, #0
  i2cp->errors = I2C_NO_ERROR;
 8000f12:	4698      	mov	r8, r3
 8000f14:	2300      	movs	r3, #0
 8000f16:	4642      	mov	r2, r8
 8000f18:	6093      	str	r3, [r2, #8]
  i2cp->state = I2C_ACTIVE_TX;
 8000f1a:	3303      	adds	r3, #3
 8000f1c:	7013      	strb	r3, [r2, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8000f1e:	0028      	movs	r0, r5
 8000f20:	2200      	movs	r2, #0
 8000f22:	f7ff ff65 	bl	8000df0 <i2c_lld_master_transmit_timeout.constprop.19>
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 8000f26:	1c43      	adds	r3, r0, #1
 8000f28:	d050      	beq.n	8000fcc <ThreadIMU+0xdc>
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	4642      	mov	r2, r8
 8000f2e:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f30:	b662      	cpsie	i
 8000f32:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <ThreadIMU+0xf4>)

      // Thread sleep
      //sdWrite(&SD1, waitTime, sizeof(waitTime));
      chprintf((BaseSequentialStream *)&SD1, "Wait Time is:  %u", waitTime);

      chThdSleepMilliseconds(waitTime);
 8000f34:	4e2c      	ldr	r6, [pc, #176]	; (8000fe8 <ThreadIMU+0xf8>)
 8000f36:	469b      	mov	fp, r3
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <ThreadIMU+0xfc>)
 8000f3a:	2700      	movs	r7, #0
 8000f3c:	469a      	mov	sl, r3
  i2cp->errors = I2C_NO_ERROR;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	4699      	mov	r9, r3
 8000f42:	e02e      	b.n	8000fa2 <ThreadIMU+0xb2>
    i2cp->state = I2C_READY;
 8000f44:	2302      	movs	r3, #2
 8000f46:	4642      	mov	r2, r8
 8000f48:	7013      	strb	r3, [r2, #0]
 8000f4a:	b662      	cpsie	i
  uint8_t result[2];
  uint16_t accelZ;
  uint8_t cmd[] = {OUTZ_L_XL};
  readRegister(cmd, result);

  accelZ = result[1]<<8 | result[0];
 8000f4c:	786a      	ldrb	r2, [r5, #1]
 8000f4e:	782b      	ldrb	r3, [r5, #0]
 8000f50:	0212      	lsls	r2, r2, #8
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	b29c      	uxth	r4, r3
      if (accelZCounts & 1<<15)
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da01      	bge.n	8000f60 <ThreadIMU+0x70>
        accelZCounts = ~accelZCounts + 1;
 8000f5c:	4264      	negs	r4, r4
 8000f5e:	b2a4      	uxth	r4, r4
      waitTime = g*100;
 8000f60:	2364      	movs	r3, #100	; 0x64
 8000f62:	0ba4      	lsrs	r4, r4, #14
 8000f64:	435c      	muls	r4, r3
      palTogglePad(GPIOC, GPIOC_LED4);
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <ThreadIMU+0x100>)
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	6951      	ldr	r1, [r2, #20]
      chprintf((BaseSequentialStream *)&SD1, "Wait Time is:  %u", waitTime);
 8000f6e:	4650      	mov	r0, sl
      palTogglePad(GPIOC, GPIOC_LED4);
 8000f70:	404b      	eors	r3, r1
 8000f72:	6153      	str	r3, [r2, #20]
      chprintf((BaseSequentialStream *)&SD1, "Wait Time is:  %u", waitTime);
 8000f74:	4659      	mov	r1, fp
 8000f76:	0022      	movs	r2, r4
 8000f78:	f7ff fc82 	bl	8000880 <chprintf.constprop.7>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
      chThdSleepMilliseconds(waitTime);
 8000f7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ff4 <ThreadIMU+0x104>)
 8000f80:	2300      	movs	r3, #0
 8000f82:	0020      	movs	r0, r4
 8000f84:	2100      	movs	r1, #0
 8000f86:	f7ff f9d3 	bl	8000330 <__aeabi_lmul>
 8000f8a:	22fa      	movs	r2, #250	; 0xfa
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	1980      	adds	r0, r0, r6
 8000f92:	4179      	adcs	r1, r7
 8000f94:	f7ff f9ac 	bl	80002f0 <__aeabi_uldivmod>
 8000f98:	0001      	movs	r1, r0
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8000f9a:	2008      	movs	r0, #8
 8000f9c:	f7ff fe98 	bl	8000cd0 <chSchGoSleepTimeoutS>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fa0:	b662      	cpsie	i
  uint8_t cmd[] = {OUTZ_L_XL};
 8000fa2:	232c      	movs	r3, #44	; 0x2c
 8000fa4:	466a      	mov	r2, sp
 8000fa6:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
  i2cp->errors = I2C_NO_ERROR;
 8000faa:	4643      	mov	r3, r8
 8000fac:	464a      	mov	r2, r9
 8000fae:	609a      	str	r2, [r3, #8]
  i2cp->state = I2C_ACTIVE_TX;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	4642      	mov	r2, r8
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8000fb4:	0029      	movs	r1, r5
  i2cp->state = I2C_ACTIVE_TX;
 8000fb6:	7013      	strb	r3, [r2, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8000fb8:	4668      	mov	r0, sp
 8000fba:	2204      	movs	r2, #4
 8000fbc:	f7ff ff18 	bl	8000df0 <i2c_lld_master_transmit_timeout.constprop.19>
  if (rdymsg == MSG_TIMEOUT) {
 8000fc0:	1c43      	adds	r3, r0, #1
 8000fc2:	d1bf      	bne.n	8000f44 <ThreadIMU+0x54>
    i2cp->state = I2C_LOCKED;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	4642      	mov	r2, r8
 8000fc8:	7013      	strb	r3, [r2, #0]
 8000fca:	e7be      	b.n	8000f4a <ThreadIMU+0x5a>
 8000fcc:	2305      	movs	r3, #5
 8000fce:	4642      	mov	r2, r8
 8000fd0:	7013      	strb	r3, [r2, #0]
 8000fd2:	e7ad      	b.n	8000f30 <ThreadIMU+0x40>
 8000fd4:	200004bc 	.word	0x200004bc
 8000fd8:	080022b4 	.word	0x080022b4
 8000fdc:	00004110 	.word	0x00004110
 8000fe0:	20000400 	.word	0x20000400
 8000fe4:	08002334 	.word	0x08002334
 8000fe8:	000003e7 	.word	0x000003e7
 8000fec:	20000434 	.word	0x20000434
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	00002710 	.word	0x00002710
	...

08001000 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8001000:	b510      	push	{r4, lr}

  if (TIME_IMMEDIATE == timeout) {
 8001002:	2900      	cmp	r1, #0
 8001004:	d00a      	beq.n	800101c <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <chThdEnqueueTimeoutS+0x24>)
  tp->queue.prev             = tqp->prev;
 8001008:	6842      	ldr	r2, [r0, #4]
 800100a:	699b      	ldr	r3, [r3, #24]
  tp->queue.next             = (thread_t *)tqp;
 800100c:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = tqp->prev;
 800100e:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8001010:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8001012:	6043      	str	r3, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001014:	2004      	movs	r0, #4
 8001016:	f7ff fe5b 	bl	8000cd0 <chSchGoSleepTimeoutS>
}
 800101a:	bd10      	pop	{r4, pc}
    return MSG_TIMEOUT;
 800101c:	2001      	movs	r0, #1
 800101e:	4240      	negs	r0, r0
 8001020:	e7fb      	b.n	800101a <chThdEnqueueTimeoutS+0x1a>
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	200004bc 	.word	0x200004bc
	...

08001030 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001030:	b570      	push	{r4, r5, r6, lr}
 8001032:	0004      	movs	r4, r0
 8001034:	000e      	movs	r6, r1
 8001036:	0015      	movs	r5, r2
 8001038:	b672      	cpsid	i
 800103a:	e005      	b.n	8001048 <oqPutTimeout+0x18>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 800103c:	0029      	movs	r1, r5
 800103e:	0020      	movs	r0, r4
 8001040:	f7ff ffde 	bl	8001000 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001044:	2800      	cmp	r0, #0
 8001046:	db17      	blt.n	8001078 <oqPutTimeout+0x48>
  while (oqIsFullI(oqp)) {
 8001048:	68a3      	ldr	r3, [r4, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f6      	beq.n	800103c <oqPutTimeout+0xc>
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 800104e:	68a3      	ldr	r3, [r4, #8]
 8001050:	3b01      	subs	r3, #1
 8001052:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001054:	6963      	ldr	r3, [r4, #20]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	6162      	str	r2, [r4, #20]
 800105a:	701e      	strb	r6, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800105c:	6963      	ldr	r3, [r4, #20]
 800105e:	6922      	ldr	r2, [r4, #16]
 8001060:	4293      	cmp	r3, r2
 8001062:	d301      	bcc.n	8001068 <oqPutTimeout+0x38>
    oqp->q_wrptr = oqp->q_buffer;
 8001064:	68e3      	ldr	r3, [r4, #12]
 8001066:	6163      	str	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8001068:	69e3      	ldr	r3, [r4, #28]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 800106e:	0020      	movs	r0, r4
 8001070:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
 8001072:	b662      	cpsie	i
 8001074:	2000      	movs	r0, #0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8001076:	bd70      	pop	{r4, r5, r6, pc}
 8001078:	b662      	cpsie	i
 800107a:	e7fc      	b.n	8001076 <oqPutTimeout+0x46>
 800107c:	0000      	movs	r0, r0
	...

08001080 <_putt>:
static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8001080:	b510      	push	{r4, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001082:	3030      	adds	r0, #48	; 0x30
 8001084:	f7ff ffd4 	bl	8001030 <oqPutTimeout>
}
 8001088:	bd10      	pop	{r4, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	0000      	movs	r0, r0
	...

08001090 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001090:	2201      	movs	r2, #1
static msg_t _put(void *ip, uint8_t b) {
 8001092:	b510      	push	{r4, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001094:	3030      	adds	r0, #48	; 0x30
 8001096:	4252      	negs	r2, r2
 8001098:	f7ff ffca 	bl	8001030 <oqPutTimeout>
}
 800109c:	bd10      	pop	{r4, pc}
 800109e:	46c0      	nop			; (mov r8, r8)

080010a0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	0004      	movs	r4, r0
 80010a4:	000d      	movs	r5, r1
  __ASM volatile ("cpsid i" : : : "memory");
 80010a6:	b672      	cpsid	i
 80010a8:	e005      	b.n	80010b6 <iqGetTimeout+0x16>
 80010aa:	0029      	movs	r1, r5
 80010ac:	0020      	movs	r0, r4
 80010ae:	f7ff ffa7 	bl	8001000 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80010b2:	2800      	cmp	r0, #0
 80010b4:	db16      	blt.n	80010e4 <iqGetTimeout+0x44>
  while (iqIsEmptyI(iqp)) {
 80010b6:	68a3      	ldr	r3, [r4, #8]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f6      	beq.n	80010aa <iqGetTimeout+0xa>
  iqp->q_counter--;
 80010bc:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 80010be:	69a2      	ldr	r2, [r4, #24]
  iqp->q_counter--;
 80010c0:	3b01      	subs	r3, #1
 80010c2:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 80010c4:	1c53      	adds	r3, r2, #1
 80010c6:	61a3      	str	r3, [r4, #24]
 80010c8:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 80010ca:	6922      	ldr	r2, [r4, #16]
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d301      	bcc.n	80010d4 <iqGetTimeout+0x34>
    iqp->q_rdptr = iqp->q_buffer;
 80010d0:	68e3      	ldr	r3, [r4, #12]
 80010d2:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 80010d4:	69e3      	ldr	r3, [r4, #28]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <iqGetTimeout+0x3e>
    iqp->q_notify(iqp);
 80010da:	0020      	movs	r0, r4
 80010dc:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
 80010de:	b662      	cpsie	i
  return (msg_t)b;
 80010e0:	0028      	movs	r0, r5
}
 80010e2:	bd70      	pop	{r4, r5, r6, pc}
 80010e4:	b662      	cpsie	i
 80010e6:	e7fc      	b.n	80010e2 <iqGetTimeout+0x42>
	...

080010f0 <_gett>:
static msg_t _gett(void *ip, sysinterval_t timeout) {
 80010f0:	b510      	push	{r4, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80010f2:	300c      	adds	r0, #12
 80010f4:	f7ff ffd4 	bl	80010a0 <iqGetTimeout>
}
 80010f8:	bd10      	pop	{r4, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	0000      	movs	r0, r0
	...

08001100 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001100:	2101      	movs	r1, #1
static msg_t _get(void *ip) {
 8001102:	b510      	push	{r4, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001104:	300c      	adds	r0, #12
 8001106:	4249      	negs	r1, r1
 8001108:	f7ff ffca 	bl	80010a0 <iqGetTimeout>
}
 800110c:	bd10      	pop	{r4, pc}
 800110e:	46c0      	nop			; (mov r8, r8)

08001110 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	4657      	mov	r7, sl
 8001114:	4645      	mov	r5, r8
 8001116:	46de      	mov	lr, fp
 8001118:	464e      	mov	r6, r9
 800111a:	b5e0      	push	{r5, r6, r7, lr}
 800111c:	b083      	sub	sp, #12
 800111e:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8001120:	69c3      	ldr	r3, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 8001122:	0004      	movs	r4, r0
 8001124:	4688      	mov	r8, r1
 8001126:	0017      	movs	r7, r2
  qnotify_t nfy = oqp->q_notify;
 8001128:	469a      	mov	sl, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800112a:	b672      	cpsid	i
  size_t wr = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	4699      	mov	r9, r3

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
 8001130:	2a00      	cmp	r2, #0
 8001132:	d10b      	bne.n	800114c <oqWriteTimeout+0x3c>
 8001134:	e026      	b.n	8001184 <oqWriteTimeout+0x74>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8001136:	4653      	mov	r3, sl
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <oqWriteTimeout+0x30>
        nfy(oqp);
 800113c:	0020      	movs	r0, r4
 800113e:	47d0      	blx	sl
  __ASM volatile ("cpsie i" : : : "memory");
 8001140:	b662      	cpsie	i
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
 8001142:	44a9      	add	r9, r5
      bp += done;
 8001144:	44a8      	add	r8, r5
  __ASM volatile ("cpsid i" : : : "memory");
 8001146:	b672      	cpsid	i
  while (wr < n) {
 8001148:	454f      	cmp	r7, r9
 800114a:	d91b      	bls.n	8001184 <oqWriteTimeout+0x74>
  if (n > oqGetEmptyI(oqp)) {
 800114c:	68a3      	ldr	r3, [r4, #8]
 800114e:	003d      	movs	r5, r7
 8001150:	429f      	cmp	r7, r3
 8001152:	d900      	bls.n	8001156 <oqWriteTimeout+0x46>
    n = oqGetEmptyI(oqp);
 8001154:	68a5      	ldr	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001156:	6960      	ldr	r0, [r4, #20]
 8001158:	6923      	ldr	r3, [r4, #16]
 800115a:	1a1e      	subs	r6, r3, r0
  if (n < s1) {
 800115c:	42ae      	cmp	r6, r5
 800115e:	d82a      	bhi.n	80011b6 <oqWriteTimeout+0xa6>
  else if (n > s1) {
 8001160:	d319      	bcc.n	8001196 <oqWriteTimeout+0x86>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001162:	002a      	movs	r2, r5
 8001164:	4641      	mov	r1, r8
 8001166:	f000 ff7d 	bl	8002064 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 800116a:	68e3      	ldr	r3, [r4, #12]
 800116c:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 800116e:	68a3      	ldr	r3, [r4, #8]
 8001170:	1b5b      	subs	r3, r3, r5
 8001172:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8001174:	2d00      	cmp	r5, #0
 8001176:	d1de      	bne.n	8001136 <oqWriteTimeout+0x26>
 8001178:	9901      	ldr	r1, [sp, #4]
 800117a:	0020      	movs	r0, r4
 800117c:	f7ff ff40 	bl	8001000 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001180:	2800      	cmp	r0, #0
 8001182:	d0e1      	beq.n	8001148 <oqWriteTimeout+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 8001184:	b662      	cpsie	i
    }
  }

  osalSysUnlock();
  return wr;
}
 8001186:	4648      	mov	r0, r9
 8001188:	b003      	add	sp, #12
 800118a:	bc3c      	pop	{r2, r3, r4, r5}
 800118c:	4690      	mov	r8, r2
 800118e:	4699      	mov	r9, r3
 8001190:	46a2      	mov	sl, r4
 8001192:	46ab      	mov	fp, r5
 8001194:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001196:	0032      	movs	r2, r6
 8001198:	4641      	mov	r1, r8
 800119a:	f000 ff63 	bl	8002064 <memcpy>
    bp += s1;
 800119e:	0031      	movs	r1, r6
    s2 = n - s1;
 80011a0:	1bab      	subs	r3, r5, r6
 80011a2:	469b      	mov	fp, r3
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80011a4:	001a      	movs	r2, r3
    bp += s1;
 80011a6:	4441      	add	r1, r8
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80011a8:	68e0      	ldr	r0, [r4, #12]
 80011aa:	f000 ff5b 	bl	8002064 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 80011ae:	68e3      	ldr	r3, [r4, #12]
 80011b0:	445b      	add	r3, fp
 80011b2:	6163      	str	r3, [r4, #20]
 80011b4:	e7db      	b.n	800116e <oqWriteTimeout+0x5e>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80011b6:	002a      	movs	r2, r5
 80011b8:	4641      	mov	r1, r8
 80011ba:	f000 ff53 	bl	8002064 <memcpy>
    oqp->q_wrptr += n;
 80011be:	6963      	ldr	r3, [r4, #20]
 80011c0:	195b      	adds	r3, r3, r5
 80011c2:	6163      	str	r3, [r4, #20]
 80011c4:	e7d3      	b.n	800116e <oqWriteTimeout+0x5e>
 80011c6:	46c0      	nop			; (mov r8, r8)
	...

080011d0 <_writet>:
                      sysinterval_t timeout) {
 80011d0:	b510      	push	{r4, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80011d2:	3030      	adds	r0, #48	; 0x30
 80011d4:	f7ff ff9c 	bl	8001110 <oqWriteTimeout>
}
 80011d8:	bd10      	pop	{r4, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	0000      	movs	r0, r0
	...

080011e0 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80011e0:	2301      	movs	r3, #1
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 80011e2:	b510      	push	{r4, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80011e4:	3030      	adds	r0, #48	; 0x30
 80011e6:	425b      	negs	r3, r3
 80011e8:	f7ff ff92 	bl	8001110 <oqWriteTimeout>
}
 80011ec:	bd10      	pop	{r4, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)

080011f0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 80011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f2:	4657      	mov	r7, sl
 80011f4:	4645      	mov	r5, r8
 80011f6:	46de      	mov	lr, fp
 80011f8:	464e      	mov	r6, r9
 80011fa:	b5e0      	push	{r5, r6, r7, lr}
 80011fc:	b083      	sub	sp, #12
 80011fe:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = iqp->q_notify;
 8001200:	69c3      	ldr	r3, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 8001202:	0004      	movs	r4, r0
 8001204:	4688      	mov	r8, r1
 8001206:	0017      	movs	r7, r2
  qnotify_t nfy = iqp->q_notify;
 8001208:	469a      	mov	sl, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800120a:	b672      	cpsid	i
  size_t rd = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	4699      	mov	r9, r3
  while (rd < n) {
 8001210:	2a00      	cmp	r2, #0
 8001212:	d10b      	bne.n	800122c <iqReadTimeout+0x3c>
 8001214:	e026      	b.n	8001264 <iqReadTimeout+0x74>
      if (nfy != NULL) {
 8001216:	4653      	mov	r3, sl
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <iqReadTimeout+0x30>
        nfy(iqp);
 800121c:	0020      	movs	r0, r4
 800121e:	47d0      	blx	sl
  __ASM volatile ("cpsie i" : : : "memory");
 8001220:	b662      	cpsie	i
      rd += done;
 8001222:	44a9      	add	r9, r5
      bp += done;
 8001224:	44a8      	add	r8, r5
  __ASM volatile ("cpsid i" : : : "memory");
 8001226:	b672      	cpsid	i
  while (rd < n) {
 8001228:	454f      	cmp	r7, r9
 800122a:	d91b      	bls.n	8001264 <iqReadTimeout+0x74>
  if (n > iqGetFullI(iqp)) {
 800122c:	68a3      	ldr	r3, [r4, #8]
 800122e:	003d      	movs	r5, r7
 8001230:	429f      	cmp	r7, r3
 8001232:	d900      	bls.n	8001236 <iqReadTimeout+0x46>
    n = iqGetFullI(iqp);
 8001234:	68a5      	ldr	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001236:	69a1      	ldr	r1, [r4, #24]
 8001238:	6923      	ldr	r3, [r4, #16]
 800123a:	1a5e      	subs	r6, r3, r1
  if (n < s1) {
 800123c:	42ae      	cmp	r6, r5
 800123e:	d82a      	bhi.n	8001296 <iqReadTimeout+0xa6>
  else if (n > s1) {
 8001240:	d319      	bcc.n	8001276 <iqReadTimeout+0x86>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001242:	002a      	movs	r2, r5
 8001244:	4640      	mov	r0, r8
 8001246:	f000 ff0d 	bl	8002064 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 800124a:	68e3      	ldr	r3, [r4, #12]
 800124c:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 800124e:	68a3      	ldr	r3, [r4, #8]
 8001250:	1b5b      	subs	r3, r3, r5
 8001252:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8001254:	2d00      	cmp	r5, #0
 8001256:	d1de      	bne.n	8001216 <iqReadTimeout+0x26>
 8001258:	9901      	ldr	r1, [sp, #4]
 800125a:	0020      	movs	r0, r4
 800125c:	f7ff fed0 	bl	8001000 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001260:	2800      	cmp	r0, #0
 8001262:	d0e1      	beq.n	8001228 <iqReadTimeout+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 8001264:	b662      	cpsie	i
}
 8001266:	4648      	mov	r0, r9
 8001268:	b003      	add	sp, #12
 800126a:	bc3c      	pop	{r2, r3, r4, r5}
 800126c:	4690      	mov	r8, r2
 800126e:	4699      	mov	r9, r3
 8001270:	46a2      	mov	sl, r4
 8001272:	46ab      	mov	fp, r5
 8001274:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001276:	0032      	movs	r2, r6
 8001278:	4640      	mov	r0, r8
 800127a:	f000 fef3 	bl	8002064 <memcpy>
    bp += s1;
 800127e:	0030      	movs	r0, r6
    s2 = n - s1;
 8001280:	1bab      	subs	r3, r5, r6
 8001282:	469b      	mov	fp, r3
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8001284:	001a      	movs	r2, r3
    bp += s1;
 8001286:	4440      	add	r0, r8
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8001288:	68e1      	ldr	r1, [r4, #12]
 800128a:	f000 feeb 	bl	8002064 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 800128e:	68e3      	ldr	r3, [r4, #12]
 8001290:	445b      	add	r3, fp
 8001292:	61a3      	str	r3, [r4, #24]
 8001294:	e7db      	b.n	800124e <iqReadTimeout+0x5e>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001296:	002a      	movs	r2, r5
 8001298:	4640      	mov	r0, r8
 800129a:	f000 fee3 	bl	8002064 <memcpy>
    iqp->q_rdptr += n;
 800129e:	69a3      	ldr	r3, [r4, #24]
 80012a0:	195b      	adds	r3, r3, r5
 80012a2:	61a3      	str	r3, [r4, #24]
 80012a4:	e7d3      	b.n	800124e <iqReadTimeout+0x5e>
 80012a6:	46c0      	nop			; (mov r8, r8)
	...

080012b0 <_readt>:
                     sysinterval_t timeout) {
 80012b0:	b510      	push	{r4, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80012b2:	300c      	adds	r0, #12
 80012b4:	f7ff ff9c 	bl	80011f0 <iqReadTimeout>
}
 80012b8:	bd10      	pop	{r4, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80012c0:	2301      	movs	r3, #1
static size_t _read(void *ip, uint8_t *bp, size_t n) {
 80012c2:	b510      	push	{r4, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80012c4:	300c      	adds	r0, #12
 80012c6:	425b      	negs	r3, r3
 80012c8:	f7ff ff92 	bl	80011f0 <iqReadTimeout>
}
 80012cc:	bd10      	pop	{r4, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)

080012d0 <main>:


/*
 * Application entry point.
 */
int main(void) {
 80012d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d2:	46de      	mov	lr, fp
 80012d4:	4657      	mov	r7, sl
 80012d6:	464e      	mov	r6, r9
 80012d8:	4645      	mov	r5, r8
void hal_lld_init(void) {

  /* Reset of all peripherals.
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB(~STM32_GPIO_EN_MASK);
 80012da:	4bf7      	ldr	r3, [pc, #988]	; (80016b8 <main+0x3e8>)
 80012dc:	4af7      	ldr	r2, [pc, #988]	; (80016bc <main+0x3ec>)
 80012de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80012e0:	b5e0      	push	{r5, r6, r7, lr}
 80012e2:	430a      	orrs	r2, r1
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 80012ea:	6919      	ldr	r1, [r3, #16]
 80012ec:	2101      	movs	r1, #1
 80012ee:	4249      	negs	r1, r1
 80012f0:	6119      	str	r1, [r3, #16]
 80012f2:	611a      	str	r2, [r3, #16]
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 80012f4:	68d8      	ldr	r0, [r3, #12]
 80012f6:	49f2      	ldr	r1, [pc, #968]	; (80016c0 <main+0x3f0>)
 80012f8:	4301      	orrs	r1, r0
 80012fa:	60d9      	str	r1, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80012fc:	2180      	movs	r1, #128	; 0x80
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 80012fe:	60da      	str	r2, [r3, #12]
  rccEnablePWRInterface(true);
 8001300:	69d8      	ldr	r0, [r3, #28]
 8001302:	0549      	lsls	r1, r1, #21
 8001304:	4301      	orrs	r1, r0
 8001306:	61d9      	str	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	48ee      	ldr	r0, [pc, #952]	; (80016c4 <main+0x3f4>)
 800130c:	0049      	lsls	r1, r1, #1
 800130e:	6804      	ldr	r4, [r0, #0]
 8001310:	4321      	orrs	r1, r4
 8001312:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 8001314:	20c0      	movs	r0, #192	; 0xc0
 8001316:	6a19      	ldr	r1, [r3, #32]
 8001318:	0080      	lsls	r0, r0, #2
 800131a:	4001      	ands	r1, r0
 800131c:	3801      	subs	r0, #1
 800131e:	38ff      	subs	r0, #255	; 0xff
 8001320:	4281      	cmp	r1, r0
 8001322:	d003      	beq.n	800132c <main+0x5c>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	0249      	lsls	r1, r1, #9
 8001328:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 800132a:	621a      	str	r2, [r3, #32]
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	4be2      	ldr	r3, [pc, #904]	; (80016b8 <main+0x3e8>)
 8001330:	0212      	lsls	r2, r2, #8
 8001332:	6a19      	ldr	r1, [r3, #32]
 8001334:	4211      	tst	r1, r2
 8001336:	d107      	bne.n	8001348 <main+0x78>
    RCC->BDCR |= STM32_RTCSEL;
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	6a18      	ldr	r0, [r3, #32]
 800133c:	0089      	lsls	r1, r1, #2
 800133e:	4301      	orrs	r1, r0
 8001340:	6219      	str	r1, [r3, #32]
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8001342:	6a19      	ldr	r1, [r3, #32]
 8001344:	430a      	orrs	r2, r1
 8001346:	621a      	str	r2, [r3, #32]
  dma.streams_mask = 0U;
 8001348:	2500      	movs	r5, #0
 800134a:	4bdf      	ldr	r3, [pc, #892]	; (80016c8 <main+0x3f8>)
    _stm32_dma_streams[i].channel->CCR = 0U;
 800134c:	4adf      	ldr	r2, [pc, #892]	; (80016cc <main+0x3fc>)
  dma.streams_mask = 0U;
 800134e:	601d      	str	r5, [r3, #0]
  dma.isr_mask = 0U;
 8001350:	605d      	str	r5, [r3, #4]
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001352:	4bdf      	ldr	r3, [pc, #892]	; (80016d0 <main+0x400>)
  DMA1->IFCR = 0xFFFFFFFFU;
 8001354:	2101      	movs	r1, #1
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001356:	601d      	str	r5, [r3, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8001358:	4bde      	ldr	r3, [pc, #888]	; (80016d4 <main+0x404>)
  DMA1->IFCR = 0xFFFFFFFFU;
 800135a:	4249      	negs	r1, r1
    _stm32_dma_isr_redir[i].dma_func = NULL;
 800135c:	601d      	str	r5, [r3, #0]
    _stm32_dma_streams[i].channel->CCR = 0U;
 800135e:	6015      	str	r5, [r2, #0]
 8001360:	4add      	ldr	r2, [pc, #884]	; (80016d8 <main+0x408>)
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8001362:	609d      	str	r5, [r3, #8]
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001364:	6015      	str	r5, [r2, #0]
 8001366:	4add      	ldr	r2, [pc, #884]	; (80016dc <main+0x40c>)
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8001368:	611d      	str	r5, [r3, #16]
    _stm32_dma_streams[i].channel->CCR = 0U;
 800136a:	6015      	str	r5, [r2, #0]
 800136c:	4adc      	ldr	r2, [pc, #880]	; (80016e0 <main+0x410>)
    _stm32_dma_isr_redir[i].dma_func = NULL;
 800136e:	619d      	str	r5, [r3, #24]
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001370:	6015      	str	r5, [r2, #0]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8001372:	22c1      	movs	r2, #193	; 0xc1
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8001374:	621d      	str	r5, [r3, #32]
  DMA1->IFCR = 0xFFFFFFFFU;
 8001376:	4bdb      	ldr	r3, [pc, #876]	; (80016e4 <main+0x414>)
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	6059      	str	r1, [r3, #4]
 800137c:	4bda      	ldr	r3, [pc, #872]	; (80016e8 <main+0x418>)
 800137e:	48db      	ldr	r0, [pc, #876]	; (80016ec <main+0x41c>)
 8001380:	4698      	mov	r8, r3
 8001382:	589b      	ldr	r3, [r3, r2]
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001384:	24c0      	movs	r4, #192	; 0xc0
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8001386:	4018      	ands	r0, r3
 8001388:	23c0      	movs	r3, #192	; 0xc0
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	4303      	orrs	r3, r0
 800138e:	4640      	mov	r0, r8
 8001390:	5083      	str	r3, [r0, r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001392:	2320      	movs	r3, #32
 8001394:	0064      	lsls	r4, r4, #1
 8001396:	5103      	str	r3, [r0, r4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001398:	6003      	str	r3, [r0, #0]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 800139a:	5880      	ldr	r0, [r0, r2]
 800139c:	4bd4      	ldr	r3, [pc, #848]	; (80016f0 <main+0x420>)
 800139e:	4646      	mov	r6, r8
 80013a0:	469a      	mov	sl, r3
 80013a2:	4018      	ands	r0, r3
 80013a4:	23c0      	movs	r3, #192	; 0xc0
 80013a6:	041b      	lsls	r3, r3, #16
 80013a8:	4303      	orrs	r3, r0
 80013aa:	4640      	mov	r0, r8
 80013ac:	5083      	str	r3, [r0, r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80013ae:	2340      	movs	r3, #64	; 0x40
 80013b0:	5103      	str	r3, [r0, r4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80013b2:	6003      	str	r3, [r0, #0]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 80013b4:	5883      	ldr	r3, [r0, r2]
 80013b6:	20c0      	movs	r0, #192	; 0xc0
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	0600      	lsls	r0, r0, #24
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	4303      	orrs	r3, r0
 80013c0:	50b3      	str	r3, [r6, r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80013c2:	2280      	movs	r2, #128	; 0x80
  i2cp->state  = I2C_STOP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	4fcb      	ldr	r7, [pc, #812]	; (80016f4 <main+0x424>)
 80013c8:	5132      	str	r2, [r6, r4]
 80013ca:	4699      	mov	r9, r3
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80013cc:	6032      	str	r2, [r6, #0]
 80013ce:	703b      	strb	r3, [r7, #0]
  tqp->next = (thread_t *)tqp;
 80013d0:	003b      	movs	r3, r7
 80013d2:	330c      	adds	r3, #12
 80013d4:	60fb      	str	r3, [r7, #12]
  tqp->prev = (thread_t *)tqp;
 80013d6:	613b      	str	r3, [r7, #16]
  I2CD1.i2c    = I2C1;
 80013d8:	4bc7      	ldr	r3, [pc, #796]	; (80016f8 <main+0x428>)
  i2cp->config = NULL;
 80013da:	607d      	str	r5, [r7, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 80013dc:	617d      	str	r5, [r7, #20]
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80013e0:	4bc6      	ldr	r3, [pc, #792]	; (80016fc <main+0x42c>)
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {

  sdp->vmt = &vmt;
 80013e2:	4ec7      	ldr	r6, [pc, #796]	; (8001700 <main+0x430>)
 80013e4:	0018      	movs	r0, r3
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 80013e6:	3314      	adds	r3, #20
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ea:	0033      	movs	r3, r6
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80013ec:	3028      	adds	r0, #40	; 0x28
 80013ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80013f0:	48c4      	ldr	r0, [pc, #784]	; (8001704 <main+0x434>)
  iqp->q_counter = 0;
 80013f2:	6175      	str	r5, [r6, #20]
 80013f4:	c301      	stmia	r3!, {r0}
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 80013f6:	6073      	str	r3, [r6, #4]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80013f8:	464b      	mov	r3, r9
 80013fa:	7233      	strb	r3, [r6, #8]
  tqp->next = (thread_t *)tqp;
 80013fc:	0033      	movs	r3, r6
 80013fe:	330c      	adds	r3, #12
 8001400:	60f3      	str	r3, [r6, #12]
  tqp->prev = (thread_t *)tqp;
 8001402:	6133      	str	r3, [r6, #16]
  iqp->q_buffer  = bp;
 8001404:	4bc0      	ldr	r3, [pc, #768]	; (8001708 <main+0x438>)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8001406:	20c6      	movs	r0, #198	; 0xc6
 8001408:	61b3      	str	r3, [r6, #24]
  iqp->q_rdptr   = bp;
 800140a:	6273      	str	r3, [r6, #36]	; 0x24
  iqp->q_wrptr   = bp;
 800140c:	6233      	str	r3, [r6, #32]
  iqp->q_top     = bp + size;
 800140e:	3310      	adds	r3, #16
 8001410:	61f3      	str	r3, [r6, #28]
  tqp->next = (thread_t *)tqp;
 8001412:	0033      	movs	r3, r6
 8001414:	3330      	adds	r3, #48	; 0x30
 8001416:	6333      	str	r3, [r6, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8001418:	6373      	str	r3, [r6, #52]	; 0x34
  oqp->q_counter = size;
 800141a:	2310      	movs	r3, #16
 800141c:	63b3      	str	r3, [r6, #56]	; 0x38
  oqp->q_buffer  = bp;
 800141e:	4bbb      	ldr	r3, [pc, #748]	; (800170c <main+0x43c>)
  I2CD1.thread = NULL;
 8001420:	61fd      	str	r5, [r7, #28]
 8001422:	63f3      	str	r3, [r6, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8001424:	64b3      	str	r3, [r6, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8001426:	6473      	str	r3, [r6, #68]	; 0x44
  oqp->q_top     = bp + size;
 8001428:	3310      	adds	r3, #16
 800142a:	6433      	str	r3, [r6, #64]	; 0x40
  oqp->q_notify  = onfy;
 800142c:	4bb8      	ldr	r3, [pc, #736]	; (8001710 <main+0x440>)
  iqp->q_notify  = infy;
 800142e:	62b5      	str	r5, [r6, #40]	; 0x28
  oqp->q_notify  = onfy;
 8001430:	64f3      	str	r3, [r6, #76]	; 0x4c

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1);
  iqObjectInit(&SD1.iqueue, sd_in_buf1, sizeof sd_in_buf1, NULL, &SD1);
  oqObjectInit(&SD1.oqueue, sd_out_buf1, sizeof sd_out_buf1, notify1, &SD1);
  SD1.usart = USART1;
 8001432:	4bb8      	ldr	r3, [pc, #736]	; (8001714 <main+0x444>)
  iqp->q_link    = link;
 8001434:	62f6      	str	r6, [r6, #44]	; 0x2c
 8001436:	6573      	str	r3, [r6, #84]	; 0x54
  SD1.clock = STM32_USART1CLK;
 8001438:	4bb7      	ldr	r3, [pc, #732]	; (8001718 <main+0x448>)
  oqp->q_link    = link;
 800143a:	6536      	str	r6, [r6, #80]	; 0x50
 800143c:	65b3      	str	r3, [r6, #88]	; 0x58
 800143e:	4643      	mov	r3, r8
 8001440:	22c0      	movs	r2, #192	; 0xc0
 8001442:	0080      	lsls	r0, r0, #2
 8001444:	581b      	ldr	r3, [r3, r0]
 8001446:	0612      	lsls	r2, r2, #24
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	4313      	orrs	r3, r2
 800144e:	4642      	mov	r2, r8
 8001450:	5013      	str	r3, [r2, r0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	051b      	lsls	r3, r3, #20
 8001456:	5113      	str	r3, [r2, r4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001458:	6013      	str	r3, [r2, #0]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800145a:	4b97      	ldr	r3, [pc, #604]	; (80016b8 <main+0x3e8>)
 800145c:	464a      	mov	r2, r9
 800145e:	469b      	mov	fp, r3
 8001460:	69db      	ldr	r3, [r3, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001462:	48ae      	ldr	r0, [pc, #696]	; (800171c <main+0x44c>)
  ST_ENABLE_CLOCK();
 8001464:	4313      	orrs	r3, r2
 8001466:	465a      	mov	r2, fp
 8001468:	61d3      	str	r3, [r2, #28]
  ST_ENABLE_STOP();
 800146a:	464a      	mov	r2, r9
 800146c:	6883      	ldr	r3, [r0, #8]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 800146e:	348d      	adds	r4, #141	; 0x8d
 8001470:	4313      	orrs	r3, r2
 8001472:	6083      	str	r3, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	48aa      	ldr	r0, [pc, #680]	; (8001720 <main+0x450>)
 8001478:	05db      	lsls	r3, r3, #23
 800147a:	6298      	str	r0, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800147c:	62d9      	str	r1, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800147e:	619d      	str	r5, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001480:	635d      	str	r5, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8001482:	60dd      	str	r5, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8001484:	605d      	str	r5, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001486:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	4643      	mov	r3, r8
 800148c:	2080      	movs	r0, #128	; 0x80
 800148e:	4642      	mov	r2, r8
 8001490:	34ff      	adds	r4, #255	; 0xff
 8001492:	591b      	ldr	r3, [r3, r4]
 8001494:	0600      	lsls	r0, r0, #24
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	4303      	orrs	r3, r0
 800149c:	5113      	str	r3, [r2, r4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	3c8d      	subs	r4, #141	; 0x8d
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	3cff      	subs	r4, #255	; 0xff
 80014a6:	5113      	str	r3, [r2, r4]
  tqp->next = (thread_t *)tqp;
 80014a8:	4c9e      	ldr	r4, [pc, #632]	; (8001724 <main+0x454>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80014aa:	6013      	str	r3, [r2, #0]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80014ac:	0023      	movs	r3, r4
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80014ae:	2224      	movs	r2, #36	; 0x24
 80014b0:	331c      	adds	r3, #28
 80014b2:	61e3      	str	r3, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80014b4:	6223      	str	r3, [r4, #32]
  ch.vtlist.delta = (sysinterval_t)-1;
 80014b6:	6261      	str	r1, [r4, #36]	; 0x24
  ch_memcore.nextmem = __heap_base__;
 80014b8:	4b9b      	ldr	r3, [pc, #620]	; (8001728 <main+0x458>)
 80014ba:	499c      	ldr	r1, [pc, #624]	; (800172c <main+0x45c>)
 80014bc:	6024      	str	r4, [r4, #0]
 80014be:	6019      	str	r1, [r3, #0]
  ch_memcore.endmem  = __heap_end__;
 80014c0:	499b      	ldr	r1, [pc, #620]	; (8001730 <main+0x460>)
  tqp->prev = (thread_t *)tqp;
 80014c2:	6064      	str	r4, [r4, #4]
  ch.rlist.prio = NOPRIO;
 80014c4:	60a5      	str	r5, [r4, #8]
  ch.vtlist.lasttime = (systime_t)0;
 80014c6:	62a5      	str	r5, [r4, #40]	; 0x28
 80014c8:	6059      	str	r1, [r3, #4]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80014ca:	4b9a      	ldr	r3, [pc, #616]	; (8001734 <main+0x464>)
 80014cc:	499a      	ldr	r1, [pc, #616]	; (8001738 <main+0x468>)
 80014ce:	4694      	mov	ip, r2
 80014d0:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
 80014d2:	0019      	movs	r1, r3
 80014d4:	310c      	adds	r1, #12
  H_NEXT(&default_heap.header) = NULL;
 80014d6:	605d      	str	r5, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 80014d8:	609d      	str	r5, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 80014da:	6119      	str	r1, [r3, #16]
 80014dc:	615d      	str	r5, [r3, #20]
  tqp->next = (thread_t *)tqp;
 80014de:	60d9      	str	r1, [r3, #12]
 80014e0:	4b96      	ldr	r3, [pc, #600]	; (800173c <main+0x46c>)

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
 80014e2:	2004      	movs	r0, #4
 80014e4:	449c      	add	ip, r3
 80014e6:	4662      	mov	r2, ip
 80014e8:	0019      	movs	r1, r3
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
 80014ec:	2228      	movs	r2, #40	; 0x28
 80014ee:	3110      	adds	r1, #16
 80014f0:	6119      	str	r1, [r3, #16]
  mp->object_size = size;
 80014f2:	2114      	movs	r1, #20
 80014f4:	4694      	mov	ip, r2
 80014f6:	6199      	str	r1, [r3, #24]
  mp->provider = provider;
 80014f8:	4991      	ldr	r1, [pc, #580]	; (8001740 <main+0x470>)
 80014fa:	449c      	add	ip, r3
 80014fc:	6219      	str	r1, [r3, #32]
 80014fe:	6399      	str	r1, [r3, #56]	; 0x38
 8001500:	0019      	movs	r1, r3
 8001502:	4662      	mov	r2, ip
 8001504:	313c      	adds	r1, #60	; 0x3c
 8001506:	63d9      	str	r1, [r3, #60]	; 0x3c
 8001508:	0019      	movs	r1, r3
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
  mp->object_size = size;
 800150c:	221c      	movs	r2, #28
 800150e:	3140      	adds	r1, #64	; 0x40
 8001510:	6419      	str	r1, [r3, #64]	; 0x40
  tlp->next = (thread_t *)tlp;
 8001512:	0021      	movs	r1, r4
 8001514:	609d      	str	r5, [r3, #8]
  mp->next = NULL;
 8001516:	615d      	str	r5, [r3, #20]
  mp->align = align;
 8001518:	61d8      	str	r0, [r3, #28]
  mp->next = NULL;
 800151a:	62dd      	str	r5, [r3, #44]	; 0x2c
  mp->object_size = size;
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
  mp->align = align;
 800151e:	6358      	str	r0, [r3, #52]	; 0x34
  tqp->next = (thread_t *)tqp;
 8001520:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8001522:	605b      	str	r3, [r3, #4]
  tp->name      = name;
 8001524:	4b87      	ldr	r3, [pc, #540]	; (8001744 <main+0x474>)
  tp->prio      = prio;
 8001526:	3264      	adds	r2, #100	; 0x64
  tp->name      = name;
 8001528:	64a3      	str	r3, [r4, #72]	; 0x48
  REG_INSERT(tp);
 800152a:	0023      	movs	r3, r4
  tlp->next = (thread_t *)tlp;
 800152c:	3158      	adds	r1, #88	; 0x58
  tp->prio      = prio;
 800152e:	63a2      	str	r2, [r4, #56]	; 0x38
  tp->realprio  = prio;
 8001530:	66e2      	str	r2, [r4, #108]	; 0x6c
  tp->mtxlist   = NULL;
 8001532:	66a5      	str	r5, [r4, #104]	; 0x68
  tp->epending  = (eventmask_t)0;
 8001534:	6665      	str	r5, [r4, #100]	; 0x64
  REG_INSERT(tp);
 8001536:	6424      	str	r4, [r4, #64]	; 0x40
 8001538:	65a1      	str	r1, [r4, #88]	; 0x58
  tqp->next = (thread_t *)tqp;
 800153a:	0021      	movs	r1, r4
 800153c:	3330      	adds	r3, #48	; 0x30
 800153e:	6123      	str	r3, [r4, #16]
 8001540:	6163      	str	r3, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8001542:	61a3      	str	r3, [r4, #24]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8001544:	464a      	mov	r2, r9
 8001546:	2350      	movs	r3, #80	; 0x50
 8001548:	315c      	adds	r1, #92	; 0x5c
 800154a:	65e1      	str	r1, [r4, #92]	; 0x5c
  tqp->prev = (thread_t *)tqp;
 800154c:	6621      	str	r1, [r4, #96]	; 0x60
 800154e:	2101      	movs	r1, #1
 8001550:	52e2      	strh	r2, [r4, r3]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001552:	4652      	mov	r2, sl
 8001554:	487c      	ldr	r0, [pc, #496]	; (8001748 <main+0x478>)
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001556:	3302      	adds	r3, #2
 8001558:	64e5      	str	r5, [r4, #76]	; 0x4c
 800155a:	54e1      	strb	r1, [r4, r3]
 800155c:	6a03      	ldr	r3, [r0, #32]
  REG_INSERT(tp);
 800155e:	6464      	str	r4, [r4, #68]	; 0x44
 8001560:	4013      	ands	r3, r2
 8001562:	6203      	str	r3, [r0, #32]
 8001564:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8001566:	b672      	cpsid	i
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001568:	226c      	movs	r2, #108	; 0x6c
 800156a:	4694      	mov	ip, r2
  tp->wabase = tdp->wbase;
 800156c:	4b77      	ldr	r3, [pc, #476]	; (800174c <main+0x47c>)
 800156e:	20ac      	movs	r0, #172	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001570:	449c      	add	ip, r3
 8001572:	4662      	mov	r2, ip
  tp->wabase = tdp->wbase;
 8001574:	501b      	str	r3, [r3, r0]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001576:	3810      	subs	r0, #16
 8001578:	501a      	str	r2, [r3, r0]
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	4874      	ldr	r0, [pc, #464]	; (8001750 <main+0x480>)
 800157e:	509d      	str	r5, [r3, r2]
 8001580:	67d8      	str	r0, [r3, #124]	; 0x7c
 8001582:	4874      	ldr	r0, [pc, #464]	; (8001754 <main+0x484>)
 8001584:	320c      	adds	r2, #12
 8001586:	5098      	str	r0, [r3, r2]
  tp->prio      = prio;
 8001588:	4648      	mov	r0, r9
 800158a:	320c      	adds	r2, #12
 800158c:	5098      	str	r0, [r3, r2]
  tp->realprio  = prio;
 800158e:	3234      	adds	r2, #52	; 0x34
 8001590:	5098      	str	r0, [r3, r2]
  tp->mtxlist   = NULL;
 8001592:	3a04      	subs	r2, #4
 8001594:	509d      	str	r5, [r3, r2]
  tp->epending  = (eventmask_t)0;
 8001596:	3a04      	subs	r2, #4
 8001598:	509d      	str	r5, [r3, r2]
  tp->state     = CH_STATE_WTSTART;
 800159a:	3001      	adds	r0, #1
 800159c:	3a14      	subs	r2, #20
 800159e:	5298      	strh	r0, [r3, r2]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80015a0:	3202      	adds	r2, #2
 80015a2:	5499      	strb	r1, [r3, r2]
  tp->name      = name;
 80015a4:	496c      	ldr	r1, [pc, #432]	; (8001758 <main+0x488>)
 80015a6:	3a0a      	subs	r2, #10
 80015a8:	5099      	str	r1, [r3, r2]
  REG_INSERT(tp);
 80015aa:	0018      	movs	r0, r3
 80015ac:	21a4      	movs	r1, #164	; 0xa4
 80015ae:	3a08      	subs	r2, #8
 80015b0:	509c      	str	r4, [r3, r2]
 80015b2:	6962      	ldr	r2, [r4, #20]
 80015b4:	3090      	adds	r0, #144	; 0x90
 80015b6:	505a      	str	r2, [r3, r1]
  tlp->next = (thread_t *)tlp;
 80015b8:	0019      	movs	r1, r3
 80015ba:	6110      	str	r0, [r2, #16]
 80015bc:	22b8      	movs	r2, #184	; 0xb8
 80015be:	31b8      	adds	r1, #184	; 0xb8
 80015c0:	5099      	str	r1, [r3, r2]
  tqp->next = (thread_t *)tqp;
 80015c2:	001a      	movs	r2, r3
 80015c4:	21bc      	movs	r1, #188	; 0xbc
 80015c6:	32bc      	adds	r2, #188	; 0xbc
 80015c8:	505a      	str	r2, [r3, r1]
  tqp->prev = (thread_t *)tqp;
 80015ca:	3104      	adds	r1, #4
 80015cc:	505a      	str	r2, [r3, r1]
 80015ce:	6160      	str	r0, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 80015d0:	f7ff fb36 	bl	8000c40 <chSchWakeupS.constprop.6>
  __ASM volatile ("cpsie i" : : : "memory");
 80015d4:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 80015d6:	b672      	cpsid	i
  i2cp->config = config;
 80015d8:	4b60      	ldr	r3, [pc, #384]	; (800175c <main+0x48c>)
  dp->CR1 &= ~I2C_CR1_PE;
 80015da:	464a      	mov	r2, r9
 80015dc:	607b      	str	r3, [r7, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 80015de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e0:	469a      	mov	sl, r3
  dp->CR1 &= ~I2C_CR1_PE;
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4393      	bics	r3, r2
 80015e6:	4652      	mov	r2, sl
 80015e8:	6013      	str	r3, [r2, #0]
  if (i2cp->state == I2C_STOP) {
 80015ea:	783b      	ldrb	r3, [r7, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d100      	bne.n	80015f2 <main+0x322>
 80015f0:	e0f3      	b.n	80017da <main+0x50a>
 80015f2:	4a5b      	ldr	r2, [pc, #364]	; (8001760 <main+0x490>)
 80015f4:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <main+0x494>)
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->RXDR);
 80015f6:	4650      	mov	r0, sl
 80015f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015fa:	3024      	adds	r0, #36	; 0x24
 80015fc:	6849      	ldr	r1, [r1, #4]
 80015fe:	6088      	str	r0, [r1, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->TXDR);
 8001600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001602:	3004      	adds	r0, #4
 8001604:	6849      	ldr	r1, [r1, #4]
 8001606:	6088      	str	r0, [r1, #8]
  dp->CR1 = i2cp->config->cr1 |
 8001608:	4651      	mov	r1, sl
 800160a:	600b      	str	r3, [r1, #0]
  dp->TIMINGR = i2cp->config->timingr;
 800160c:	610a      	str	r2, [r1, #16]
  dp->CR1 |= I2C_CR1_PE;
 800160e:	2201      	movs	r2, #1
 8001610:	680b      	ldr	r3, [r1, #0]
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
  i2cp->state = I2C_READY;
 8001616:	2302      	movs	r3, #2
 8001618:	703b      	strb	r3, [r7, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800161a:	b662      	cpsie	i

  /*
   * Activate the I2C driver 1 and set I2C1 pins to alternate mode 1
   */
  i2cStart(&I2CD1, &i2cconfig);
  palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(1) | PAL_STM32_OTYPE_OPENDRAIN); /* I2C1 SCL */
 800161c:	2286      	movs	r2, #134	; 0x86
 800161e:	2140      	movs	r1, #64	; 0x40
 8001620:	4851      	ldr	r0, [pc, #324]	; (8001768 <main+0x498>)
 8001622:	f7ff f885 	bl	8000730 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(1) | PAL_STM32_OTYPE_OPENDRAIN); /* I2C1 SDA */
 8001626:	2286      	movs	r2, #134	; 0x86
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	484f      	ldr	r0, [pc, #316]	; (8001768 <main+0x498>)
 800162c:	f7ff f880 	bl	8000730 <_pal_lld_setgroupmode>
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8001632:	7a33      	ldrb	r3, [r6, #8]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d100      	bne.n	800163a <main+0x36a>
 8001638:	e104      	b.n	8001844 <main+0x574>
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 800163a:	2196      	movs	r1, #150	; 0x96
 800163c:	6db0      	ldr	r0, [r6, #88]	; 0x58
 800163e:	0209      	lsls	r1, r1, #8
 8001640:	f7fe fdca 	bl	80001d8 <__udivsi3>
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001644:	2340      	movs	r3, #64	; 0x40
  USART_TypeDef *u = sdp->usart;
 8001646:	6d75      	ldr	r5, [r6, #84]	; 0x54
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001648:	2701      	movs	r7, #1
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 800164a:	60e8      	str	r0, [r5, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800164c:	606b      	str	r3, [r5, #4]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800164e:	232e      	movs	r3, #46	; 0x2e
 8001650:	33ff      	adds	r3, #255	; 0xff
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001652:	60af      	str	r7, [r5, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001654:	602b      	str	r3, [r5, #0]
  u->ICR = 0xFFFFFFFFU;
 8001656:	3b2f      	subs	r3, #47	; 0x2f
 8001658:	3bff      	subs	r3, #255	; 0xff
 800165a:	622b      	str	r3, [r5, #32]
    sdp->rxmask = 0xFF;
 800165c:	225c      	movs	r2, #92	; 0x5c

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 800165e:	2502      	movs	r5, #2
 8001660:	54b3      	strb	r3, [r6, r2]
 8001662:	7235      	strb	r5, [r6, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001664:	b662      	cpsie	i
  /*
   * Activates the serial driver 1 using the driver default configuration.
   * PA9 and PA10 are routed to USART1.
   */
  sdStart(&SD1, NULL);
  palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(1));  /* USART1 TX. */
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	2090      	movs	r0, #144	; 0x90
 800166a:	3226      	adds	r2, #38	; 0x26
 800166c:	0089      	lsls	r1, r1, #2
 800166e:	05c0      	lsls	r0, r0, #23
 8001670:	f7ff f85e 	bl	8000730 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(1)); /* USART1 RX. */
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	2090      	movs	r0, #144	; 0x90
 8001678:	2282      	movs	r2, #130	; 0x82
 800167a:	00c9      	lsls	r1, r1, #3
 800167c:	05c0      	lsls	r0, r0, #23
 800167e:	f7ff f857 	bl	8000730 <_pal_lld_setgroupmode>
  __ASM volatile ("cpsid i" : : : "memory");
 8001682:	b672      	cpsid	i
  tp->wabase = (stkalign_t *)wsp;
 8001684:	4b39      	ldr	r3, [pc, #228]	; (800176c <main+0x49c>)
 8001686:	228e      	movs	r2, #142	; 0x8e
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001688:	0019      	movs	r1, r3
  tp->wabase = (stkalign_t *)wsp;
 800168a:	0052      	lsls	r2, r2, #1
 800168c:	509b      	str	r3, [r3, r2]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800168e:	31dc      	adds	r1, #220	; 0xdc
 8001690:	3a10      	subs	r2, #16
 8001692:	5099      	str	r1, [r3, r2]
 8001694:	4936      	ldr	r1, [pc, #216]	; (8001770 <main+0x4a0>)
 8001696:	3a20      	subs	r2, #32
 8001698:	5099      	str	r1, [r3, r2]
 800169a:	2200      	movs	r2, #0
 800169c:	21f0      	movs	r1, #240	; 0xf0
 800169e:	482d      	ldr	r0, [pc, #180]	; (8001754 <main+0x484>)
 80016a0:	505a      	str	r2, [r3, r1]
 80016a2:	310c      	adds	r1, #12
 80016a4:	5058      	str	r0, [r3, r1]
  tp->prio      = prio;
 80016a6:	2084      	movs	r0, #132	; 0x84
 80016a8:	397c      	subs	r1, #124	; 0x7c
 80016aa:	0040      	lsls	r0, r0, #1
 80016ac:	5019      	str	r1, [r3, r0]
  tp->realprio  = prio;
 80016ae:	3034      	adds	r0, #52	; 0x34
 80016b0:	5019      	str	r1, [r3, r0]
  tp->mtxlist   = NULL;
 80016b2:	31b8      	adds	r1, #184	; 0xb8
 80016b4:	e05e      	b.n	8001774 <main+0x4a4>
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	40021000 	.word	0x40021000
 80016bc:	ffa1ffff 	.word	0xffa1ffff
 80016c0:	ffbfffff 	.word	0xffbfffff
 80016c4:	40007000 	.word	0x40007000
 80016c8:	20000674 	.word	0x20000674
 80016cc:	4002001c 	.word	0x4002001c
 80016d0:	40020008 	.word	0x40020008
 80016d4:	20000494 	.word	0x20000494
 80016d8:	40020030 	.word	0x40020030
 80016dc:	40020044 	.word	0x40020044
 80016e0:	40020058 	.word	0x40020058
 80016e4:	40020000 	.word	0x40020000
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	ffff00ff 	.word	0xffff00ff
 80016f0:	ff00ffff 	.word	0xff00ffff
 80016f4:	20000400 	.word	0x20000400
 80016f8:	40005400 	.word	0x40005400
 80016fc:	080022b8 	.word	0x080022b8
 8001700:	20000434 	.word	0x20000434
 8001704:	080023ec 	.word	0x080023ec
 8001708:	2000067c 	.word	0x2000067c
 800170c:	2000068c 	.word	0x2000068c
 8001710:	080005a1 	.word	0x080005a1
 8001714:	40013800 	.word	0x40013800
 8001718:	02dc6c00 	.word	0x02dc6c00
 800171c:	40015800 	.word	0x40015800
 8001720:	000012bf 	.word	0x000012bf
 8001724:	200004bc 	.word	0x200004bc
 8001728:	20000650 	.word	0x20000650
 800172c:	200007e8 	.word	0x200007e8
 8001730:	20002000 	.word	0x20002000
 8001734:	20000658 	.word	0x20000658
 8001738:	08000561 	.word	0x08000561
 800173c:	20000530 	.word	0x20000530
 8001740:	080005f1 	.word	0x080005f1
 8001744:	0800231c 	.word	0x0800231c
 8001748:	e000ed00 	.word	0xe000ed00
 800174c:	20000578 	.word	0x20000578
 8001750:	08000721 	.word	0x08000721
 8001754:	080001b9 	.word	0x080001b9
 8001758:	0800235c 	.word	0x0800235c
 800175c:	08002350 	.word	0x08002350
 8001760:	f0420f15 	.word	0xf0420f15
 8001764:	0000c090 	.word	0x0000c090
 8001768:	48000400 	.word	0x48000400
 800176c:	200006a0 	.word	0x200006a0
 8001770:	08000ef1 	.word	0x08000ef1
 8001774:	505a      	str	r2, [r3, r1]
  tp->epending  = (eventmask_t)0;
 8001776:	3904      	subs	r1, #4
 8001778:	505a      	str	r2, [r3, r1]
  tp->state     = CH_STATE_WTSTART;
 800177a:	3221      	adds	r2, #33	; 0x21
 800177c:	32ff      	adds	r2, #255	; 0xff
 800177e:	529d      	strh	r5, [r3, r2]
  tp->name      = name;
 8001780:	4934      	ldr	r1, [pc, #208]	; (8001854 <main+0x584>)
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001782:	3202      	adds	r2, #2
 8001784:	549f      	strb	r7, [r3, r2]
  tp->name      = name;
 8001786:	3a0a      	subs	r2, #10
 8001788:	5099      	str	r1, [r3, r2]
  REG_INSERT(tp);
 800178a:	218a      	movs	r1, #138	; 0x8a
 800178c:	3a08      	subs	r2, #8
 800178e:	509c      	str	r4, [r3, r2]
 8001790:	6962      	ldr	r2, [r4, #20]
 8001792:	1c58      	adds	r0, r3, #1
 8001794:	0049      	lsls	r1, r1, #1
 8001796:	505a      	str	r2, [r3, r1]
 8001798:	30ff      	adds	r0, #255	; 0xff
  tlp->next = (thread_t *)tlp;
 800179a:	0019      	movs	r1, r3
 800179c:	6110      	str	r0, [r2, #16]
 800179e:	2294      	movs	r2, #148	; 0x94
 80017a0:	3129      	adds	r1, #41	; 0x29
 80017a2:	31ff      	adds	r1, #255	; 0xff
 80017a4:	0052      	lsls	r2, r2, #1
 80017a6:	5099      	str	r1, [r3, r2]
  tqp->next = (thread_t *)tqp;
 80017a8:	001a      	movs	r2, r3
 80017aa:	2196      	movs	r1, #150	; 0x96
 80017ac:	322d      	adds	r2, #45	; 0x2d
 80017ae:	32ff      	adds	r2, #255	; 0xff
 80017b0:	0049      	lsls	r1, r1, #1
 80017b2:	505a      	str	r2, [r3, r1]
  tqp->prev = (thread_t *)tqp;
 80017b4:	3104      	adds	r1, #4
 80017b6:	505a      	str	r2, [r3, r1]
 80017b8:	6160      	str	r0, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 80017ba:	f7ff fa41 	bl	8000c40 <chSchWakeupS.constprop.6>
  __ASM volatile ("cpsie i" : : : "memory");
 80017be:	b662      	cpsie	i
    //{
      //msg = i2cMasterReceiveTimeout(&I2CD1, 0x52, data, sizeof(data), TIME_INFINITE);
      //if (msg != MSG_OK)
        //palTogglePad(GPIOC, GPIOC_LED3);
    //}
    palTogglePad(GPIOC, GPIOC_LED3);
 80017c0:	4c25      	ldr	r4, [pc, #148]	; (8001858 <main+0x588>)
 80017c2:	35ff      	adds	r5, #255	; 0xff
 80017c4:	35ff      	adds	r5, #255	; 0xff
 80017c6:	6963      	ldr	r3, [r4, #20]
 80017c8:	406b      	eors	r3, r5
 80017ca:	6163      	str	r3, [r4, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
 80017ce:	4923      	ldr	r1, [pc, #140]	; (800185c <main+0x58c>)
 80017d0:	2008      	movs	r0, #8
 80017d2:	f7ff fa7d 	bl	8000cd0 <chSchGoSleepTimeoutS>
  __ASM volatile ("cpsie i" : : : "memory");
 80017d6:	b662      	cpsie	i
 80017d8:	e7f5      	b.n	80017c6 <main+0x4f6>
    i2cp->txdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_M2P;
 80017da:	3399      	adds	r3, #153	; 0x99
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    i2cp->rxdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_P2M;
 80017de:	3b10      	subs	r3, #16
 80017e0:	623b      	str	r3, [r7, #32]
      rccResetI2C1();
 80017e2:	465b      	mov	r3, fp
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	4659      	mov	r1, fp
 80017ea:	039b      	lsls	r3, r3, #14
 80017ec:	431a      	orrs	r2, r3
 80017ee:	610a      	str	r2, [r1, #16]
 80017f0:	610d      	str	r5, [r1, #16]
      rccEnableI2C1(true);
 80017f2:	69ca      	ldr	r2, [r1, #28]
        b = dmaStreamAllocate(i2cp->dmarx,
 80017f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
      rccEnableI2C1(true);
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61cb      	str	r3, [r1, #28]
        b = dmaStreamAllocate(i2cp->dmarx,
 80017fa:	f7ff f809 	bl	8000810 <dmaStreamAllocate.constprop.23>
        b = dmaStreamAllocate(i2cp->dmatx,
 80017fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001800:	f7ff f806 	bl	8000810 <dmaStreamAllocate.constprop.23>
        i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	6a3a      	ldr	r2, [r7, #32]
 8001808:	015b      	lsls	r3, r3, #5
 800180a:	431a      	orrs	r2, r3
 800180c:	623a      	str	r2, [r7, #32]
        i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8001810:	21c0      	movs	r1, #192	; 0xc0
 8001812:	4313      	orrs	r3, r2
 8001814:	22c5      	movs	r2, #197	; 0xc5
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
 8001818:	4643      	mov	r3, r8
 800181a:	0092      	lsls	r2, r2, #2
 800181c:	589b      	ldr	r3, [r3, r2]
 800181e:	0609      	lsls	r1, r1, #24
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	430b      	orrs	r3, r1
 8001826:	4641      	mov	r1, r8
 8001828:	508b      	str	r3, [r1, r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	21c0      	movs	r1, #192	; 0xc0
 800182e:	4642      	mov	r2, r8
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	0049      	lsls	r1, r1, #1
 8001834:	5053      	str	r3, [r2, r1]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <main+0x590>)
 800183c:	6851      	ldr	r1, [r2, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	430b      	orrs	r3, r1
 8001842:	e6d8      	b.n	80015f6 <main+0x326>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	4a07      	ldr	r2, [pc, #28]	; (8001864 <main+0x594>)
 8001848:	01db      	lsls	r3, r3, #7
 800184a:	6991      	ldr	r1, [r2, #24]
 800184c:	430b      	orrs	r3, r1
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	e6f3      	b.n	800163a <main+0x36a>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	08002364 	.word	0x08002364
 8001858:	48000800 	.word	0x48000800
 800185c:	00002710 	.word	0x00002710
 8001860:	0000c090 	.word	0x0000c090
 8001864:	40021000 	.word	0x40021000
	...

08001870 <NMI_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001870:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8001874:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001876:	f383 8809 	msr	PSP, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800187a:	b662      	cpsie	i
}
 800187c:	4770      	bx	lr
 800187e:	46c0      	nop			; (mov r8, r8)

08001880 <chThdExit>:
void chThdExit(msg_t msg) {
 8001880:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8001882:	b672      	cpsid	i
  thread_t *tp = currp;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <chThdExit+0x44>)
 8001886:	699c      	ldr	r4, [r3, #24]
  while (list_notempty(&tp->waiting)) {
 8001888:	0025      	movs	r5, r4
  tp->u.exitcode = msg;
 800188a:	6260      	str	r0, [r4, #36]	; 0x24
  return (bool)(tlp->next != (thread_t *)tlp);
 800188c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800188e:	3528      	adds	r5, #40	; 0x28
 8001890:	42a8      	cmp	r0, r5
 8001892:	d006      	beq.n	80018a2 <chThdExit+0x22>
  tlp->next = tp->queue.next;
 8001894:	6803      	ldr	r3, [r0, #0]
 8001896:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001898:	f7fe fef2 	bl	8000680 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800189c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800189e:	42a8      	cmp	r0, r5
 80018a0:	d1f8      	bne.n	8001894 <chThdExit+0x14>
  if ((tp->refs == (trefs_t)0) &&
 80018a2:	2322      	movs	r3, #34	; 0x22
 80018a4:	5ce3      	ldrb	r3, [r4, r3]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d108      	bne.n	80018bc <chThdExit+0x3c>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 80018aa:	3321      	adds	r3, #33	; 0x21
  if ((tp->refs == (trefs_t)0) &&
 80018ac:	5ce3      	ldrb	r3, [r4, r3]
 80018ae:	079b      	lsls	r3, r3, #30
 80018b0:	d104      	bne.n	80018bc <chThdExit+0x3c>
    REG_REMOVE(tp);
 80018b2:	6922      	ldr	r2, [r4, #16]
 80018b4:	6963      	ldr	r3, [r4, #20]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	6922      	ldr	r2, [r4, #16]
 80018ba:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 80018bc:	200f      	movs	r0, #15
 80018be:	f7ff f9ef 	bl	8000ca0 <chSchGoSleepS>
}
 80018c2:	bd70      	pop	{r4, r5, r6, pc}
 80018c4:	200004bc 	.word	0x200004bc
	...

080018d0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <chSchDoReschedule+0x38>)
void chSchDoReschedule(void) {
 80018d2:	b570      	push	{r4, r5, r6, lr}
  thread_t *tp = tqp->next;
 80018d4:	6810      	ldr	r0, [r2, #0]
  thread_t *otp = currp;
 80018d6:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 80018d8:	6803      	ldr	r3, [r0, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80018da:	2420      	movs	r4, #32
  tqp->next->queue.prev = (thread_t *)tqp;
 80018dc:	605a      	str	r2, [r3, #4]
  tqp->next             = tp->queue.next;
 80018de:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80018e0:	6190      	str	r0, [r2, #24]
  currp->state = CH_STATE_CURRENT;
 80018e2:	2201      	movs	r2, #1
  tp->state = CH_STATE_READY;
 80018e4:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 80018e6:	5502      	strb	r2, [r0, r4]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80018e8:	688a      	ldr	r2, [r1, #8]
  tp->state = CH_STATE_READY;
 80018ea:	550d      	strb	r5, [r1, r4]
 80018ec:	e000      	b.n	80018f0 <chSchDoReschedule+0x20>
 80018ee:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80018f0:	689c      	ldr	r4, [r3, #8]
 80018f2:	42a2      	cmp	r2, r4
 80018f4:	d3fb      	bcc.n	80018ee <chSchDoReschedule+0x1e>
  tp->queue.prev             = cp->queue.prev;
 80018f6:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 80018f8:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 80018fa:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 80018fc:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80018fe:	6059      	str	r1, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001900:	f7fe fc4a 	bl	8000198 <_port_switch>
}
 8001904:	bd70      	pop	{r4, r5, r6, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	200004bc 	.word	0x200004bc
 800190c:	00000000 	.word	0x00000000

08001910 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
 8001910:	21bc      	movs	r1, #188	; 0xbc
 8001912:	4a47      	ldr	r2, [pc, #284]	; (8001a30 <__early_init+0x120>)
 8001914:	03c9      	lsls	r1, r1, #15
 8001916:	6a93      	ldr	r3, [r2, #40]	; 0x28
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8001918:	b530      	push	{r4, r5, lr}
  rccResetAHB(STM32_GPIO_EN_MASK);
 800191a:	430b      	orrs	r3, r1
 800191c:	6293      	str	r3, [r2, #40]	; 0x28
 800191e:	2300      	movs	r3, #0
 8001920:	6293      	str	r3, [r2, #40]	; 0x28
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 8001922:	6950      	ldr	r0, [r2, #20]
  gpiop->MODER   = config->moder;
 8001924:	24a0      	movs	r4, #160	; 0xa0
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 8001926:	4301      	orrs	r1, r0
 8001928:	6151      	str	r1, [r2, #20]
  gpiop->OSPEEDR = config->ospeedr;
 800192a:	20fc      	movs	r0, #252	; 0xfc
  gpiop->OTYPER  = config->otyper;
 800192c:	2190      	movs	r1, #144	; 0x90
  gpiop->OSPEEDR = config->ospeedr;
 800192e:	0600      	lsls	r0, r0, #24
  gpiop->OTYPER  = config->otyper;
 8001930:	05c9      	lsls	r1, r1, #23
 8001932:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001934:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8001936:	483f      	ldr	r0, [pc, #252]	; (8001a34 <__early_init+0x124>)
  gpiop->MODER   = config->moder;
 8001938:	05a4      	lsls	r4, r4, #22
  gpiop->PUPDR   = config->pupdr;
 800193a:	60c8      	str	r0, [r1, #12]
  gpiop->ODR     = config->odr;
 800193c:	483e      	ldr	r0, [pc, #248]	; (8001a38 <__early_init+0x128>)
  gpiop->OSPEEDR = config->ospeedr;
 800193e:	4d3f      	ldr	r5, [pc, #252]	; (8001a3c <__early_init+0x12c>)
  gpiop->ODR     = config->odr;
 8001940:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8001942:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001944:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001946:	600c      	str	r4, [r1, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8001948:	24fc      	movs	r4, #252	; 0xfc
  gpiop->OTYPER  = config->otyper;
 800194a:	493d      	ldr	r1, [pc, #244]	; (8001a40 <__early_init+0x130>)
  gpiop->OSPEEDR = config->ospeedr;
 800194c:	00a4      	lsls	r4, r4, #2
  gpiop->OTYPER  = config->otyper;
 800194e:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001950:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8001952:	4c3c      	ldr	r4, [pc, #240]	; (8001a44 <__early_init+0x134>)
 8001954:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8001956:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8001958:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800195a:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800195c:	600b      	str	r3, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 800195e:	493a      	ldr	r1, [pc, #232]	; (8001a48 <__early_init+0x138>)
 8001960:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001962:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8001964:	4d39      	ldr	r5, [pc, #228]	; (8001a4c <__early_init+0x13c>)
 8001966:	60cd      	str	r5, [r1, #12]
  gpiop->ODR     = config->odr;
 8001968:	4d39      	ldr	r5, [pc, #228]	; (8001a50 <__early_init+0x140>)
 800196a:	614d      	str	r5, [r1, #20]
  gpiop->MODER   = config->moder;
 800196c:	25a0      	movs	r5, #160	; 0xa0
 800196e:	02ed      	lsls	r5, r5, #11
  gpiop->AFRL    = config->afrl;
 8001970:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001972:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001974:	600d      	str	r5, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8001976:	4937      	ldr	r1, [pc, #220]	; (8001a54 <__early_init+0x144>)
 8001978:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800197a:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800197c:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 800197e:	6148      	str	r0, [r1, #20]
  gpiop->PUPDR   = config->pupdr;
 8001980:	4c35      	ldr	r4, [pc, #212]	; (8001a58 <__early_init+0x148>)
  gpiop->AFRL    = config->afrl;
 8001982:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001984:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001986:	600b      	str	r3, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8001988:	4934      	ldr	r1, [pc, #208]	; (8001a5c <__early_init+0x14c>)
 800198a:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800198c:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800198e:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8001990:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8001992:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001994:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001996:	600b      	str	r3, [r1, #0]
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001998:	2101      	movs	r1, #1
 800199a:	6813      	ldr	r3, [r2, #0]
 800199c:	430b      	orrs	r3, r1
 800199e:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80019a0:	0013      	movs	r3, r2
 80019a2:	3101      	adds	r1, #1
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4211      	tst	r1, r2
 80019a8:	d0fc      	beq.n	80019a4 <__early_init+0x94>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80019aa:	2103      	movs	r1, #3
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	438a      	bics	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80019b2:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <__early_init+0x120>)
 80019b4:	3109      	adds	r1, #9
 80019b6:	6853      	ldr	r3, [r2, #4]
 80019b8:	400b      	ands	r3, r1
 80019ba:	d1fc      	bne.n	80019b6 <__early_init+0xa6>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80019bc:	21f9      	movs	r1, #249	; 0xf9
 80019be:	6810      	ldr	r0, [r2, #0]
 80019c0:	4001      	ands	r1, r0
 80019c2:	6011      	str	r1, [r2, #0]
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_HSI14_ENABLED
  /* HSI14 activation.*/
  RCC->CR2 |= RCC_CR2_HSI14ON;
 80019c4:	2101      	movs	r1, #1
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80019c6:	6053      	str	r3, [r2, #4]
  RCC->CR2 |= RCC_CR2_HSI14ON;
 80019c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80019ca:	430b      	orrs	r3, r1
 80019cc:	6353      	str	r3, [r2, #52]	; 0x34
  while (!(RCC->CR2 & RCC_CR2_HSI14RDY))
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <__early_init+0x120>)
 80019d0:	3101      	adds	r1, #1
 80019d2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80019d4:	4219      	tst	r1, r3
 80019d6:	d0fc      	beq.n	80019d2 <__early_init+0xc2>
    ;                                       /* Waits until HSI48 is stable. */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80019d8:	2101      	movs	r1, #1
 80019da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80019dc:	430b      	orrs	r3, r1
 80019de:	6253      	str	r3, [r2, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80019e0:	4a13      	ldr	r2, [pc, #76]	; (8001a30 <__early_init+0x120>)
 80019e2:	3101      	adds	r1, #1
 80019e4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80019e6:	4219      	tst	r1, r3
 80019e8:	d0fc      	beq.n	80019e4 <__early_init+0xd4>
#endif

  /* Clock settings.*/
  /* CFGR2 must be configured first since CFGR value could change CFGR2 */
  RCC->CFGR2 = STM32_PREDIV;
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 80019ea:	21a0      	movs	r1, #160	; 0xa0
  RCC->CFGR2 = STM32_PREDIV;
 80019ec:	2300      	movs	r3, #0
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 80019ee:	0389      	lsls	r1, r1, #14
  RCC->CFGR2 = STM32_PREDIV;
 80019f0:	62d3      	str	r3, [r2, #44]	; 0x2c
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 80019f2:	6051      	str	r1, [r2, #4]
               STM32_PLLSRC   | STM32_PPRE   | STM32_HPRE |
               ((STM32_PREDIV & STM32_PLLXTPRE_MASK) << STM32_PLLXTPRE_OFFSET);
#if STM32_CECSW == STM32_CECSW_OFF
  RCC->CFGR3 = STM32_USBSW  | STM32_I2C1SW | STM32_USART1SW;
#else
  RCC->CFGR3 = STM32_USBSW  | STM32_CECSW  | STM32_I2C1SW | STM32_USART1SW;
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	6811      	ldr	r1, [r2, #0]
 80019fa:	045b      	lsls	r3, r3, #17
 80019fc:	430b      	orrs	r3, r1
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80019fe:	2180      	movs	r1, #128	; 0x80
  RCC->CR   |= RCC_CR_PLLON;
 8001a00:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <__early_init+0x120>)
 8001a04:	0489      	lsls	r1, r1, #18
 8001a06:	6813      	ldr	r3, [r2, #0]
 8001a08:	420b      	tst	r3, r1
 8001a0a:	d0fc      	beq.n	8001a06 <__early_init+0xf6>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001a0c:	2111      	movs	r1, #17
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <__early_init+0x150>)
 8001a10:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001a12:	6853      	ldr	r3, [r2, #4]
 8001a14:	390f      	subs	r1, #15
 8001a16:	430b      	orrs	r3, r1
 8001a18:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <__early_init+0x120>)
 8001a1c:	310a      	adds	r1, #10
 8001a1e:	6853      	ldr	r3, [r2, #4]
 8001a20:	400b      	ands	r3, r1
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d1fb      	bne.n	8001a1e <__early_init+0x10e>
    ;                                       /* Waits selection complete.    */
#endif

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8001a26:	2101      	movs	r1, #1
 8001a28:	6993      	ldr	r3, [r2, #24]
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	6193      	str	r3, [r2, #24]

  stm32_gpio_init();
  stm32_clock_init();
}
 8001a2e:	bd30      	pop	{r4, r5, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	65555554 	.word	0x65555554
 8001a38:	0000ffff 	.word	0x0000ffff
 8001a3c:	f00f0000 	.word	0xf00f0000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	55555555 	.word	0x55555555
 8001a48:	48000800 	.word	0x48000800
 8001a4c:	05505555 	.word	0x05505555
 8001a50:	0000fcff 	.word	0x0000fcff
 8001a54:	48000c00 	.word	0x48000c00
 8001a58:	55555550 	.word	0x55555550
 8001a5c:	48001400 	.word	0x48001400
 8001a60:	40022000 	.word	0x40022000
	...

08001a70 <VectorAC>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a72:	4647      	mov	r7, r8
 8001a74:	46ce      	mov	lr, r9
  USART_TypeDef *u = sdp->usart;
 8001a76:	4c58      	ldr	r4, [pc, #352]	; (8001bd8 <VectorAC+0x168>)
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001a78:	b580      	push	{r7, lr}
  USART_TypeDef *u = sdp->usart;
 8001a7a:	6d66      	ldr	r6, [r4, #84]	; 0x54
  OSAL_IRQ_PROLOGUE();
 8001a7c:	46f0      	mov	r8, lr
  uint32_t cr1 = u->CR1;
 8001a7e:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
 8001a80:	69f5      	ldr	r5, [r6, #28]
  u->ICR = isr;
 8001a82:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 8001a84:	072b      	lsls	r3, r5, #28
 8001a86:	d11d      	bne.n	8001ac4 <VectorAC+0x54>
  if (isr & USART_ISR_LBDF) {
 8001a88:	05eb      	lsls	r3, r5, #23
 8001a8a:	d431      	bmi.n	8001af0 <VectorAC+0x80>
  if (isr & USART_ISR_RXNE) {
 8001a8c:	06ab      	lsls	r3, r5, #26
 8001a8e:	d437      	bmi.n	8001b00 <VectorAC+0x90>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	423b      	tst	r3, r7
 8001a94:	d001      	beq.n	8001a9a <VectorAC+0x2a>
 8001a96:	422b      	tst	r3, r5
 8001a98:	d15a      	bne.n	8001b50 <VectorAC+0xe0>
  if (isr & USART_ISR_TC) {
 8001a9a:	066b      	lsls	r3, r5, #25
 8001a9c:	d509      	bpl.n	8001ab2 <VectorAC+0x42>
 8001a9e:	b672      	cpsid	i
    if (oqIsEmptyI(&sdp->oqueue))
 8001aa0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001aa2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d100      	bne.n	8001aaa <VectorAC+0x3a>
 8001aa8:	e074      	b.n	8001b94 <VectorAC+0x124>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001aaa:	2340      	movs	r3, #64	; 0x40
 8001aac:	439f      	bics	r7, r3
 8001aae:	6037      	str	r7, [r6, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ab0:	b662      	cpsie	i
  if (lr != (regarm_t)0xFFFFFFF1U) {
 8001ab2:	4643      	mov	r3, r8
 8001ab4:	330f      	adds	r3, #15
 8001ab6:	d001      	beq.n	8001abc <VectorAC+0x4c>
 8001ab8:	f7fe fd7a 	bl	80005b0 <_port_irq_epilogue.part.0>
}
 8001abc:	bc0c      	pop	{r2, r3}
 8001abe:	4690      	mov	r8, r2
 8001ac0:	4699      	mov	r9, r3
 8001ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (isr & USART_ISR_ORE)
 8001ac4:	0728      	lsls	r0, r5, #28
    sts |= SD_OVERRUN_ERROR;
 8001ac6:	0fc0      	lsrs	r0, r0, #31
 8001ac8:	01c0      	lsls	r0, r0, #7
  if (isr & USART_ISR_PE)
 8001aca:	07eb      	lsls	r3, r5, #31
 8001acc:	d501      	bpl.n	8001ad2 <VectorAC+0x62>
    sts |= SD_PARITY_ERROR;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	4318      	orrs	r0, r3
  if (isr & USART_ISR_FE)
 8001ad2:	07ab      	lsls	r3, r5, #30
 8001ad4:	d501      	bpl.n	8001ada <VectorAC+0x6a>
    sts |= SD_FRAMING_ERROR;
 8001ad6:	2340      	movs	r3, #64	; 0x40
 8001ad8:	4318      	orrs	r0, r3
  if (isr & USART_ISR_NE)
 8001ada:	076b      	lsls	r3, r5, #29
 8001adc:	d502      	bpl.n	8001ae4 <VectorAC+0x74>
    sts |= SD_NOISE_ERROR;
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4318      	orrs	r0, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001ae6:	f7fe fde3 	bl	80006b0 <chEvtBroadcastFlagsI.constprop.14>
  __ASM volatile ("cpsie i" : : : "memory");
 8001aea:	b662      	cpsie	i
  if (isr & USART_ISR_LBDF) {
 8001aec:	05eb      	lsls	r3, r5, #23
 8001aee:	d5cd      	bpl.n	8001a8c <VectorAC+0x1c>
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
 8001af2:	2080      	movs	r0, #128	; 0x80
 8001af4:	0080      	lsls	r0, r0, #2
 8001af6:	f7fe fddb 	bl	80006b0 <chEvtBroadcastFlagsI.constprop.14>
  __ASM volatile ("cpsie i" : : : "memory");
 8001afa:	b662      	cpsie	i
  if (isr & USART_ISR_RXNE) {
 8001afc:	06ab      	lsls	r3, r5, #26
 8001afe:	d5c7      	bpl.n	8001a90 <VectorAC+0x20>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 8001b02:	235c      	movs	r3, #92	; 0x5c
 8001b04:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 8001b06:	5ce3      	ldrb	r3, [r4, r3]
 8001b08:	401a      	ands	r2, r3
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8001b0a:	6963      	ldr	r3, [r4, #20]
 8001b0c:	4691      	mov	r9, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d048      	beq.n	8001ba4 <VectorAC+0x134>
  if (!iqIsFullI(iqp)) {
 8001b12:	6a23      	ldr	r3, [r4, #32]
 8001b14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d048      	beq.n	8001bac <VectorAC+0x13c>
    iqp->q_counter++;
 8001b1a:	6962      	ldr	r2, [r4, #20]
 8001b1c:	3201      	adds	r2, #1
 8001b1e:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	6222      	str	r2, [r4, #32]
 8001b24:	464a      	mov	r2, r9
 8001b26:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8001b28:	6a23      	ldr	r3, [r4, #32]
 8001b2a:	69e2      	ldr	r2, [r4, #28]
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d301      	bcc.n	8001b34 <VectorAC+0xc4>
      iqp->q_wrptr = iqp->q_buffer;
 8001b30:	69a3      	ldr	r3, [r4, #24]
 8001b32:	6223      	str	r3, [r4, #32]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001b34:	0023      	movs	r3, r4
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001b36:	68e0      	ldr	r0, [r4, #12]
 8001b38:	330c      	adds	r3, #12
 8001b3a:	4298      	cmp	r0, r3
 8001b3c:	d006      	beq.n	8001b4c <VectorAC+0xdc>
  tqp->next             = tp->queue.next;
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	60e2      	str	r2, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001b42:	6053      	str	r3, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001b44:	2300      	movs	r3, #0
 8001b46:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001b48:	f7fe fd9a 	bl	8000680 <chSchReadyI>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b4c:	b662      	cpsie	i
 8001b4e:	e79f      	b.n	8001a90 <VectorAC+0x20>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b50:	b672      	cpsid	i
  if (!oqIsEmptyI(oqp)) {
 8001b52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001b54:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d030      	beq.n	8001bbc <VectorAC+0x14c>
    oqp->q_counter++;
 8001b5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b5c:	3201      	adds	r2, #1
 8001b5e:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	64a2      	str	r2, [r4, #72]	; 0x48
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4699      	mov	r9, r3
    if (oqp->q_rdptr >= oqp->q_top) {
 8001b68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d301      	bcc.n	8001b72 <VectorAC+0x102>
      oqp->q_rdptr = oqp->q_buffer;
 8001b6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b70:	64a3      	str	r3, [r4, #72]	; 0x48
 8001b72:	0023      	movs	r3, r4
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001b74:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001b76:	3330      	adds	r3, #48	; 0x30
 8001b78:	4298      	cmp	r0, r3
 8001b7a:	d006      	beq.n	8001b8a <VectorAC+0x11a>
  tqp->next             = tp->queue.next;
 8001b7c:	6802      	ldr	r2, [r0, #0]
 8001b7e:	6322      	str	r2, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8001b80:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = msg;
 8001b82:	2300      	movs	r3, #0
 8001b84:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001b86:	f7fe fd7b 	bl	8000680 <chSchReadyI>
      u->TDR = b;
 8001b8a:	464b      	mov	r3, r9
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	8533      	strh	r3, [r6, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8001b90:	b662      	cpsie	i
 8001b92:	e782      	b.n	8001a9a <VectorAC+0x2a>
    if (oqIsEmptyI(&sdp->oqueue))
 8001b94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d100      	bne.n	8001b9c <VectorAC+0x12c>
 8001b9a:	e786      	b.n	8001aaa <VectorAC+0x3a>
 8001b9c:	2010      	movs	r0, #16
 8001b9e:	f7fe fd87 	bl	80006b0 <chEvtBroadcastFlagsI.constprop.14>
 8001ba2:	e782      	b.n	8001aaa <VectorAC+0x3a>
 8001ba4:	2004      	movs	r0, #4
 8001ba6:	f7fe fd83 	bl	80006b0 <chEvtBroadcastFlagsI.constprop.14>
 8001baa:	e7b2      	b.n	8001b12 <VectorAC+0xa2>
  if (!iqIsFullI(iqp)) {
 8001bac:	6962      	ldr	r2, [r4, #20]
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	d0b3      	beq.n	8001b1a <VectorAC+0xaa>
 8001bb2:	2080      	movs	r0, #128	; 0x80
 8001bb4:	00c0      	lsls	r0, r0, #3
 8001bb6:	f7fe fd7b 	bl	80006b0 <chEvtBroadcastFlagsI.constprop.14>
 8001bba:	e7c7      	b.n	8001b4c <VectorAC+0xdc>
  if (!oqIsEmptyI(oqp)) {
 8001bbc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001bbe:	2a00      	cmp	r2, #0
 8001bc0:	d0cb      	beq.n	8001b5a <VectorAC+0xea>
 8001bc2:	2008      	movs	r0, #8
 8001bc4:	f7fe fd74 	bl	80006b0 <chEvtBroadcastFlagsI.constprop.14>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8001bc8:	23c0      	movs	r3, #192	; 0xc0
 8001bca:	003a      	movs	r2, r7
 8001bcc:	439a      	bics	r2, r3
 8001bce:	0013      	movs	r3, r2
 8001bd0:	2240      	movs	r2, #64	; 0x40
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	6033      	str	r3, [r6, #0]
 8001bd6:	e7db      	b.n	8001b90 <VectorAC+0x120>
 8001bd8:	20000434 	.word	0x20000434
 8001bdc:	00000000 	.word	0x00000000

08001be0 <Vector7C>:
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001be0:	2180      	movs	r1, #128	; 0x80
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be4:	46ce      	mov	lr, r9
 8001be6:	4647      	mov	r7, r8
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001be8:	05c9      	lsls	r1, r1, #23
 8001bea:	690b      	ldr	r3, [r1, #16]
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001bec:	b580      	push	{r7, lr}
  OSAL_IRQ_PROLOGUE();
 8001bee:	46f1      	mov	r9, lr
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001bf0:	079b      	lsls	r3, r3, #30
 8001bf2:	d408      	bmi.n	8001c06 <Vector7C+0x26>
 8001bf4:	464b      	mov	r3, r9
 8001bf6:	330f      	adds	r3, #15
 8001bf8:	d001      	beq.n	8001bfe <Vector7C+0x1e>
 8001bfa:	f7fe fcd9 	bl	80005b0 <_port_irq_epilogue.part.0>
}
 8001bfe:	bc0c      	pop	{r2, r3}
 8001c00:	4690      	mov	r8, r2
 8001c02:	4699      	mov	r9, r3
 8001c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    STM32_ST_TIM->SR = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	610b      	str	r3, [r1, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0a:	b672      	cpsid	i
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8001c0c:	4c1b      	ldr	r4, [pc, #108]	; (8001c7c <Vector7C+0x9c>)
 8001c0e:	4688      	mov	r8, r1

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001c10:	0026      	movs	r6, r4
  vtp = ch.vtlist.next;
 8001c12:	69e3      	ldr	r3, [r4, #28]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001c14:	361c      	adds	r6, #28
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	4641      	mov	r1, r8
 8001c1a:	6a48      	ldr	r0, [r1, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8001c1c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8001c1e:	1a45      	subs	r5, r0, r1
    if (nowdelta < vtp->delta) {
 8001c20:	4295      	cmp	r5, r2
 8001c22:	d317      	bcc.n	8001c54 <Vector7C+0x74>
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8001c24:	2700      	movs	r7, #0
 8001c26:	e008      	b.n	8001c3a <Vector7C+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c28:	b662      	cpsie	i
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8001c2a:	6918      	ldr	r0, [r3, #16]
 8001c2c:	4788      	blx	r1
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2e:	b672      	cpsid	i
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8001c30:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4295      	cmp	r5, r2
 8001c36:	d3ef      	bcc.n	8001c18 <Vector7C+0x38>
 8001c38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      ch.vtlist.lasttime += vtp->delta;
 8001c3a:	1889      	adds	r1, r1, r2
      nowdelta -= vtp->delta;
 8001c3c:	1aad      	subs	r5, r5, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001c3e:	681a      	ldr	r2, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 8001c40:	62a1      	str	r1, [r4, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001c42:	6056      	str	r6, [r2, #4]
      fn = vtp->func;
 8001c44:	68d9      	ldr	r1, [r3, #12]
      ch.vtlist.next = vtp->next;
 8001c46:	61e2      	str	r2, [r4, #28]
      vtp->func = NULL;
 8001c48:	60df      	str	r7, [r3, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001c4a:	42b2      	cmp	r2, r6
 8001c4c:	d1ec      	bne.n	8001c28 <Vector7C+0x48>
  STM32_ST_TIM->DIER = 0;
 8001c4e:	4642      	mov	r2, r8
 8001c50:	60d7      	str	r7, [r2, #12]
 8001c52:	e7e9      	b.n	8001c28 <Vector7C+0x48>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001c54:	0021      	movs	r1, r4
 8001c56:	69e2      	ldr	r2, [r4, #28]
 8001c58:	311c      	adds	r1, #28
 8001c5a:	428a      	cmp	r2, r1
 8001c5c:	d00a      	beq.n	8001c74 <Vector7C+0x94>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8001c5e:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 8001c60:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8001c62:	1b4d      	subs	r5, r1, r5
 8001c64:	6095      	str	r5, [r2, #8]
  return systime + (systime_t)interval;
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d305      	bcc.n	8001c78 <Vector7C+0x98>
 8001c6c:	1818      	adds	r0, r3, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	05db      	lsls	r3, r3, #23
 8001c72:	6358      	str	r0, [r3, #52]	; 0x34
  __ASM volatile ("cpsie i" : : : "memory");
 8001c74:	b662      	cpsie	i
 8001c76:	e7bd      	b.n	8001bf4 <Vector7C+0x14>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e7f7      	b.n	8001c6c <Vector7C+0x8c>
 8001c7c:	200004bc 	.word	0x200004bc

08001c80 <Vector9C>:
  if (isr & I2C_ERROR_MASK)
 8001c80:	21fc      	movs	r1, #252	; 0xfc
OSAL_IRQ_HANDLER(STM32_I2C1_GLOBAL_HANDLER) {
 8001c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c84:	46c6      	mov	lr, r8
  uint32_t isr = I2CD1.i2c->ISR;
 8001c86:	4a89      	ldr	r2, [pc, #548]	; (8001eac <Vector9C+0x22c>)
  if (isr & I2C_ERROR_MASK)
 8001c88:	0189      	lsls	r1, r1, #6
  uint32_t isr = I2CD1.i2c->ISR;
 8001c8a:	6b10      	ldr	r0, [r2, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_I2C1_GLOBAL_HANDLER) {
 8001c8c:	b500      	push	{lr}
  uint32_t isr = I2CD1.i2c->ISR;
 8001c8e:	6983      	ldr	r3, [r0, #24]
  OSAL_IRQ_PROLOGUE();
 8001c90:	4674      	mov	r4, lr
  I2CD1.i2c->ICR = isr;
 8001c92:	61c3      	str	r3, [r0, #28]
  if (isr & I2C_ERROR_MASK)
 8001c94:	4019      	ands	r1, r3
 8001c96:	d127      	bne.n	8001ce8 <Vector9C+0x68>
  else if (isr & I2C_INT_MASK)
 8001c98:	25fe      	movs	r5, #254	; 0xfe
 8001c9a:	421d      	tst	r5, r3
 8001c9c:	d106      	bne.n	8001cac <Vector9C+0x2c>
 8001c9e:	340f      	adds	r4, #15
 8001ca0:	d001      	beq.n	8001ca6 <Vector9C+0x26>
 8001ca2:	f7fe fc85 	bl	80005b0 <_port_irq_epilogue.part.0>
}
 8001ca6:	bc04      	pop	{r2}
 8001ca8:	4690      	mov	r8, r2
 8001caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((isr & I2C_ISR_NACKF) != 0U) {
 8001cac:	06dd      	lsls	r5, r3, #27
 8001cae:	d456      	bmi.n	8001d5e <Vector9C+0xde>
  if ((isr & I2C_ISR_TCR) != 0U) {
 8001cb0:	0619      	lsls	r1, r3, #24
 8001cb2:	d400      	bmi.n	8001cb6 <Vector9C+0x36>
 8001cb4:	e088      	b.n	8001dc8 <Vector9C+0x148>
    if (i2cp->state == I2C_ACTIVE_TX) {
 8001cb6:	7813      	ldrb	r3, [r2, #0]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d100      	bne.n	8001cbe <Vector9C+0x3e>
 8001cbc:	e0ad      	b.n	8001e1a <Vector9C+0x19a>
  n = i2c_lld_get_rxbytes(i2cp);
 8001cbe:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	685d      	ldr	r5, [r3, #4]
  if (n > 255U) {
 8001cc4:	2dff      	cmp	r5, #255	; 0xff
 8001cc6:	d900      	bls.n	8001cca <Vector9C+0x4a>
 8001cc8:	e0a2      	b.n	8001e10 <Vector9C+0x190>
    reload = 0U;
 8001cca:	2600      	movs	r6, #0
 8001ccc:	042d      	lsls	r5, r5, #16
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8001cce:	2380      	movs	r3, #128	; 0x80
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001cd0:	6852      	ldr	r2, [r2, #4]
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	6892      	ldr	r2, [r2, #8]
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001cd6:	6841      	ldr	r1, [r0, #4]
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8001cd8:	4313      	orrs	r3, r2
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001cda:	4a75      	ldr	r2, [pc, #468]	; (8001eb0 <Vector9C+0x230>)
 8001cdc:	400a      	ands	r2, r1
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	4333      	orrs	r3, r6
 8001ce2:	432b      	orrs	r3, r5
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001ce4:	6043      	str	r3, [r0, #4]
 8001ce6:	e7da      	b.n	8001c9e <Vector9C+0x1e>
  dmaStreamDisable(i2cp->dmatx);
 8001ce8:	270f      	movs	r7, #15
 8001cea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cec:	684d      	ldr	r5, [r1, #4]
 8001cee:	6828      	ldr	r0, [r5, #0]
 8001cf0:	43b8      	bics	r0, r7
 8001cf2:	6028      	str	r0, [r5, #0]
 8001cf4:	7c0d      	ldrb	r5, [r1, #16]
 8001cf6:	6808      	ldr	r0, [r1, #0]
 8001cf8:	210e      	movs	r1, #14
 8001cfa:	000e      	movs	r6, r1
 8001cfc:	40ae      	lsls	r6, r5
 8001cfe:	6046      	str	r6, [r0, #4]
  dmaStreamDisable(i2cp->dmarx);
 8001d00:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001d02:	6846      	ldr	r6, [r0, #4]
 8001d04:	6835      	ldr	r5, [r6, #0]
 8001d06:	43bd      	bics	r5, r7
 8001d08:	6035      	str	r5, [r6, #0]
 8001d0a:	6805      	ldr	r5, [r0, #0]
 8001d0c:	7c00      	ldrb	r0, [r0, #16]
 8001d0e:	4081      	lsls	r1, r0
 8001d10:	6069      	str	r1, [r5, #4]
 8001d12:	6891      	ldr	r1, [r2, #8]
  if (isr & I2C_ISR_BERR)
 8001d14:	05d8      	lsls	r0, r3, #23
 8001d16:	d502      	bpl.n	8001d1e <Vector9C+0x9e>
    i2cp->errors |= I2C_BUS_ERROR;
 8001d18:	2001      	movs	r0, #1
 8001d1a:	4301      	orrs	r1, r0
 8001d1c:	6091      	str	r1, [r2, #8]
  if (isr & I2C_ISR_ARLO)
 8001d1e:	0598      	lsls	r0, r3, #22
 8001d20:	d502      	bpl.n	8001d28 <Vector9C+0xa8>
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8001d22:	2002      	movs	r0, #2
 8001d24:	4301      	orrs	r1, r0
 8001d26:	6091      	str	r1, [r2, #8]
 8001d28:	2080      	movs	r0, #128	; 0x80
 8001d2a:	0140      	lsls	r0, r0, #5
 8001d2c:	4018      	ands	r0, r3
  if (isr & I2C_ISR_OVR)
 8001d2e:	055b      	lsls	r3, r3, #21
 8001d30:	d510      	bpl.n	8001d54 <Vector9C+0xd4>
    i2cp->errors |= I2C_OVERRUN;
 8001d32:	2308      	movs	r3, #8
 8001d34:	4319      	orrs	r1, r3
 8001d36:	6091      	str	r1, [r2, #8]
  if (isr & I2C_ISR_TIMEOUT)
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	d141      	bne.n	8001dc0 <Vector9C+0x140>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d3c:	b672      	cpsid	i
  if (*trp != NULL) {
 8001d3e:	69d0      	ldr	r0, [r2, #28]
 8001d40:	2800      	cmp	r0, #0
 8001d42:	d005      	beq.n	8001d50 <Vector9C+0xd0>
    *trp = NULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61d3      	str	r3, [r2, #28]
    tp->u.rdymsg = msg;
 8001d48:	3b02      	subs	r3, #2
 8001d4a:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001d4c:	f7fe fc98 	bl	8000680 <chSchReadyI>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d50:	b662      	cpsie	i
 8001d52:	e7a4      	b.n	8001c9e <Vector9C+0x1e>
 8001d54:	2800      	cmp	r0, #0
 8001d56:	d133      	bne.n	8001dc0 <Vector9C+0x140>
  if (i2cp->errors != I2C_NO_ERROR)
 8001d58:	2900      	cmp	r1, #0
 8001d5a:	d0a0      	beq.n	8001c9e <Vector9C+0x1e>
 8001d5c:	e7ee      	b.n	8001d3c <Vector9C+0xbc>
    dmaStreamDisable(i2cp->dmatx);
 8001d5e:	270f      	movs	r7, #15
 8001d60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d62:	46bc      	mov	ip, r7
 8001d64:	685e      	ldr	r6, [r3, #4]
 8001d66:	6835      	ldr	r5, [r6, #0]
 8001d68:	43bd      	bics	r5, r7
 8001d6a:	6035      	str	r5, [r6, #0]
 8001d6c:	7c1e      	ldrb	r6, [r3, #16]
 8001d6e:	681d      	ldr	r5, [r3, #0]
 8001d70:	230e      	movs	r3, #14
 8001d72:	001f      	movs	r7, r3
 8001d74:	40b7      	lsls	r7, r6
 8001d76:	4698      	mov	r8, r3
    dmaStreamDisable(i2cp->dmarx);
 8001d78:	4663      	mov	r3, ip
    dmaStreamDisable(i2cp->dmatx);
 8001d7a:	606f      	str	r7, [r5, #4]
    dmaStreamDisable(i2cp->dmarx);
 8001d7c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8001d7e:	686f      	ldr	r7, [r5, #4]
 8001d80:	683e      	ldr	r6, [r7, #0]
 8001d82:	439e      	bics	r6, r3
 8001d84:	4643      	mov	r3, r8
 8001d86:	603e      	str	r6, [r7, #0]
 8001d88:	682e      	ldr	r6, [r5, #0]
 8001d8a:	7c2d      	ldrb	r5, [r5, #16]
 8001d8c:	40ab      	lsls	r3, r5
 8001d8e:	6073      	str	r3, [r6, #4]
    i2cp->errors |= I2C_ACK_FAILURE;
 8001d90:	2304      	movs	r3, #4
 8001d92:	6895      	ldr	r5, [r2, #8]
 8001d94:	432b      	orrs	r3, r5
 8001d96:	6093      	str	r3, [r2, #8]
    dp->CR2 |= I2C_CR2_STOP;
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	6845      	ldr	r5, [r0, #4]
 8001d9c:	01db      	lsls	r3, r3, #7
 8001d9e:	432b      	orrs	r3, r5
    dp->CR1 &= ~(I2C_CR1_TCIE | I2C_CR1_TXIE | I2C_CR1_RXIE);
 8001da0:	2546      	movs	r5, #70	; 0x46
    dp->CR2 |= I2C_CR2_STOP;
 8001da2:	6043      	str	r3, [r0, #4]
    dp->CR1 &= ~(I2C_CR1_TCIE | I2C_CR1_TXIE | I2C_CR1_RXIE);
 8001da4:	6803      	ldr	r3, [r0, #0]
 8001da6:	43ab      	bics	r3, r5
 8001da8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001daa:	b672      	cpsid	i
  if (*trp != NULL) {
 8001dac:	69d0      	ldr	r0, [r2, #28]
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d0ce      	beq.n	8001d50 <Vector9C+0xd0>
    tp->u.rdymsg = msg;
 8001db2:	2302      	movs	r3, #2
 8001db4:	425b      	negs	r3, r3
    *trp = NULL;
 8001db6:	61d1      	str	r1, [r2, #28]
    tp->u.rdymsg = msg;
 8001db8:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001dba:	f7fe fc61 	bl	8000680 <chSchReadyI>
 8001dbe:	e7c7      	b.n	8001d50 <Vector9C+0xd0>
    i2cp->errors |= I2C_TIMEOUT;
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	4319      	orrs	r1, r3
 8001dc4:	6091      	str	r1, [r2, #8]
 8001dc6:	e7b9      	b.n	8001d3c <Vector9C+0xbc>
  if ((isr & I2C_ISR_TC) != 0U) {
 8001dc8:	065b      	lsls	r3, r3, #25
 8001dca:	d400      	bmi.n	8001dce <Vector9C+0x14e>
 8001dcc:	e767      	b.n	8001c9e <Vector9C+0x1e>
 8001dce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    if (i2cp->state == I2C_ACTIVE_TX) {
 8001dd0:	7815      	ldrb	r5, [r2, #0]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	2d03      	cmp	r5, #3
 8001dd6:	d031      	beq.n	8001e3c <Vector9C+0x1bc>
      dmaStreamDisable(i2cp->dmarx);
 8001dd8:	260f      	movs	r6, #15
 8001dda:	680d      	ldr	r5, [r1, #0]
 8001ddc:	43b5      	bics	r5, r6
 8001dde:	600d      	str	r5, [r1, #0]
 8001de0:	7c1d      	ldrb	r5, [r3, #16]
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	230e      	movs	r3, #14
 8001de6:	40ab      	lsls	r3, r5
 8001de8:	604b      	str	r3, [r1, #4]
    dp->CR2 |= I2C_CR2_STOP;
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	6841      	ldr	r1, [r0, #4]
 8001dee:	01db      	lsls	r3, r3, #7
 8001df0:	430b      	orrs	r3, r1
    dp->CR1 &= ~I2C_CR1_TCIE;
 8001df2:	2140      	movs	r1, #64	; 0x40
    dp->CR2 |= I2C_CR2_STOP;
 8001df4:	6043      	str	r3, [r0, #4]
    dp->CR1 &= ~I2C_CR1_TCIE;
 8001df6:	6803      	ldr	r3, [r0, #0]
 8001df8:	438b      	bics	r3, r1
 8001dfa:	6003      	str	r3, [r0, #0]
 8001dfc:	b672      	cpsid	i
  if (*trp != NULL) {
 8001dfe:	69d0      	ldr	r0, [r2, #28]
 8001e00:	2800      	cmp	r0, #0
 8001e02:	d0a5      	beq.n	8001d50 <Vector9C+0xd0>
    *trp = NULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61d3      	str	r3, [r2, #28]
    tp->u.rdymsg = msg;
 8001e08:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001e0a:	f7fe fc39 	bl	8000680 <chSchReadyI>
 8001e0e:	e79f      	b.n	8001d50 <Vector9C+0xd0>
  if (n > 255U) {
 8001e10:	25ff      	movs	r5, #255	; 0xff
    reload = I2C_CR2_RELOAD;
 8001e12:	2680      	movs	r6, #128	; 0x80
  if (n > 255U) {
 8001e14:	042d      	lsls	r5, r5, #16
    reload = I2C_CR2_RELOAD;
 8001e16:	0476      	lsls	r6, r6, #17
 8001e18:	e759      	b.n	8001cce <Vector9C+0x4e>
  n = i2c_lld_get_txbytes(i2cp);
 8001e1a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	6859      	ldr	r1, [r3, #4]
  if (n > 255U) {
 8001e20:	29ff      	cmp	r1, #255	; 0xff
 8001e22:	d838      	bhi.n	8001e96 <Vector9C+0x216>
    reload = 0U;
 8001e24:	2500      	movs	r5, #0
 8001e26:	0409      	lsls	r1, r1, #16
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001e28:	6852      	ldr	r2, [r2, #4]
 8001e2a:	6843      	ldr	r3, [r0, #4]
 8001e2c:	4e20      	ldr	r6, [pc, #128]	; (8001eb0 <Vector9C+0x230>)
 8001e2e:	6892      	ldr	r2, [r2, #8]
 8001e30:	4033      	ands	r3, r6
 8001e32:	4313      	orrs	r3, r2
            (n << 16U) | reload;
 8001e34:	430b      	orrs	r3, r1
 8001e36:	432b      	orrs	r3, r5
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001e38:	6043      	str	r3, [r0, #4]
 8001e3a:	e730      	b.n	8001c9e <Vector9C+0x1e>
      dmaStreamDisable(i2cp->dmatx);
 8001e3c:	270f      	movs	r7, #15
 8001e3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e40:	685e      	ldr	r6, [r3, #4]
 8001e42:	6835      	ldr	r5, [r6, #0]
 8001e44:	43bd      	bics	r5, r7
 8001e46:	6035      	str	r5, [r6, #0]
 8001e48:	7c1e      	ldrb	r6, [r3, #16]
 8001e4a:	681d      	ldr	r5, [r3, #0]
 8001e4c:	230e      	movs	r3, #14
 8001e4e:	40b3      	lsls	r3, r6
 8001e50:	606b      	str	r3, [r5, #4]
      if (i2c_lld_get_rxbytes(i2cp) > 0U) {
 8001e52:	684b      	ldr	r3, [r1, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0c8      	beq.n	8001dea <Vector9C+0x16a>
  n = i2c_lld_get_rxbytes(i2cp);
 8001e58:	684e      	ldr	r6, [r1, #4]
  if (n > 255U) {
 8001e5a:	2eff      	cmp	r6, #255	; 0xff
 8001e5c:	d820      	bhi.n	8001ea0 <Vector9C+0x220>
    reload = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	469c      	mov	ip, r3
 8001e62:	0436      	lsls	r6, r6, #16
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001e64:	6853      	ldr	r3, [r2, #4]
 8001e66:	6845      	ldr	r5, [r0, #4]
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8001e68:	689f      	ldr	r7, [r3, #8]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	433b      	orrs	r3, r7
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001e70:	4f0f      	ldr	r7, [pc, #60]	; (8001eb0 <Vector9C+0x230>)
 8001e72:	403d      	ands	r5, r7
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8001e74:	432b      	orrs	r3, r5
 8001e76:	4665      	mov	r5, ip
 8001e78:	4333      	orrs	r3, r6
 8001e7a:	432b      	orrs	r3, r5
        dmaStreamEnable(i2cp->dmarx);
 8001e7c:	2501      	movs	r5, #1
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8001e7e:	6043      	str	r3, [r0, #4]
        dmaStreamEnable(i2cp->dmarx);
 8001e80:	680b      	ldr	r3, [r1, #0]
 8001e82:	432b      	orrs	r3, r5
 8001e84:	600b      	str	r3, [r1, #0]
        dp->CR2 |= I2C_CR2_START;
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	6841      	ldr	r1, [r0, #4]
 8001e8a:	019b      	lsls	r3, r3, #6
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6043      	str	r3, [r0, #4]
        i2cp->state = I2C_ACTIVE_RX;
 8001e90:	2304      	movs	r3, #4
 8001e92:	7013      	strb	r3, [r2, #0]
 8001e94:	e703      	b.n	8001c9e <Vector9C+0x1e>
  if (n > 255U) {
 8001e96:	21ff      	movs	r1, #255	; 0xff
    reload = I2C_CR2_RELOAD;
 8001e98:	2580      	movs	r5, #128	; 0x80
  if (n > 255U) {
 8001e9a:	0409      	lsls	r1, r1, #16
    reload = I2C_CR2_RELOAD;
 8001e9c:	046d      	lsls	r5, r5, #17
 8001e9e:	e7c3      	b.n	8001e28 <Vector9C+0x1a8>
    reload = I2C_CR2_RELOAD;
 8001ea0:	2380      	movs	r3, #128	; 0x80
  if (n > 255U) {
 8001ea2:	26ff      	movs	r6, #255	; 0xff
    reload = I2C_CR2_RELOAD;
 8001ea4:	045b      	lsls	r3, r3, #17
  if (n > 255U) {
 8001ea6:	0436      	lsls	r6, r6, #16
    reload = I2C_CR2_RELOAD;
 8001ea8:	469c      	mov	ip, r3
 8001eaa:	e7db      	b.n	8001e64 <Vector9C+0x1e4>
 8001eac:	20000400 	.word	0x20000400
 8001eb0:	fe00ffff 	.word	0xfe00ffff
	...

08001ec0 <Vector64>:
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8001ec0:	210e      	movs	r1, #14
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <Vector64+0x2c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001ec4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8001ec6:	681a      	ldr	r2, [r3, #0]
  OSAL_IRQ_PROLOGUE();
 8001ec8:	4674      	mov	r4, lr
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8001eca:	4011      	ands	r1, r2
 8001ecc:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <Vector64+0x30>)
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	4211      	tst	r1, r2
 8001ed2:	d006      	beq.n	8001ee2 <Vector64+0x22>
 8001ed4:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <Vector64+0x34>)
 8001ed6:	6059      	str	r1, [r3, #4]
 8001ed8:	6813      	ldr	r3, [r2, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <Vector64+0x22>
 8001ede:	6850      	ldr	r0, [r2, #4]
 8001ee0:	4798      	blx	r3
 8001ee2:	340f      	adds	r4, #15
 8001ee4:	d001      	beq.n	8001eea <Vector64+0x2a>
 8001ee6:	f7fe fb63 	bl	80005b0 <_port_irq_epilogue.part.0>
}
 8001eea:	bd10      	pop	{r4, pc}
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	40020008 	.word	0x40020008
 8001ef4:	20000494 	.word	0x20000494
	...

08001f00 <Vector6C>:
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001f00:	210e      	movs	r1, #14
 8001f02:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <Vector6C+0x54>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4567_HANDLER) {
 8001f04:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001f06:	6813      	ldr	r3, [r2, #0]
  OSAL_IRQ_PROLOGUE();
 8001f08:	4674      	mov	r4, lr
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001f0a:	0b1b      	lsrs	r3, r3, #12
 8001f0c:	4019      	ands	r1, r3
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <Vector6C+0x58>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4219      	tst	r1, r3
 8001f14:	d007      	beq.n	8001f26 <Vector6C+0x26>
 8001f16:	030b      	lsls	r3, r1, #12
 8001f18:	6053      	str	r3, [r2, #4]
 8001f1a:	4a10      	ldr	r2, [pc, #64]	; (8001f5c <Vector6C+0x5c>)
 8001f1c:	6993      	ldr	r3, [r2, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <Vector6C+0x26>
 8001f22:	69d0      	ldr	r0, [r2, #28]
 8001f24:	4798      	blx	r3
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001f26:	210e      	movs	r1, #14
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <Vector6C+0x54>)
 8001f2a:	6813      	ldr	r3, [r2, #0]
 8001f2c:	0c1b      	lsrs	r3, r3, #16
 8001f2e:	4019      	ands	r1, r3
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <Vector6C+0x60>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4219      	tst	r1, r3
 8001f36:	d007      	beq.n	8001f48 <Vector6C+0x48>
 8001f38:	040b      	lsls	r3, r1, #16
 8001f3a:	6053      	str	r3, [r2, #4]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <Vector6C+0x5c>)
 8001f3e:	6a13      	ldr	r3, [r2, #32]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <Vector6C+0x48>
 8001f44:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8001f46:	4798      	blx	r3
 8001f48:	340f      	adds	r4, #15
 8001f4a:	d001      	beq.n	8001f50 <Vector6C+0x50>
 8001f4c:	f7fe fb30 	bl	80005b0 <_port_irq_epilogue.part.0>
}
 8001f50:	bd10      	pop	{r4, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020044 	.word	0x40020044
 8001f5c:	20000494 	.word	0x20000494
 8001f60:	40020058 	.word	0x40020058
	...

08001f70 <Vector68>:
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001f70:	210e      	movs	r1, #14
 8001f72:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <Vector68+0x54>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH23_HANDLER) {
 8001f74:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001f76:	6813      	ldr	r3, [r2, #0]
  OSAL_IRQ_PROLOGUE();
 8001f78:	4674      	mov	r4, lr
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	4019      	ands	r1, r3
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <Vector68+0x58>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4219      	tst	r1, r3
 8001f84:	d007      	beq.n	8001f96 <Vector68+0x26>
 8001f86:	010b      	lsls	r3, r1, #4
 8001f88:	6053      	str	r3, [r2, #4]
 8001f8a:	4a10      	ldr	r2, [pc, #64]	; (8001fcc <Vector68+0x5c>)
 8001f8c:	6893      	ldr	r3, [r2, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <Vector68+0x26>
 8001f92:	68d0      	ldr	r0, [r2, #12]
 8001f94:	4798      	blx	r3
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001f96:	210e      	movs	r1, #14
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <Vector68+0x54>)
 8001f9a:	6813      	ldr	r3, [r2, #0]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	4019      	ands	r1, r3
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <Vector68+0x60>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4219      	tst	r1, r3
 8001fa6:	d007      	beq.n	8001fb8 <Vector68+0x48>
 8001fa8:	020b      	lsls	r3, r1, #8
 8001faa:	6053      	str	r3, [r2, #4]
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <Vector68+0x5c>)
 8001fae:	6913      	ldr	r3, [r2, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <Vector68+0x48>
 8001fb4:	6950      	ldr	r0, [r2, #20]
 8001fb6:	4798      	blx	r3
 8001fb8:	340f      	adds	r4, #15
 8001fba:	d001      	beq.n	8001fc0 <Vector68+0x50>
 8001fbc:	f7fe faf8 	bl	80005b0 <_port_irq_epilogue.part.0>
}
 8001fc0:	bd10      	pop	{r4, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	4002001c 	.word	0x4002001c
 8001fcc:	20000494 	.word	0x20000494
 8001fd0:	40020030 	.word	0x40020030
	...

08001fe0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	4694      	mov	ip, r2
 8001fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001fe6:	2700      	movs	r7, #0
  const ram_init_area_t *rap = ram_areas;
 8001fe8:	4e10      	ldr	r6, [pc, #64]	; (800202c <__init_ram_areas+0x4c>)
void __init_ram_areas(void) {
 8001fea:	4d11      	ldr	r5, [pc, #68]	; (8002030 <__init_ram_areas+0x50>)
 8001fec:	4c11      	ldr	r4, [pc, #68]	; (8002034 <__init_ram_areas+0x54>)
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <__init_ram_areas+0x58>)
 8001ff0:	4912      	ldr	r1, [pc, #72]	; (800203c <__init_ram_areas+0x5c>)
 8001ff2:	44b4      	add	ip, r6
    while (p < rap->clear_area) {
 8001ff4:	429c      	cmp	r4, r3
 8001ff6:	d90d      	bls.n	8002014 <__init_ram_areas+0x34>
 8001ff8:	001a      	movs	r2, r3
      *p = *tp;
 8001ffa:	c901      	ldmia	r1!, {r0}
 8001ffc:	c201      	stmia	r2!, {r0}
    while (p < rap->clear_area) {
 8001ffe:	4294      	cmp	r4, r2
 8002000:	d8fb      	bhi.n	8001ffa <__init_ram_areas+0x1a>
 8002002:	43da      	mvns	r2, r3
 8002004:	1914      	adds	r4, r2, r4
 8002006:	08a4      	lsrs	r4, r4, #2
 8002008:	3401      	adds	r4, #1
 800200a:	00a4      	lsls	r4, r4, #2
 800200c:	191b      	adds	r3, r3, r4
    while (p < rap->no_init_area) {
 800200e:	429d      	cmp	r5, r3
 8002010:	d902      	bls.n	8002018 <__init_ram_areas+0x38>
      *p = 0;
 8002012:	c380      	stmia	r3!, {r7}
    while (p < rap->no_init_area) {
 8002014:	429d      	cmp	r5, r3
 8002016:	d8fc      	bhi.n	8002012 <__init_ram_areas+0x32>
      p++;
    }
    rap++;
 8002018:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800201a:	4566      	cmp	r6, ip
 800201c:	d004      	beq.n	8002028 <__init_ram_areas+0x48>
 800201e:	6831      	ldr	r1, [r6, #0]
 8002020:	6873      	ldr	r3, [r6, #4]
 8002022:	68b4      	ldr	r4, [r6, #8]
 8002024:	68f5      	ldr	r5, [r6, #12]
 8002026:	e7e5      	b.n	8001ff4 <__init_ram_areas+0x14>
#endif
}
 8002028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	0800236c 	.word	0x0800236c
 8002030:	200007e8 	.word	0x200007e8
 8002034:	200007e8 	.word	0x200007e8
 8002038:	200007e8 	.word	0x200007e8
 800203c:	0800241c 	.word	0x0800241c

08002040 <__default_exit>:
void __default_exit(void) {
 8002040:	e7fe      	b.n	8002040 <__default_exit>
 8002042:	46c0      	nop			; (mov r8, r8)
	...

08002050 <__late_init>:
 8002050:	4770      	bx	lr
 8002052:	46c0      	nop			; (mov r8, r8)
	...

08002060 <__core_init>:
}
 8002060:	4770      	bx	lr
 8002062:	46c0      	nop			; (mov r8, r8)

08002064 <memcpy>:
 8002064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002066:	2a0f      	cmp	r2, #15
 8002068:	d937      	bls.n	80020da <memcpy+0x76>
 800206a:	000d      	movs	r5, r1
 800206c:	4305      	orrs	r5, r0
 800206e:	000c      	movs	r4, r1
 8002070:	0003      	movs	r3, r0
 8002072:	07ad      	lsls	r5, r5, #30
 8002074:	d135      	bne.n	80020e2 <memcpy+0x7e>
 8002076:	0015      	movs	r5, r2
 8002078:	3d10      	subs	r5, #16
 800207a:	092d      	lsrs	r5, r5, #4
 800207c:	012e      	lsls	r6, r5, #4
 800207e:	1836      	adds	r6, r6, r0
 8002080:	3610      	adds	r6, #16
 8002082:	6827      	ldr	r7, [r4, #0]
 8002084:	601f      	str	r7, [r3, #0]
 8002086:	6867      	ldr	r7, [r4, #4]
 8002088:	605f      	str	r7, [r3, #4]
 800208a:	68a7      	ldr	r7, [r4, #8]
 800208c:	609f      	str	r7, [r3, #8]
 800208e:	68e7      	ldr	r7, [r4, #12]
 8002090:	3410      	adds	r4, #16
 8002092:	60df      	str	r7, [r3, #12]
 8002094:	3310      	adds	r3, #16
 8002096:	42b3      	cmp	r3, r6
 8002098:	d1f3      	bne.n	8002082 <memcpy+0x1e>
 800209a:	240f      	movs	r4, #15
 800209c:	3501      	adds	r5, #1
 800209e:	012d      	lsls	r5, r5, #4
 80020a0:	1949      	adds	r1, r1, r5
 80020a2:	4014      	ands	r4, r2
 80020a4:	1945      	adds	r5, r0, r5
 80020a6:	2c03      	cmp	r4, #3
 80020a8:	d91d      	bls.n	80020e6 <memcpy+0x82>
 80020aa:	2300      	movs	r3, #0
 80020ac:	58ce      	ldr	r6, [r1, r3]
 80020ae:	50ee      	str	r6, [r5, r3]
 80020b0:	3304      	adds	r3, #4
 80020b2:	1ae6      	subs	r6, r4, r3
 80020b4:	2e03      	cmp	r6, #3
 80020b6:	d8f9      	bhi.n	80020ac <memcpy+0x48>
 80020b8:	2303      	movs	r3, #3
 80020ba:	3c04      	subs	r4, #4
 80020bc:	08a4      	lsrs	r4, r4, #2
 80020be:	3401      	adds	r4, #1
 80020c0:	00a4      	lsls	r4, r4, #2
 80020c2:	401a      	ands	r2, r3
 80020c4:	192d      	adds	r5, r5, r4
 80020c6:	1909      	adds	r1, r1, r4
 80020c8:	2a00      	cmp	r2, #0
 80020ca:	d005      	beq.n	80020d8 <memcpy+0x74>
 80020cc:	2300      	movs	r3, #0
 80020ce:	5ccc      	ldrb	r4, [r1, r3]
 80020d0:	54ec      	strb	r4, [r5, r3]
 80020d2:	3301      	adds	r3, #1
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d1fa      	bne.n	80020ce <memcpy+0x6a>
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020da:	0005      	movs	r5, r0
 80020dc:	2a00      	cmp	r2, #0
 80020de:	d1f5      	bne.n	80020cc <memcpy+0x68>
 80020e0:	e7fa      	b.n	80020d8 <memcpy+0x74>
 80020e2:	0005      	movs	r5, r0
 80020e4:	e7f2      	b.n	80020cc <memcpy+0x68>
 80020e6:	0022      	movs	r2, r4
 80020e8:	e7f8      	b.n	80020dc <memcpy+0x78>
 80020ea:	46c0      	nop			; (mov r8, r8)
