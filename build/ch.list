
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000200 	.word	0x20000200
 8000004:	08000191 	.word	0x08000191
 8000008:	08004071 	.word	0x08004071
 800000c:	08000192 	.word	0x08000192
 8000010:	08000192 	.word	0x08000192
 8000014:	08000192 	.word	0x08000192
 8000018:	08000192 	.word	0x08000192
 800001c:	08000192 	.word	0x08000192
 8000020:	08000192 	.word	0x08000192
 8000024:	08000192 	.word	0x08000192
 8000028:	08000192 	.word	0x08000192
 800002c:	08000192 	.word	0x08000192
 8000030:	08000192 	.word	0x08000192
 8000034:	08000192 	.word	0x08000192
 8000038:	08000192 	.word	0x08000192
 800003c:	08000192 	.word	0x08000192
 8000040:	08000192 	.word	0x08000192
 8000044:	08000192 	.word	0x08000192
 8000048:	08000192 	.word	0x08000192
 800004c:	08000192 	.word	0x08000192
 8000050:	08000192 	.word	0x08000192
 8000054:	08000192 	.word	0x08000192
 8000058:	08000192 	.word	0x08000192
 800005c:	08000192 	.word	0x08000192
 8000060:	08000192 	.word	0x08000192
 8000064:	080046c1 	.word	0x080046c1
 8000068:	08004771 	.word	0x08004771
 800006c:	08004701 	.word	0x08004701
 8000070:	08000192 	.word	0x08000192
 8000074:	08000192 	.word	0x08000192
 8000078:	08000192 	.word	0x08000192
 800007c:	080043e1 	.word	0x080043e1
 8000080:	08000192 	.word	0x08000192
 8000084:	08000192 	.word	0x08000192
 8000088:	08000192 	.word	0x08000192
 800008c:	08000192 	.word	0x08000192
 8000090:	08000192 	.word	0x08000192
 8000094:	08000192 	.word	0x08000192
 8000098:	08000192 	.word	0x08000192
 800009c:	08004481 	.word	0x08004481
 80000a0:	08000192 	.word	0x08000192
 80000a4:	08000192 	.word	0x08000192
 80000a8:	08000192 	.word	0x08000192
 80000ac:	08004271 	.word	0x08004271
 80000b0:	08000192 	.word	0x08000192
 80000b4:	08000192 	.word	0x08000192
 80000b8:	08000192 	.word	0x08000192
 80000bc:	08000192 	.word	0x08000192

Disassembly of section .text:

080000c0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80000c0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80000c2:	4824      	ldr	r0, [pc, #144]	; (8000154 <endfiniloop+0x6>)
                msr     MSP, r0
 80000c4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80000c8:	4823      	ldr	r0, [pc, #140]	; (8000158 <endfiniloop+0xa>)
                msr     PSP, r0
 80000ca:	f380 8809 	msr	PSP, r0

                /* CPU mode initialization as configured.*/
                movs    r0, #CRT0_CONTROL_INIT
 80000ce:	2002      	movs	r0, #2
                msr     CONTROL, r0
 80000d0:	f380 8814 	msr	CONTROL, r0
                isb
 80000d4:	f3bf 8f6f 	isb	sy
                str     r0, [r1]
#endif

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 80000d8:	f004 fbc2 	bl	8004860 <__core_init>
#endif

                /* Early initialization..*/
                bl      __early_init
 80000dc:	f004 f818 	bl	8004110 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 80000e0:	481e      	ldr	r0, [pc, #120]	; (800015c <endfiniloop+0xe>)
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80000e2:	491f      	ldr	r1, [pc, #124]	; (8000160 <endfiniloop+0x12>)
                ldr     r2, =__main_stack_end__
 80000e4:	4a1b      	ldr	r2, [pc, #108]	; (8000154 <endfiniloop+0x6>)

080000e6 <msloop>:
msloop:
                cmp     r1, r2
 80000e6:	4291      	cmp	r1, r2
                bge     endmsloop
 80000e8:	da02      	bge.n	80000f0 <endmsloop>
                str     r0, [r1]
 80000ea:	6008      	str	r0, [r1, #0]
                add     r1, r1, #4
 80000ec:	3104      	adds	r1, #4
                b       msloop
 80000ee:	e7fa      	b.n	80000e6 <msloop>

080000f0 <endmsloop>:
endmsloop:
                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80000f0:	491c      	ldr	r1, [pc, #112]	; (8000164 <endfiniloop+0x16>)
                ldr     r2, =__process_stack_end__
 80000f2:	4a19      	ldr	r2, [pc, #100]	; (8000158 <endfiniloop+0xa>)

080000f4 <psloop>:
psloop:
                cmp     r1, r2
 80000f4:	4291      	cmp	r1, r2
                bge     endpsloop
 80000f6:	da02      	bge.n	80000fe <endpsloop>
                str     r0, [r1]
 80000f8:	6008      	str	r0, [r1, #0]
                add     r1, r1, #4
 80000fa:	3104      	adds	r1, #4
                b       psloop
 80000fc:	e7fa      	b.n	80000f4 <psloop>

080000fe <endpsloop>:
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata
 80000fe:	491a      	ldr	r1, [pc, #104]	; (8000168 <endfiniloop+0x1a>)
                ldr     r2, =_data
 8000100:	4a1a      	ldr	r2, [pc, #104]	; (800016c <endfiniloop+0x1e>)
                ldr     r3, =_edata
 8000102:	4b1b      	ldr	r3, [pc, #108]	; (8000170 <endfiniloop+0x22>)

08000104 <dloop>:
dloop:
                cmp     r2, r3
 8000104:	429a      	cmp	r2, r3
                bge     enddloop
 8000106:	da04      	bge.n	8000112 <enddloop>
                ldr     r0, [r1]
 8000108:	6808      	ldr	r0, [r1, #0]
                str     r0, [r2]
 800010a:	6010      	str	r0, [r2, #0]
                add     r1, r1, #4
 800010c:	3104      	adds	r1, #4
                add     r2, r2, #4
 800010e:	3204      	adds	r2, #4
                b       dloop
 8000110:	e7f8      	b.n	8000104 <dloop>

08000112 <enddloop>:
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000112:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000114:	4917      	ldr	r1, [pc, #92]	; (8000174 <endfiniloop+0x26>)
                ldr     r2, =_bss_end
 8000116:	4a18      	ldr	r2, [pc, #96]	; (8000178 <endfiniloop+0x2a>)

08000118 <bloop>:
bloop:
                cmp     r1, r2
 8000118:	4291      	cmp	r1, r2
                bge     endbloop
 800011a:	da02      	bge.n	8000122 <endbloop>
                str     r0, [r1]
 800011c:	6008      	str	r0, [r1, #0]
                add     r1, r1, #4
 800011e:	3104      	adds	r1, #4
                b       bloop
 8000120:	e7fa      	b.n	8000118 <bloop>

08000122 <endbloop>:
endbloop:
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000122:	f004 fb5d 	bl	80047e0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000126:	f004 fb93 	bl	8004850 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 800012a:	4c14      	ldr	r4, [pc, #80]	; (800017c <endfiniloop+0x2e>)
                ldr     r5, =__init_array_end
 800012c:	4d14      	ldr	r5, [pc, #80]	; (8000180 <endfiniloop+0x32>)

0800012e <initloop>:
initloop:
                cmp     r4, r5
 800012e:	42ac      	cmp	r4, r5
                bge     endinitloop
 8000130:	da03      	bge.n	800013a <endinitloop>
                ldr     r1, [r4]
 8000132:	6821      	ldr	r1, [r4, #0]
                blx     r1
 8000134:	4788      	blx	r1
                add     r4, r4, #4
 8000136:	3404      	adds	r4, #4
                b       initloop
 8000138:	e7f9      	b.n	800012e <initloop>

0800013a <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 800013a:	f003 fcc9 	bl	8003ad0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800013e:	4c11      	ldr	r4, [pc, #68]	; (8000184 <endfiniloop+0x36>)
                ldr     r5, =__fini_array_end
 8000140:	4d11      	ldr	r5, [pc, #68]	; (8000188 <endfiniloop+0x3a>)

08000142 <finiloop>:
finiloop:
                cmp     r4, r5
 8000142:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000144:	da03      	bge.n	800014e <endfiniloop>
                ldr     r1, [r4]
 8000146:	6821      	ldr	r1, [r4, #0]
                blx     r1
 8000148:	4788      	blx	r1
                add     r4, r4, #4
 800014a:	3404      	adds	r4, #4
                b       finiloop
 800014c:	e7f9      	b.n	8000142 <finiloop>

0800014e <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                ldr     r1, =__default_exit
 800014e:	490f      	ldr	r1, [pc, #60]	; (800018c <endfiniloop+0x3e>)
                bx      r1
 8000150:	4708      	bx	r1
 8000152:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 8000154:	20000200 	.word	0x20000200
                ldr     r0, =__process_stack_end__
 8000158:	20000400 	.word	0x20000400
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800015c:	55555555 	.word	0x55555555
                ldr     r1, =__main_stack_base__
 8000160:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000164:	20000200 	.word	0x20000200
                ldr     r1, =_textdata
 8000168:	08005318 	.word	0x08005318
                ldr     r2, =_data
 800016c:	20000400 	.word	0x20000400
                ldr     r3, =_edata
 8000170:	20000830 	.word	0x20000830
                ldr     r1, =_bss_start
 8000174:	20000830 	.word	0x20000830
                ldr     r2, =_bss_end
 8000178:	20000c18 	.word	0x20000c18
                ldr     r4, =__init_array_start
 800017c:	080000c0 	.word	0x080000c0
                ldr     r5, =__init_array_end
 8000180:	080000c0 	.word	0x080000c0
                ldr     r4, =__fini_array_start
 8000184:	080000c0 	.word	0x080000c0
                ldr     r5, =__fini_array_end
 8000188:	080000c0 	.word	0x080000c0
                ldr     r1, =__default_exit
 800018c:	08004841 	.word	0x08004841

08000190 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000190:	e796      	b.n	80000c0 <_crt0_entry>

08000192 <BusFault_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 8000192:	f000 f800 	bl	8000196 <_unhandled_exception>

08000196 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8000196:	e7fe      	b.n	8000196 <_unhandled_exception>

08000198 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, lr}
 8000198:	b5f0      	push	{r4, r5, r6, r7, lr}
                mov     r4, r8
 800019a:	4644      	mov	r4, r8
                mov     r5, r9
 800019c:	464d      	mov	r5, r9
                mov     r6, r10
 800019e:	4656      	mov	r6, sl
                mov     r7, r11
 80001a0:	465f      	mov	r7, fp
                push    {r4, r5, r6, r7}
 80001a2:	b4f0      	push	{r4, r5, r6, r7}
                
                mov     r3, sp
 80001a4:	466b      	mov	r3, sp
                str     r3, [r1, #CONTEXT_OFFSET]
 80001a6:	60cb      	str	r3, [r1, #12]
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80001a8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80001aa:	469d      	mov	sp, r3
                
                pop     {r4, r5, r6, r7}
 80001ac:	bcf0      	pop	{r4, r5, r6, r7}
                mov     r8, r4
 80001ae:	46a0      	mov	r8, r4
                mov     r9, r5
 80001b0:	46a9      	mov	r9, r5
                mov     r10, r6
 80001b2:	46b2      	mov	sl, r6
                mov     r11, r7
 80001b4:	46bb      	mov	fp, r7
                pop     {r4, r5, r6, r7, pc}
 80001b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080001b8 <_port_thread_start>:
                bl      _dbg_check_unlock
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
#endif
                cpsie   i
 80001b8:	b662      	cpsie	i
                mov     r0, r5
 80001ba:	1c28      	adds	r0, r5, #0
                blx     r4
 80001bc:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80001be:	2000      	movs	r0, #0
                bl      chThdExit
 80001c0:	f003 ff5e 	bl	8004080 <chThdExit>

080001c4 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80001c4:	f003 ff84 	bl	80040d0 <chSchDoReschedule>

080001c8 <_port_exit_from_isr>:
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
#endif
                .globl  _port_exit_from_isr
_port_exit_from_isr:
                ldr     r2, .L2
 80001c8:	4a01      	ldr	r2, [pc, #4]	; (80001d0 <_port_exit_from_isr+0x8>)
                ldr     r3, .L3
 80001ca:	4b02      	ldr	r3, [pc, #8]	; (80001d4 <_port_exit_from_isr+0xc>)
                str     r3, [r2, #0]
 80001cc:	6013      	str	r3, [r2, #0]
#if CORTEX_ALTERNATE_SWITCH
                cpsie   i
#endif
.L1:            b       .L1
 80001ce:	e7fe      	b.n	80001ce <_port_exit_from_isr+0x6>
 80001d0:	e000ed04 	.word	0xe000ed04
 80001d4:	80000000 	.word	0x80000000

080001d8 <__udivsi3>:
 80001d8:	2200      	movs	r2, #0
 80001da:	0843      	lsrs	r3, r0, #1
 80001dc:	428b      	cmp	r3, r1
 80001de:	d374      	bcc.n	80002ca <__udivsi3+0xf2>
 80001e0:	0903      	lsrs	r3, r0, #4
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d35f      	bcc.n	80002a6 <__udivsi3+0xce>
 80001e6:	0a03      	lsrs	r3, r0, #8
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d344      	bcc.n	8000276 <__udivsi3+0x9e>
 80001ec:	0b03      	lsrs	r3, r0, #12
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d328      	bcc.n	8000244 <__udivsi3+0x6c>
 80001f2:	0c03      	lsrs	r3, r0, #16
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d30d      	bcc.n	8000214 <__udivsi3+0x3c>
 80001f8:	22ff      	movs	r2, #255	; 0xff
 80001fa:	0209      	lsls	r1, r1, #8
 80001fc:	ba12      	rev	r2, r2
 80001fe:	0c03      	lsrs	r3, r0, #16
 8000200:	428b      	cmp	r3, r1
 8000202:	d302      	bcc.n	800020a <__udivsi3+0x32>
 8000204:	1212      	asrs	r2, r2, #8
 8000206:	0209      	lsls	r1, r1, #8
 8000208:	d065      	beq.n	80002d6 <__udivsi3+0xfe>
 800020a:	0b03      	lsrs	r3, r0, #12
 800020c:	428b      	cmp	r3, r1
 800020e:	d319      	bcc.n	8000244 <__udivsi3+0x6c>
 8000210:	e000      	b.n	8000214 <__udivsi3+0x3c>
 8000212:	0a09      	lsrs	r1, r1, #8
 8000214:	0bc3      	lsrs	r3, r0, #15
 8000216:	428b      	cmp	r3, r1
 8000218:	d301      	bcc.n	800021e <__udivsi3+0x46>
 800021a:	03cb      	lsls	r3, r1, #15
 800021c:	1ac0      	subs	r0, r0, r3
 800021e:	4152      	adcs	r2, r2
 8000220:	0b83      	lsrs	r3, r0, #14
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x52>
 8000226:	038b      	lsls	r3, r1, #14
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	0b43      	lsrs	r3, r0, #13
 800022e:	428b      	cmp	r3, r1
 8000230:	d301      	bcc.n	8000236 <__udivsi3+0x5e>
 8000232:	034b      	lsls	r3, r1, #13
 8000234:	1ac0      	subs	r0, r0, r3
 8000236:	4152      	adcs	r2, r2
 8000238:	0b03      	lsrs	r3, r0, #12
 800023a:	428b      	cmp	r3, r1
 800023c:	d301      	bcc.n	8000242 <__udivsi3+0x6a>
 800023e:	030b      	lsls	r3, r1, #12
 8000240:	1ac0      	subs	r0, r0, r3
 8000242:	4152      	adcs	r2, r2
 8000244:	0ac3      	lsrs	r3, r0, #11
 8000246:	428b      	cmp	r3, r1
 8000248:	d301      	bcc.n	800024e <__udivsi3+0x76>
 800024a:	02cb      	lsls	r3, r1, #11
 800024c:	1ac0      	subs	r0, r0, r3
 800024e:	4152      	adcs	r2, r2
 8000250:	0a83      	lsrs	r3, r0, #10
 8000252:	428b      	cmp	r3, r1
 8000254:	d301      	bcc.n	800025a <__udivsi3+0x82>
 8000256:	028b      	lsls	r3, r1, #10
 8000258:	1ac0      	subs	r0, r0, r3
 800025a:	4152      	adcs	r2, r2
 800025c:	0a43      	lsrs	r3, r0, #9
 800025e:	428b      	cmp	r3, r1
 8000260:	d301      	bcc.n	8000266 <__udivsi3+0x8e>
 8000262:	024b      	lsls	r3, r1, #9
 8000264:	1ac0      	subs	r0, r0, r3
 8000266:	4152      	adcs	r2, r2
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d301      	bcc.n	8000272 <__udivsi3+0x9a>
 800026e:	020b      	lsls	r3, r1, #8
 8000270:	1ac0      	subs	r0, r0, r3
 8000272:	4152      	adcs	r2, r2
 8000274:	d2cd      	bcs.n	8000212 <__udivsi3+0x3a>
 8000276:	09c3      	lsrs	r3, r0, #7
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__udivsi3+0xa8>
 800027c:	01cb      	lsls	r3, r1, #7
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0983      	lsrs	r3, r0, #6
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__udivsi3+0xb4>
 8000288:	018b      	lsls	r3, r1, #6
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0943      	lsrs	r3, r0, #5
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__udivsi3+0xc0>
 8000294:	014b      	lsls	r3, r1, #5
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0903      	lsrs	r3, r0, #4
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__udivsi3+0xcc>
 80002a0:	010b      	lsls	r3, r1, #4
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	08c3      	lsrs	r3, r0, #3
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__udivsi3+0xd8>
 80002ac:	00cb      	lsls	r3, r1, #3
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0883      	lsrs	r3, r0, #2
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__udivsi3+0xe4>
 80002b8:	008b      	lsls	r3, r1, #2
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0843      	lsrs	r3, r0, #1
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__udivsi3+0xf0>
 80002c4:	004b      	lsls	r3, r1, #1
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	1a41      	subs	r1, r0, r1
 80002cc:	d200      	bcs.n	80002d0 <__udivsi3+0xf8>
 80002ce:	4601      	mov	r1, r0
 80002d0:	4152      	adcs	r2, r2
 80002d2:	4610      	mov	r0, r2
 80002d4:	4770      	bx	lr
 80002d6:	e7ff      	b.n	80002d8 <__udivsi3+0x100>
 80002d8:	b501      	push	{r0, lr}
 80002da:	2000      	movs	r0, #0
 80002dc:	f000 f806 	bl	80002ec <__aeabi_idiv0>
 80002e0:	bd02      	pop	{r1, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__aeabi_uidivmod>:
 80002e4:	2900      	cmp	r1, #0
 80002e6:	d0f7      	beq.n	80002d8 <__udivsi3+0x100>
 80002e8:	e776      	b.n	80001d8 <__udivsi3>
 80002ea:	4770      	bx	lr

080002ec <__aeabi_idiv0>:
 80002ec:	4770      	bx	lr
 80002ee:	46c0      	nop			; (mov r8, r8)

080002f0 <__aeabi_cdrcmple>:
 80002f0:	4684      	mov	ip, r0
 80002f2:	1c10      	adds	r0, r2, #0
 80002f4:	4662      	mov	r2, ip
 80002f6:	468c      	mov	ip, r1
 80002f8:	1c19      	adds	r1, r3, #0
 80002fa:	4663      	mov	r3, ip
 80002fc:	e000      	b.n	8000300 <__aeabi_cdcmpeq>
 80002fe:	46c0      	nop			; (mov r8, r8)

08000300 <__aeabi_cdcmpeq>:
 8000300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000302:	f001 fdd7 	bl	8001eb4 <__ledf2>
 8000306:	2800      	cmp	r0, #0
 8000308:	d401      	bmi.n	800030e <__aeabi_cdcmpeq+0xe>
 800030a:	2100      	movs	r1, #0
 800030c:	42c8      	cmn	r0, r1
 800030e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000310 <__aeabi_dcmpeq>:
 8000310:	b510      	push	{r4, lr}
 8000312:	f001 fd2f 	bl	8001d74 <__eqdf2>
 8000316:	4240      	negs	r0, r0
 8000318:	3001      	adds	r0, #1
 800031a:	bd10      	pop	{r4, pc}

0800031c <__aeabi_dcmplt>:
 800031c:	b510      	push	{r4, lr}
 800031e:	f001 fdc9 	bl	8001eb4 <__ledf2>
 8000322:	2800      	cmp	r0, #0
 8000324:	db01      	blt.n	800032a <__aeabi_dcmplt+0xe>
 8000326:	2000      	movs	r0, #0
 8000328:	bd10      	pop	{r4, pc}
 800032a:	2001      	movs	r0, #1
 800032c:	bd10      	pop	{r4, pc}
 800032e:	46c0      	nop			; (mov r8, r8)

08000330 <__aeabi_dcmple>:
 8000330:	b510      	push	{r4, lr}
 8000332:	f001 fdbf 	bl	8001eb4 <__ledf2>
 8000336:	2800      	cmp	r0, #0
 8000338:	dd01      	ble.n	800033e <__aeabi_dcmple+0xe>
 800033a:	2000      	movs	r0, #0
 800033c:	bd10      	pop	{r4, pc}
 800033e:	2001      	movs	r0, #1
 8000340:	bd10      	pop	{r4, pc}
 8000342:	46c0      	nop			; (mov r8, r8)

08000344 <__aeabi_dcmpgt>:
 8000344:	b510      	push	{r4, lr}
 8000346:	f001 fd51 	bl	8001dec <__gedf2>
 800034a:	2800      	cmp	r0, #0
 800034c:	dc01      	bgt.n	8000352 <__aeabi_dcmpgt+0xe>
 800034e:	2000      	movs	r0, #0
 8000350:	bd10      	pop	{r4, pc}
 8000352:	2001      	movs	r0, #1
 8000354:	bd10      	pop	{r4, pc}
 8000356:	46c0      	nop			; (mov r8, r8)

08000358 <__aeabi_dcmpge>:
 8000358:	b510      	push	{r4, lr}
 800035a:	f001 fd47 	bl	8001dec <__gedf2>
 800035e:	2800      	cmp	r0, #0
 8000360:	da01      	bge.n	8000366 <__aeabi_dcmpge+0xe>
 8000362:	2000      	movs	r0, #0
 8000364:	bd10      	pop	{r4, pc}
 8000366:	2001      	movs	r0, #1
 8000368:	bd10      	pop	{r4, pc}
 800036a:	46c0      	nop			; (mov r8, r8)

0800036c <__aeabi_uldivmod>:
 800036c:	2b00      	cmp	r3, #0
 800036e:	d111      	bne.n	8000394 <__aeabi_uldivmod+0x28>
 8000370:	2a00      	cmp	r2, #0
 8000372:	d10f      	bne.n	8000394 <__aeabi_uldivmod+0x28>
 8000374:	2900      	cmp	r1, #0
 8000376:	d100      	bne.n	800037a <__aeabi_uldivmod+0xe>
 8000378:	2800      	cmp	r0, #0
 800037a:	d002      	beq.n	8000382 <__aeabi_uldivmod+0x16>
 800037c:	2100      	movs	r1, #0
 800037e:	43c9      	mvns	r1, r1
 8000380:	1c08      	adds	r0, r1, #0
 8000382:	b407      	push	{r0, r1, r2}
 8000384:	4802      	ldr	r0, [pc, #8]	; (8000390 <__aeabi_uldivmod+0x24>)
 8000386:	a102      	add	r1, pc, #8	; (adr r1, 8000390 <__aeabi_uldivmod+0x24>)
 8000388:	1840      	adds	r0, r0, r1
 800038a:	9002      	str	r0, [sp, #8]
 800038c:	bd03      	pop	{r0, r1, pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	ffffff5d 	.word	0xffffff5d
 8000394:	b403      	push	{r0, r1}
 8000396:	4668      	mov	r0, sp
 8000398:	b501      	push	{r0, lr}
 800039a:	9802      	ldr	r0, [sp, #8]
 800039c:	f000 f848 	bl	8000430 <__udivmoddi4>
 80003a0:	9b01      	ldr	r3, [sp, #4]
 80003a2:	469e      	mov	lr, r3
 80003a4:	b002      	add	sp, #8
 80003a6:	bc0c      	pop	{r2, r3}
 80003a8:	4770      	bx	lr
 80003aa:	46c0      	nop			; (mov r8, r8)

080003ac <__aeabi_lmul>:
 80003ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ae:	46ce      	mov	lr, r9
 80003b0:	4647      	mov	r7, r8
 80003b2:	0415      	lsls	r5, r2, #16
 80003b4:	0c2d      	lsrs	r5, r5, #16
 80003b6:	002e      	movs	r6, r5
 80003b8:	b580      	push	{r7, lr}
 80003ba:	0407      	lsls	r7, r0, #16
 80003bc:	0c14      	lsrs	r4, r2, #16
 80003be:	0c3f      	lsrs	r7, r7, #16
 80003c0:	4699      	mov	r9, r3
 80003c2:	0c03      	lsrs	r3, r0, #16
 80003c4:	437e      	muls	r6, r7
 80003c6:	435d      	muls	r5, r3
 80003c8:	4367      	muls	r7, r4
 80003ca:	4363      	muls	r3, r4
 80003cc:	197f      	adds	r7, r7, r5
 80003ce:	0c34      	lsrs	r4, r6, #16
 80003d0:	19e4      	adds	r4, r4, r7
 80003d2:	469c      	mov	ip, r3
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	d903      	bls.n	80003e0 <__aeabi_lmul+0x34>
 80003d8:	2380      	movs	r3, #128	; 0x80
 80003da:	025b      	lsls	r3, r3, #9
 80003dc:	4698      	mov	r8, r3
 80003de:	44c4      	add	ip, r8
 80003e0:	464b      	mov	r3, r9
 80003e2:	4343      	muls	r3, r0
 80003e4:	4351      	muls	r1, r2
 80003e6:	0c25      	lsrs	r5, r4, #16
 80003e8:	0436      	lsls	r6, r6, #16
 80003ea:	4465      	add	r5, ip
 80003ec:	0c36      	lsrs	r6, r6, #16
 80003ee:	0424      	lsls	r4, r4, #16
 80003f0:	19a4      	adds	r4, r4, r6
 80003f2:	195b      	adds	r3, r3, r5
 80003f4:	1859      	adds	r1, r3, r1
 80003f6:	0020      	movs	r0, r4
 80003f8:	bc0c      	pop	{r2, r3}
 80003fa:	4690      	mov	r8, r2
 80003fc:	4699      	mov	r9, r3
 80003fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000400 <__aeabi_f2uiz>:
 8000400:	219e      	movs	r1, #158	; 0x9e
 8000402:	b510      	push	{r4, lr}
 8000404:	05c9      	lsls	r1, r1, #23
 8000406:	1c04      	adds	r4, r0, #0
 8000408:	f002 fcd2 	bl	8002db0 <__aeabi_fcmpge>
 800040c:	2800      	cmp	r0, #0
 800040e:	d103      	bne.n	8000418 <__aeabi_f2uiz+0x18>
 8000410:	1c20      	adds	r0, r4, #0
 8000412:	f000 fe71 	bl	80010f8 <__aeabi_f2iz>
 8000416:	bd10      	pop	{r4, pc}
 8000418:	219e      	movs	r1, #158	; 0x9e
 800041a:	1c20      	adds	r0, r4, #0
 800041c:	05c9      	lsls	r1, r1, #23
 800041e:	f000 fca7 	bl	8000d70 <__aeabi_fsub>
 8000422:	f000 fe69 	bl	80010f8 <__aeabi_f2iz>
 8000426:	2380      	movs	r3, #128	; 0x80
 8000428:	061b      	lsls	r3, r3, #24
 800042a:	469c      	mov	ip, r3
 800042c:	4460      	add	r0, ip
 800042e:	e7f2      	b.n	8000416 <__aeabi_f2uiz+0x16>

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f002 fcd7 	bl	8002e00 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f002 fcd2 	bl	8002e00 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__aeabi_fadd>:
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	4647      	mov	r7, r8
 80005b8:	46ce      	mov	lr, r9
 80005ba:	0243      	lsls	r3, r0, #9
 80005bc:	0a5b      	lsrs	r3, r3, #9
 80005be:	0044      	lsls	r4, r0, #1
 80005c0:	0fc2      	lsrs	r2, r0, #31
 80005c2:	469c      	mov	ip, r3
 80005c4:	0048      	lsls	r0, r1, #1
 80005c6:	00dd      	lsls	r5, r3, #3
 80005c8:	024b      	lsls	r3, r1, #9
 80005ca:	0e24      	lsrs	r4, r4, #24
 80005cc:	0a5b      	lsrs	r3, r3, #9
 80005ce:	0e00      	lsrs	r0, r0, #24
 80005d0:	b580      	push	{r7, lr}
 80005d2:	4698      	mov	r8, r3
 80005d4:	0026      	movs	r6, r4
 80005d6:	4691      	mov	r9, r2
 80005d8:	0fc9      	lsrs	r1, r1, #31
 80005da:	00db      	lsls	r3, r3, #3
 80005dc:	1a27      	subs	r7, r4, r0
 80005de:	428a      	cmp	r2, r1
 80005e0:	d029      	beq.n	8000636 <__aeabi_fadd+0x82>
 80005e2:	2f00      	cmp	r7, #0
 80005e4:	dd15      	ble.n	8000612 <__aeabi_fadd+0x5e>
 80005e6:	2800      	cmp	r0, #0
 80005e8:	d14a      	bne.n	8000680 <__aeabi_fadd+0xcc>
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d000      	beq.n	80005f0 <__aeabi_fadd+0x3c>
 80005ee:	e095      	b.n	800071c <__aeabi_fadd+0x168>
 80005f0:	08ed      	lsrs	r5, r5, #3
 80005f2:	2cff      	cmp	r4, #255	; 0xff
 80005f4:	d100      	bne.n	80005f8 <__aeabi_fadd+0x44>
 80005f6:	e088      	b.n	800070a <__aeabi_fadd+0x156>
 80005f8:	026b      	lsls	r3, r5, #9
 80005fa:	0a5b      	lsrs	r3, r3, #9
 80005fc:	b2e6      	uxtb	r6, r4
 80005fe:	025b      	lsls	r3, r3, #9
 8000600:	05f6      	lsls	r6, r6, #23
 8000602:	0a58      	lsrs	r0, r3, #9
 8000604:	4330      	orrs	r0, r6
 8000606:	07d2      	lsls	r2, r2, #31
 8000608:	4310      	orrs	r0, r2
 800060a:	bc0c      	pop	{r2, r3}
 800060c:	4690      	mov	r8, r2
 800060e:	4699      	mov	r9, r3
 8000610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000612:	2f00      	cmp	r7, #0
 8000614:	d000      	beq.n	8000618 <__aeabi_fadd+0x64>
 8000616:	e087      	b.n	8000728 <__aeabi_fadd+0x174>
 8000618:	1c60      	adds	r0, r4, #1
 800061a:	b2c0      	uxtb	r0, r0
 800061c:	2801      	cmp	r0, #1
 800061e:	dc00      	bgt.n	8000622 <__aeabi_fadd+0x6e>
 8000620:	e0b6      	b.n	8000790 <__aeabi_fadd+0x1dc>
 8000622:	1aee      	subs	r6, r5, r3
 8000624:	0172      	lsls	r2, r6, #5
 8000626:	d500      	bpl.n	800062a <__aeabi_fadd+0x76>
 8000628:	e0c5      	b.n	80007b6 <__aeabi_fadd+0x202>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d13d      	bne.n	80006aa <__aeabi_fadd+0xf6>
 800062e:	2200      	movs	r2, #0
 8000630:	2600      	movs	r6, #0
 8000632:	2300      	movs	r3, #0
 8000634:	e7e3      	b.n	80005fe <__aeabi_fadd+0x4a>
 8000636:	2f00      	cmp	r7, #0
 8000638:	dc00      	bgt.n	800063c <__aeabi_fadd+0x88>
 800063a:	e096      	b.n	800076a <__aeabi_fadd+0x1b6>
 800063c:	2800      	cmp	r0, #0
 800063e:	d05d      	beq.n	80006fc <__aeabi_fadd+0x148>
 8000640:	2cff      	cmp	r4, #255	; 0xff
 8000642:	d060      	beq.n	8000706 <__aeabi_fadd+0x152>
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	04d2      	lsls	r2, r2, #19
 8000648:	4313      	orrs	r3, r2
 800064a:	2f1b      	cmp	r7, #27
 800064c:	dd00      	ble.n	8000650 <__aeabi_fadd+0x9c>
 800064e:	e0ec      	b.n	800082a <__aeabi_fadd+0x276>
 8000650:	2220      	movs	r2, #32
 8000652:	1bd2      	subs	r2, r2, r7
 8000654:	0018      	movs	r0, r3
 8000656:	4093      	lsls	r3, r2
 8000658:	40f8      	lsrs	r0, r7
 800065a:	1e5a      	subs	r2, r3, #1
 800065c:	4193      	sbcs	r3, r2
 800065e:	4303      	orrs	r3, r0
 8000660:	18ed      	adds	r5, r5, r3
 8000662:	016b      	lsls	r3, r5, #5
 8000664:	d57b      	bpl.n	800075e <__aeabi_fadd+0x1aa>
 8000666:	3401      	adds	r4, #1
 8000668:	2cff      	cmp	r4, #255	; 0xff
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0xba>
 800066c:	e0b7      	b.n	80007de <__aeabi_fadd+0x22a>
 800066e:	2201      	movs	r2, #1
 8000670:	2607      	movs	r6, #7
 8000672:	402a      	ands	r2, r5
 8000674:	086b      	lsrs	r3, r5, #1
 8000676:	4d9a      	ldr	r5, [pc, #616]	; (80008e0 <__aeabi_fadd+0x32c>)
 8000678:	401d      	ands	r5, r3
 800067a:	4315      	orrs	r5, r2
 800067c:	402e      	ands	r6, r5
 800067e:	e029      	b.n	80006d4 <__aeabi_fadd+0x120>
 8000680:	2cff      	cmp	r4, #255	; 0xff
 8000682:	d0b5      	beq.n	80005f0 <__aeabi_fadd+0x3c>
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	04d2      	lsls	r2, r2, #19
 8000688:	4313      	orrs	r3, r2
 800068a:	2f1b      	cmp	r7, #27
 800068c:	dd00      	ble.n	8000690 <__aeabi_fadd+0xdc>
 800068e:	e0b2      	b.n	80007f6 <__aeabi_fadd+0x242>
 8000690:	2220      	movs	r2, #32
 8000692:	1bd2      	subs	r2, r2, r7
 8000694:	0019      	movs	r1, r3
 8000696:	4093      	lsls	r3, r2
 8000698:	40f9      	lsrs	r1, r7
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	4193      	sbcs	r3, r2
 800069e:	430b      	orrs	r3, r1
 80006a0:	1aed      	subs	r5, r5, r3
 80006a2:	016b      	lsls	r3, r5, #5
 80006a4:	d55b      	bpl.n	800075e <__aeabi_fadd+0x1aa>
 80006a6:	01ad      	lsls	r5, r5, #6
 80006a8:	09ae      	lsrs	r6, r5, #6
 80006aa:	0030      	movs	r0, r6
 80006ac:	f002 fb8a 	bl	8002dc4 <__clzsi2>
 80006b0:	3805      	subs	r0, #5
 80006b2:	4086      	lsls	r6, r0
 80006b4:	4284      	cmp	r4, r0
 80006b6:	dc65      	bgt.n	8000784 <__aeabi_fadd+0x1d0>
 80006b8:	1b04      	subs	r4, r0, r4
 80006ba:	0033      	movs	r3, r6
 80006bc:	2020      	movs	r0, #32
 80006be:	3401      	adds	r4, #1
 80006c0:	40e3      	lsrs	r3, r4
 80006c2:	1b04      	subs	r4, r0, r4
 80006c4:	40a6      	lsls	r6, r4
 80006c6:	1e75      	subs	r5, r6, #1
 80006c8:	41ae      	sbcs	r6, r5
 80006ca:	4333      	orrs	r3, r6
 80006cc:	2607      	movs	r6, #7
 80006ce:	001d      	movs	r5, r3
 80006d0:	2400      	movs	r4, #0
 80006d2:	401e      	ands	r6, r3
 80006d4:	2201      	movs	r2, #1
 80006d6:	464b      	mov	r3, r9
 80006d8:	401a      	ands	r2, r3
 80006da:	2e00      	cmp	r6, #0
 80006dc:	d004      	beq.n	80006e8 <__aeabi_fadd+0x134>
 80006de:	230f      	movs	r3, #15
 80006e0:	402b      	ands	r3, r5
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d000      	beq.n	80006e8 <__aeabi_fadd+0x134>
 80006e6:	3504      	adds	r5, #4
 80006e8:	016b      	lsls	r3, r5, #5
 80006ea:	d400      	bmi.n	80006ee <__aeabi_fadd+0x13a>
 80006ec:	e780      	b.n	80005f0 <__aeabi_fadd+0x3c>
 80006ee:	3401      	adds	r4, #1
 80006f0:	b2e6      	uxtb	r6, r4
 80006f2:	2cff      	cmp	r4, #255	; 0xff
 80006f4:	d12f      	bne.n	8000756 <__aeabi_fadd+0x1a2>
 80006f6:	26ff      	movs	r6, #255	; 0xff
 80006f8:	2300      	movs	r3, #0
 80006fa:	e780      	b.n	80005fe <__aeabi_fadd+0x4a>
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d152      	bne.n	80007a6 <__aeabi_fadd+0x1f2>
 8000700:	2cff      	cmp	r4, #255	; 0xff
 8000702:	d000      	beq.n	8000706 <__aeabi_fadd+0x152>
 8000704:	e774      	b.n	80005f0 <__aeabi_fadd+0x3c>
 8000706:	000a      	movs	r2, r1
 8000708:	08ed      	lsrs	r5, r5, #3
 800070a:	2d00      	cmp	r5, #0
 800070c:	d0f3      	beq.n	80006f6 <__aeabi_fadd+0x142>
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	03db      	lsls	r3, r3, #15
 8000712:	432b      	orrs	r3, r5
 8000714:	025b      	lsls	r3, r3, #9
 8000716:	0a5b      	lsrs	r3, r3, #9
 8000718:	26ff      	movs	r6, #255	; 0xff
 800071a:	e770      	b.n	80005fe <__aeabi_fadd+0x4a>
 800071c:	3f01      	subs	r7, #1
 800071e:	2f00      	cmp	r7, #0
 8000720:	d0be      	beq.n	80006a0 <__aeabi_fadd+0xec>
 8000722:	2cff      	cmp	r4, #255	; 0xff
 8000724:	d1b1      	bne.n	800068a <__aeabi_fadd+0xd6>
 8000726:	e763      	b.n	80005f0 <__aeabi_fadd+0x3c>
 8000728:	2c00      	cmp	r4, #0
 800072a:	d047      	beq.n	80007bc <__aeabi_fadd+0x208>
 800072c:	28ff      	cmp	r0, #255	; 0xff
 800072e:	d069      	beq.n	8000804 <__aeabi_fadd+0x250>
 8000730:	2480      	movs	r4, #128	; 0x80
 8000732:	04e4      	lsls	r4, r4, #19
 8000734:	427a      	negs	r2, r7
 8000736:	4325      	orrs	r5, r4
 8000738:	2a1b      	cmp	r2, #27
 800073a:	dd00      	ble.n	800073e <__aeabi_fadd+0x18a>
 800073c:	e0c5      	b.n	80008ca <__aeabi_fadd+0x316>
 800073e:	002c      	movs	r4, r5
 8000740:	2620      	movs	r6, #32
 8000742:	40d4      	lsrs	r4, r2
 8000744:	1ab2      	subs	r2, r6, r2
 8000746:	4095      	lsls	r5, r2
 8000748:	1e6a      	subs	r2, r5, #1
 800074a:	4195      	sbcs	r5, r2
 800074c:	4325      	orrs	r5, r4
 800074e:	1b5d      	subs	r5, r3, r5
 8000750:	0004      	movs	r4, r0
 8000752:	4689      	mov	r9, r1
 8000754:	e7a5      	b.n	80006a2 <__aeabi_fadd+0xee>
 8000756:	01ab      	lsls	r3, r5, #6
 8000758:	0a5b      	lsrs	r3, r3, #9
 800075a:	e750      	b.n	80005fe <__aeabi_fadd+0x4a>
 800075c:	2400      	movs	r4, #0
 800075e:	2201      	movs	r2, #1
 8000760:	464b      	mov	r3, r9
 8000762:	401a      	ands	r2, r3
 8000764:	076b      	lsls	r3, r5, #29
 8000766:	d1ba      	bne.n	80006de <__aeabi_fadd+0x12a>
 8000768:	e742      	b.n	80005f0 <__aeabi_fadd+0x3c>
 800076a:	2f00      	cmp	r7, #0
 800076c:	d13b      	bne.n	80007e6 <__aeabi_fadd+0x232>
 800076e:	3401      	adds	r4, #1
 8000770:	b2e0      	uxtb	r0, r4
 8000772:	2801      	cmp	r0, #1
 8000774:	dd4a      	ble.n	800080c <__aeabi_fadd+0x258>
 8000776:	2cff      	cmp	r4, #255	; 0xff
 8000778:	d0bd      	beq.n	80006f6 <__aeabi_fadd+0x142>
 800077a:	2607      	movs	r6, #7
 800077c:	18ed      	adds	r5, r5, r3
 800077e:	086d      	lsrs	r5, r5, #1
 8000780:	402e      	ands	r6, r5
 8000782:	e7a7      	b.n	80006d4 <__aeabi_fadd+0x120>
 8000784:	2307      	movs	r3, #7
 8000786:	4d57      	ldr	r5, [pc, #348]	; (80008e4 <__aeabi_fadd+0x330>)
 8000788:	1a24      	subs	r4, r4, r0
 800078a:	4035      	ands	r5, r6
 800078c:	401e      	ands	r6, r3
 800078e:	e7a1      	b.n	80006d4 <__aeabi_fadd+0x120>
 8000790:	2c00      	cmp	r4, #0
 8000792:	d11b      	bne.n	80007cc <__aeabi_fadd+0x218>
 8000794:	2d00      	cmp	r5, #0
 8000796:	d16e      	bne.n	8000876 <__aeabi_fadd+0x2c2>
 8000798:	2b00      	cmp	r3, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x1ea>
 800079c:	e09a      	b.n	80008d4 <__aeabi_fadd+0x320>
 800079e:	000a      	movs	r2, r1
 80007a0:	001d      	movs	r5, r3
 80007a2:	003c      	movs	r4, r7
 80007a4:	e724      	b.n	80005f0 <__aeabi_fadd+0x3c>
 80007a6:	3f01      	subs	r7, #1
 80007a8:	2f00      	cmp	r7, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_fadd+0x1fa>
 80007ac:	e758      	b.n	8000660 <__aeabi_fadd+0xac>
 80007ae:	2cff      	cmp	r4, #255	; 0xff
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0x200>
 80007b2:	e74a      	b.n	800064a <__aeabi_fadd+0x96>
 80007b4:	e7a7      	b.n	8000706 <__aeabi_fadd+0x152>
 80007b6:	1b5e      	subs	r6, r3, r5
 80007b8:	4689      	mov	r9, r1
 80007ba:	e776      	b.n	80006aa <__aeabi_fadd+0xf6>
 80007bc:	2d00      	cmp	r5, #0
 80007be:	d11c      	bne.n	80007fa <__aeabi_fadd+0x246>
 80007c0:	000a      	movs	r2, r1
 80007c2:	28ff      	cmp	r0, #255	; 0xff
 80007c4:	d01f      	beq.n	8000806 <__aeabi_fadd+0x252>
 80007c6:	0004      	movs	r4, r0
 80007c8:	001d      	movs	r5, r3
 80007ca:	e711      	b.n	80005f0 <__aeabi_fadd+0x3c>
 80007cc:	2d00      	cmp	r5, #0
 80007ce:	d15d      	bne.n	800088c <__aeabi_fadd+0x2d8>
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d117      	bne.n	8000804 <__aeabi_fadd+0x250>
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	2200      	movs	r2, #0
 80007d8:	03db      	lsls	r3, r3, #15
 80007da:	26ff      	movs	r6, #255	; 0xff
 80007dc:	e70f      	b.n	80005fe <__aeabi_fadd+0x4a>
 80007de:	000a      	movs	r2, r1
 80007e0:	26ff      	movs	r6, #255	; 0xff
 80007e2:	2300      	movs	r3, #0
 80007e4:	e70b      	b.n	80005fe <__aeabi_fadd+0x4a>
 80007e6:	2c00      	cmp	r4, #0
 80007e8:	d121      	bne.n	800082e <__aeabi_fadd+0x27a>
 80007ea:	2d00      	cmp	r5, #0
 80007ec:	d166      	bne.n	80008bc <__aeabi_fadd+0x308>
 80007ee:	28ff      	cmp	r0, #255	; 0xff
 80007f0:	d1e9      	bne.n	80007c6 <__aeabi_fadd+0x212>
 80007f2:	001d      	movs	r5, r3
 80007f4:	e787      	b.n	8000706 <__aeabi_fadd+0x152>
 80007f6:	2301      	movs	r3, #1
 80007f8:	e752      	b.n	80006a0 <__aeabi_fadd+0xec>
 80007fa:	1c7a      	adds	r2, r7, #1
 80007fc:	d0a7      	beq.n	800074e <__aeabi_fadd+0x19a>
 80007fe:	43fa      	mvns	r2, r7
 8000800:	28ff      	cmp	r0, #255	; 0xff
 8000802:	d199      	bne.n	8000738 <__aeabi_fadd+0x184>
 8000804:	000a      	movs	r2, r1
 8000806:	001d      	movs	r5, r3
 8000808:	24ff      	movs	r4, #255	; 0xff
 800080a:	e6f1      	b.n	80005f0 <__aeabi_fadd+0x3c>
 800080c:	2e00      	cmp	r6, #0
 800080e:	d121      	bne.n	8000854 <__aeabi_fadd+0x2a0>
 8000810:	2d00      	cmp	r5, #0
 8000812:	d04f      	beq.n	80008b4 <__aeabi_fadd+0x300>
 8000814:	2b00      	cmp	r3, #0
 8000816:	d04c      	beq.n	80008b2 <__aeabi_fadd+0x2fe>
 8000818:	18ed      	adds	r5, r5, r3
 800081a:	016b      	lsls	r3, r5, #5
 800081c:	d59e      	bpl.n	800075c <__aeabi_fadd+0x1a8>
 800081e:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <__aeabi_fadd+0x330>)
 8000820:	3607      	adds	r6, #7
 8000822:	402e      	ands	r6, r5
 8000824:	2401      	movs	r4, #1
 8000826:	401d      	ands	r5, r3
 8000828:	e754      	b.n	80006d4 <__aeabi_fadd+0x120>
 800082a:	2301      	movs	r3, #1
 800082c:	e718      	b.n	8000660 <__aeabi_fadd+0xac>
 800082e:	28ff      	cmp	r0, #255	; 0xff
 8000830:	d0df      	beq.n	80007f2 <__aeabi_fadd+0x23e>
 8000832:	2480      	movs	r4, #128	; 0x80
 8000834:	04e4      	lsls	r4, r4, #19
 8000836:	427f      	negs	r7, r7
 8000838:	4325      	orrs	r5, r4
 800083a:	2f1b      	cmp	r7, #27
 800083c:	dc4d      	bgt.n	80008da <__aeabi_fadd+0x326>
 800083e:	2620      	movs	r6, #32
 8000840:	1bf6      	subs	r6, r6, r7
 8000842:	002c      	movs	r4, r5
 8000844:	40b5      	lsls	r5, r6
 8000846:	40fc      	lsrs	r4, r7
 8000848:	1e6a      	subs	r2, r5, #1
 800084a:	4195      	sbcs	r5, r2
 800084c:	4325      	orrs	r5, r4
 800084e:	18ed      	adds	r5, r5, r3
 8000850:	0004      	movs	r4, r0
 8000852:	e706      	b.n	8000662 <__aeabi_fadd+0xae>
 8000854:	2d00      	cmp	r5, #0
 8000856:	d0cc      	beq.n	80007f2 <__aeabi_fadd+0x23e>
 8000858:	2b00      	cmp	r3, #0
 800085a:	d100      	bne.n	800085e <__aeabi_fadd+0x2aa>
 800085c:	e753      	b.n	8000706 <__aeabi_fadd+0x152>
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	4660      	mov	r0, ip
 8000862:	03c9      	lsls	r1, r1, #15
 8000864:	4208      	tst	r0, r1
 8000866:	d003      	beq.n	8000870 <__aeabi_fadd+0x2bc>
 8000868:	4640      	mov	r0, r8
 800086a:	4208      	tst	r0, r1
 800086c:	d100      	bne.n	8000870 <__aeabi_fadd+0x2bc>
 800086e:	001d      	movs	r5, r3
 8000870:	2101      	movs	r1, #1
 8000872:	4011      	ands	r1, r2
 8000874:	e747      	b.n	8000706 <__aeabi_fadd+0x152>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d100      	bne.n	800087c <__aeabi_fadd+0x2c8>
 800087a:	e6b9      	b.n	80005f0 <__aeabi_fadd+0x3c>
 800087c:	1aea      	subs	r2, r5, r3
 800087e:	0150      	lsls	r0, r2, #5
 8000880:	d525      	bpl.n	80008ce <__aeabi_fadd+0x31a>
 8000882:	2607      	movs	r6, #7
 8000884:	1b5d      	subs	r5, r3, r5
 8000886:	402e      	ands	r6, r5
 8000888:	4689      	mov	r9, r1
 800088a:	e723      	b.n	80006d4 <__aeabi_fadd+0x120>
 800088c:	24ff      	movs	r4, #255	; 0xff
 800088e:	2b00      	cmp	r3, #0
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x2e0>
 8000892:	e6ad      	b.n	80005f0 <__aeabi_fadd+0x3c>
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	4660      	mov	r0, ip
 8000898:	03d2      	lsls	r2, r2, #15
 800089a:	4210      	tst	r0, r2
 800089c:	d004      	beq.n	80008a8 <__aeabi_fadd+0x2f4>
 800089e:	4640      	mov	r0, r8
 80008a0:	4210      	tst	r0, r2
 80008a2:	d101      	bne.n	80008a8 <__aeabi_fadd+0x2f4>
 80008a4:	001d      	movs	r5, r3
 80008a6:	4689      	mov	r9, r1
 80008a8:	2201      	movs	r2, #1
 80008aa:	464b      	mov	r3, r9
 80008ac:	24ff      	movs	r4, #255	; 0xff
 80008ae:	401a      	ands	r2, r3
 80008b0:	e69e      	b.n	80005f0 <__aeabi_fadd+0x3c>
 80008b2:	002b      	movs	r3, r5
 80008b4:	08dd      	lsrs	r5, r3, #3
 80008b6:	000a      	movs	r2, r1
 80008b8:	2400      	movs	r4, #0
 80008ba:	e69d      	b.n	80005f8 <__aeabi_fadd+0x44>
 80008bc:	1c7a      	adds	r2, r7, #1
 80008be:	d0c6      	beq.n	800084e <__aeabi_fadd+0x29a>
 80008c0:	43ff      	mvns	r7, r7
 80008c2:	28ff      	cmp	r0, #255	; 0xff
 80008c4:	d1b9      	bne.n	800083a <__aeabi_fadd+0x286>
 80008c6:	001d      	movs	r5, r3
 80008c8:	e71d      	b.n	8000706 <__aeabi_fadd+0x152>
 80008ca:	2501      	movs	r5, #1
 80008cc:	e73f      	b.n	800074e <__aeabi_fadd+0x19a>
 80008ce:	1e15      	subs	r5, r2, #0
 80008d0:	d000      	beq.n	80008d4 <__aeabi_fadd+0x320>
 80008d2:	e744      	b.n	800075e <__aeabi_fadd+0x1aa>
 80008d4:	2200      	movs	r2, #0
 80008d6:	2300      	movs	r3, #0
 80008d8:	e691      	b.n	80005fe <__aeabi_fadd+0x4a>
 80008da:	2501      	movs	r5, #1
 80008dc:	e7b7      	b.n	800084e <__aeabi_fadd+0x29a>
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	7dffffff 	.word	0x7dffffff
 80008e4:	fbffffff 	.word	0xfbffffff

080008e8 <__aeabi_fdiv>:
 80008e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ea:	4657      	mov	r7, sl
 80008ec:	464e      	mov	r6, r9
 80008ee:	4645      	mov	r5, r8
 80008f0:	46de      	mov	lr, fp
 80008f2:	0244      	lsls	r4, r0, #9
 80008f4:	b5e0      	push	{r5, r6, r7, lr}
 80008f6:	0046      	lsls	r6, r0, #1
 80008f8:	4688      	mov	r8, r1
 80008fa:	0a64      	lsrs	r4, r4, #9
 80008fc:	0e36      	lsrs	r6, r6, #24
 80008fe:	0fc7      	lsrs	r7, r0, #31
 8000900:	2e00      	cmp	r6, #0
 8000902:	d063      	beq.n	80009cc <__aeabi_fdiv+0xe4>
 8000904:	2eff      	cmp	r6, #255	; 0xff
 8000906:	d024      	beq.n	8000952 <__aeabi_fdiv+0x6a>
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	00e4      	lsls	r4, r4, #3
 800090c:	04db      	lsls	r3, r3, #19
 800090e:	431c      	orrs	r4, r3
 8000910:	2300      	movs	r3, #0
 8000912:	4699      	mov	r9, r3
 8000914:	469b      	mov	fp, r3
 8000916:	3e7f      	subs	r6, #127	; 0x7f
 8000918:	4643      	mov	r3, r8
 800091a:	4642      	mov	r2, r8
 800091c:	025d      	lsls	r5, r3, #9
 800091e:	0fd2      	lsrs	r2, r2, #31
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	0a6d      	lsrs	r5, r5, #9
 8000924:	0e1b      	lsrs	r3, r3, #24
 8000926:	4690      	mov	r8, r2
 8000928:	4692      	mov	sl, r2
 800092a:	d065      	beq.n	80009f8 <__aeabi_fdiv+0x110>
 800092c:	2bff      	cmp	r3, #255	; 0xff
 800092e:	d055      	beq.n	80009dc <__aeabi_fdiv+0xf4>
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	2100      	movs	r1, #0
 8000934:	00ed      	lsls	r5, r5, #3
 8000936:	04d2      	lsls	r2, r2, #19
 8000938:	3b7f      	subs	r3, #127	; 0x7f
 800093a:	4315      	orrs	r5, r2
 800093c:	1af6      	subs	r6, r6, r3
 800093e:	4643      	mov	r3, r8
 8000940:	464a      	mov	r2, r9
 8000942:	407b      	eors	r3, r7
 8000944:	2a0f      	cmp	r2, #15
 8000946:	d900      	bls.n	800094a <__aeabi_fdiv+0x62>
 8000948:	e08d      	b.n	8000a66 <__aeabi_fdiv+0x17e>
 800094a:	486d      	ldr	r0, [pc, #436]	; (8000b00 <__aeabi_fdiv+0x218>)
 800094c:	0092      	lsls	r2, r2, #2
 800094e:	5882      	ldr	r2, [r0, r2]
 8000950:	4697      	mov	pc, r2
 8000952:	2c00      	cmp	r4, #0
 8000954:	d154      	bne.n	8000a00 <__aeabi_fdiv+0x118>
 8000956:	2308      	movs	r3, #8
 8000958:	4699      	mov	r9, r3
 800095a:	3b06      	subs	r3, #6
 800095c:	26ff      	movs	r6, #255	; 0xff
 800095e:	469b      	mov	fp, r3
 8000960:	e7da      	b.n	8000918 <__aeabi_fdiv+0x30>
 8000962:	2500      	movs	r5, #0
 8000964:	4653      	mov	r3, sl
 8000966:	2902      	cmp	r1, #2
 8000968:	d01b      	beq.n	80009a2 <__aeabi_fdiv+0xba>
 800096a:	2903      	cmp	r1, #3
 800096c:	d100      	bne.n	8000970 <__aeabi_fdiv+0x88>
 800096e:	e0bf      	b.n	8000af0 <__aeabi_fdiv+0x208>
 8000970:	2901      	cmp	r1, #1
 8000972:	d028      	beq.n	80009c6 <__aeabi_fdiv+0xde>
 8000974:	0030      	movs	r0, r6
 8000976:	307f      	adds	r0, #127	; 0x7f
 8000978:	2800      	cmp	r0, #0
 800097a:	dd20      	ble.n	80009be <__aeabi_fdiv+0xd6>
 800097c:	076a      	lsls	r2, r5, #29
 800097e:	d004      	beq.n	800098a <__aeabi_fdiv+0xa2>
 8000980:	220f      	movs	r2, #15
 8000982:	402a      	ands	r2, r5
 8000984:	2a04      	cmp	r2, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fdiv+0xa2>
 8000988:	3504      	adds	r5, #4
 800098a:	012a      	lsls	r2, r5, #4
 800098c:	d503      	bpl.n	8000996 <__aeabi_fdiv+0xae>
 800098e:	0030      	movs	r0, r6
 8000990:	4a5c      	ldr	r2, [pc, #368]	; (8000b04 <__aeabi_fdiv+0x21c>)
 8000992:	3080      	adds	r0, #128	; 0x80
 8000994:	4015      	ands	r5, r2
 8000996:	28fe      	cmp	r0, #254	; 0xfe
 8000998:	dc03      	bgt.n	80009a2 <__aeabi_fdiv+0xba>
 800099a:	01ac      	lsls	r4, r5, #6
 800099c:	0a64      	lsrs	r4, r4, #9
 800099e:	b2c2      	uxtb	r2, r0
 80009a0:	e001      	b.n	80009a6 <__aeabi_fdiv+0xbe>
 80009a2:	22ff      	movs	r2, #255	; 0xff
 80009a4:	2400      	movs	r4, #0
 80009a6:	0264      	lsls	r4, r4, #9
 80009a8:	05d2      	lsls	r2, r2, #23
 80009aa:	0a60      	lsrs	r0, r4, #9
 80009ac:	07db      	lsls	r3, r3, #31
 80009ae:	4310      	orrs	r0, r2
 80009b0:	4318      	orrs	r0, r3
 80009b2:	bc3c      	pop	{r2, r3, r4, r5}
 80009b4:	4690      	mov	r8, r2
 80009b6:	4699      	mov	r9, r3
 80009b8:	46a2      	mov	sl, r4
 80009ba:	46ab      	mov	fp, r5
 80009bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009be:	2201      	movs	r2, #1
 80009c0:	1a10      	subs	r0, r2, r0
 80009c2:	281b      	cmp	r0, #27
 80009c4:	dd7c      	ble.n	8000ac0 <__aeabi_fdiv+0x1d8>
 80009c6:	2200      	movs	r2, #0
 80009c8:	2400      	movs	r4, #0
 80009ca:	e7ec      	b.n	80009a6 <__aeabi_fdiv+0xbe>
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	d11d      	bne.n	8000a0c <__aeabi_fdiv+0x124>
 80009d0:	2304      	movs	r3, #4
 80009d2:	4699      	mov	r9, r3
 80009d4:	3b03      	subs	r3, #3
 80009d6:	2600      	movs	r6, #0
 80009d8:	469b      	mov	fp, r3
 80009da:	e79d      	b.n	8000918 <__aeabi_fdiv+0x30>
 80009dc:	3eff      	subs	r6, #255	; 0xff
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d120      	bne.n	8000a24 <__aeabi_fdiv+0x13c>
 80009e2:	2102      	movs	r1, #2
 80009e4:	4643      	mov	r3, r8
 80009e6:	464a      	mov	r2, r9
 80009e8:	407b      	eors	r3, r7
 80009ea:	430a      	orrs	r2, r1
 80009ec:	2a0f      	cmp	r2, #15
 80009ee:	d8d8      	bhi.n	80009a2 <__aeabi_fdiv+0xba>
 80009f0:	4845      	ldr	r0, [pc, #276]	; (8000b08 <__aeabi_fdiv+0x220>)
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	5882      	ldr	r2, [r0, r2]
 80009f6:	4697      	mov	pc, r2
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d119      	bne.n	8000a30 <__aeabi_fdiv+0x148>
 80009fc:	2101      	movs	r1, #1
 80009fe:	e7f1      	b.n	80009e4 <__aeabi_fdiv+0xfc>
 8000a00:	230c      	movs	r3, #12
 8000a02:	4699      	mov	r9, r3
 8000a04:	3b09      	subs	r3, #9
 8000a06:	26ff      	movs	r6, #255	; 0xff
 8000a08:	469b      	mov	fp, r3
 8000a0a:	e785      	b.n	8000918 <__aeabi_fdiv+0x30>
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f002 f9d9 	bl	8002dc4 <__clzsi2>
 8000a12:	2676      	movs	r6, #118	; 0x76
 8000a14:	1f43      	subs	r3, r0, #5
 8000a16:	409c      	lsls	r4, r3
 8000a18:	2300      	movs	r3, #0
 8000a1a:	4276      	negs	r6, r6
 8000a1c:	1a36      	subs	r6, r6, r0
 8000a1e:	4699      	mov	r9, r3
 8000a20:	469b      	mov	fp, r3
 8000a22:	e779      	b.n	8000918 <__aeabi_fdiv+0x30>
 8000a24:	464a      	mov	r2, r9
 8000a26:	2303      	movs	r3, #3
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	4691      	mov	r9, r2
 8000a2c:	2103      	movs	r1, #3
 8000a2e:	e786      	b.n	800093e <__aeabi_fdiv+0x56>
 8000a30:	0028      	movs	r0, r5
 8000a32:	f002 f9c7 	bl	8002dc4 <__clzsi2>
 8000a36:	1f43      	subs	r3, r0, #5
 8000a38:	1836      	adds	r6, r6, r0
 8000a3a:	409d      	lsls	r5, r3
 8000a3c:	3676      	adds	r6, #118	; 0x76
 8000a3e:	2100      	movs	r1, #0
 8000a40:	e77d      	b.n	800093e <__aeabi_fdiv+0x56>
 8000a42:	2480      	movs	r4, #128	; 0x80
 8000a44:	2300      	movs	r3, #0
 8000a46:	03e4      	lsls	r4, r4, #15
 8000a48:	22ff      	movs	r2, #255	; 0xff
 8000a4a:	e7ac      	b.n	80009a6 <__aeabi_fdiv+0xbe>
 8000a4c:	2500      	movs	r5, #0
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	03db      	lsls	r3, r3, #15
 8000a52:	421c      	tst	r4, r3
 8000a54:	d028      	beq.n	8000aa8 <__aeabi_fdiv+0x1c0>
 8000a56:	421d      	tst	r5, r3
 8000a58:	d126      	bne.n	8000aa8 <__aeabi_fdiv+0x1c0>
 8000a5a:	432b      	orrs	r3, r5
 8000a5c:	025c      	lsls	r4, r3, #9
 8000a5e:	0a64      	lsrs	r4, r4, #9
 8000a60:	4643      	mov	r3, r8
 8000a62:	22ff      	movs	r2, #255	; 0xff
 8000a64:	e79f      	b.n	80009a6 <__aeabi_fdiv+0xbe>
 8000a66:	0162      	lsls	r2, r4, #5
 8000a68:	016c      	lsls	r4, r5, #5
 8000a6a:	42a2      	cmp	r2, r4
 8000a6c:	d224      	bcs.n	8000ab8 <__aeabi_fdiv+0x1d0>
 8000a6e:	211b      	movs	r1, #27
 8000a70:	2500      	movs	r5, #0
 8000a72:	3e01      	subs	r6, #1
 8000a74:	2701      	movs	r7, #1
 8000a76:	0010      	movs	r0, r2
 8000a78:	006d      	lsls	r5, r5, #1
 8000a7a:	0052      	lsls	r2, r2, #1
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	db01      	blt.n	8000a84 <__aeabi_fdiv+0x19c>
 8000a80:	4294      	cmp	r4, r2
 8000a82:	d801      	bhi.n	8000a88 <__aeabi_fdiv+0x1a0>
 8000a84:	1b12      	subs	r2, r2, r4
 8000a86:	433d      	orrs	r5, r7
 8000a88:	3901      	subs	r1, #1
 8000a8a:	2900      	cmp	r1, #0
 8000a8c:	d1f3      	bne.n	8000a76 <__aeabi_fdiv+0x18e>
 8000a8e:	0014      	movs	r4, r2
 8000a90:	1e62      	subs	r2, r4, #1
 8000a92:	4194      	sbcs	r4, r2
 8000a94:	4325      	orrs	r5, r4
 8000a96:	e76d      	b.n	8000974 <__aeabi_fdiv+0x8c>
 8000a98:	46ba      	mov	sl, r7
 8000a9a:	4659      	mov	r1, fp
 8000a9c:	0025      	movs	r5, r4
 8000a9e:	4653      	mov	r3, sl
 8000aa0:	2902      	cmp	r1, #2
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_fdiv+0x1be>
 8000aa4:	e761      	b.n	800096a <__aeabi_fdiv+0x82>
 8000aa6:	e77c      	b.n	80009a2 <__aeabi_fdiv+0xba>
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	03db      	lsls	r3, r3, #15
 8000aac:	431c      	orrs	r4, r3
 8000aae:	0264      	lsls	r4, r4, #9
 8000ab0:	0a64      	lsrs	r4, r4, #9
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	22ff      	movs	r2, #255	; 0xff
 8000ab6:	e776      	b.n	80009a6 <__aeabi_fdiv+0xbe>
 8000ab8:	1b12      	subs	r2, r2, r4
 8000aba:	211a      	movs	r1, #26
 8000abc:	2501      	movs	r5, #1
 8000abe:	e7d9      	b.n	8000a74 <__aeabi_fdiv+0x18c>
 8000ac0:	369e      	adds	r6, #158	; 0x9e
 8000ac2:	002a      	movs	r2, r5
 8000ac4:	40b5      	lsls	r5, r6
 8000ac6:	002c      	movs	r4, r5
 8000ac8:	40c2      	lsrs	r2, r0
 8000aca:	1e65      	subs	r5, r4, #1
 8000acc:	41ac      	sbcs	r4, r5
 8000ace:	4314      	orrs	r4, r2
 8000ad0:	0762      	lsls	r2, r4, #29
 8000ad2:	d004      	beq.n	8000ade <__aeabi_fdiv+0x1f6>
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	4022      	ands	r2, r4
 8000ad8:	2a04      	cmp	r2, #4
 8000ada:	d000      	beq.n	8000ade <__aeabi_fdiv+0x1f6>
 8000adc:	3404      	adds	r4, #4
 8000ade:	0162      	lsls	r2, r4, #5
 8000ae0:	d403      	bmi.n	8000aea <__aeabi_fdiv+0x202>
 8000ae2:	01a4      	lsls	r4, r4, #6
 8000ae4:	0a64      	lsrs	r4, r4, #9
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	e75d      	b.n	80009a6 <__aeabi_fdiv+0xbe>
 8000aea:	2201      	movs	r2, #1
 8000aec:	2400      	movs	r4, #0
 8000aee:	e75a      	b.n	80009a6 <__aeabi_fdiv+0xbe>
 8000af0:	2480      	movs	r4, #128	; 0x80
 8000af2:	03e4      	lsls	r4, r4, #15
 8000af4:	432c      	orrs	r4, r5
 8000af6:	0264      	lsls	r4, r4, #9
 8000af8:	0a64      	lsrs	r4, r4, #9
 8000afa:	22ff      	movs	r2, #255	; 0xff
 8000afc:	e753      	b.n	80009a6 <__aeabi_fdiv+0xbe>
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	08005020 	.word	0x08005020
 8000b04:	f7ffffff 	.word	0xf7ffffff
 8000b08:	08005060 	.word	0x08005060

08000b0c <__aeabi_fmul>:
 8000b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0e:	464e      	mov	r6, r9
 8000b10:	4657      	mov	r7, sl
 8000b12:	4645      	mov	r5, r8
 8000b14:	46de      	mov	lr, fp
 8000b16:	b5e0      	push	{r5, r6, r7, lr}
 8000b18:	0243      	lsls	r3, r0, #9
 8000b1a:	0a5b      	lsrs	r3, r3, #9
 8000b1c:	0045      	lsls	r5, r0, #1
 8000b1e:	b083      	sub	sp, #12
 8000b20:	1c0f      	adds	r7, r1, #0
 8000b22:	4699      	mov	r9, r3
 8000b24:	0e2d      	lsrs	r5, r5, #24
 8000b26:	0fc6      	lsrs	r6, r0, #31
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d057      	beq.n	8000bdc <__aeabi_fmul+0xd0>
 8000b2c:	2dff      	cmp	r5, #255	; 0xff
 8000b2e:	d024      	beq.n	8000b7a <__aeabi_fmul+0x6e>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	04c0      	lsls	r0, r0, #19
 8000b36:	4318      	orrs	r0, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4681      	mov	r9, r0
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	469b      	mov	fp, r3
 8000b40:	3d7f      	subs	r5, #127	; 0x7f
 8000b42:	027c      	lsls	r4, r7, #9
 8000b44:	007a      	lsls	r2, r7, #1
 8000b46:	0ffb      	lsrs	r3, r7, #31
 8000b48:	0a64      	lsrs	r4, r4, #9
 8000b4a:	0e12      	lsrs	r2, r2, #24
 8000b4c:	4698      	mov	r8, r3
 8000b4e:	d023      	beq.n	8000b98 <__aeabi_fmul+0x8c>
 8000b50:	2aff      	cmp	r2, #255	; 0xff
 8000b52:	d04b      	beq.n	8000bec <__aeabi_fmul+0xe0>
 8000b54:	00e3      	lsls	r3, r4, #3
 8000b56:	2480      	movs	r4, #128	; 0x80
 8000b58:	2000      	movs	r0, #0
 8000b5a:	04e4      	lsls	r4, r4, #19
 8000b5c:	3a7f      	subs	r2, #127	; 0x7f
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	18ad      	adds	r5, r5, r2
 8000b62:	1c6b      	adds	r3, r5, #1
 8000b64:	4647      	mov	r7, r8
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	4653      	mov	r3, sl
 8000b6a:	4077      	eors	r7, r6
 8000b6c:	003a      	movs	r2, r7
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	d848      	bhi.n	8000c04 <__aeabi_fmul+0xf8>
 8000b72:	497d      	ldr	r1, [pc, #500]	; (8000d68 <__aeabi_fmul+0x25c>)
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	58cb      	ldr	r3, [r1, r3]
 8000b78:	469f      	mov	pc, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_fmul+0x74>
 8000b7e:	e085      	b.n	8000c8c <__aeabi_fmul+0x180>
 8000b80:	3308      	adds	r3, #8
 8000b82:	469a      	mov	sl, r3
 8000b84:	3b06      	subs	r3, #6
 8000b86:	469b      	mov	fp, r3
 8000b88:	027c      	lsls	r4, r7, #9
 8000b8a:	007a      	lsls	r2, r7, #1
 8000b8c:	0ffb      	lsrs	r3, r7, #31
 8000b8e:	25ff      	movs	r5, #255	; 0xff
 8000b90:	0a64      	lsrs	r4, r4, #9
 8000b92:	0e12      	lsrs	r2, r2, #24
 8000b94:	4698      	mov	r8, r3
 8000b96:	d1db      	bne.n	8000b50 <__aeabi_fmul+0x44>
 8000b98:	2c00      	cmp	r4, #0
 8000b9a:	d000      	beq.n	8000b9e <__aeabi_fmul+0x92>
 8000b9c:	e090      	b.n	8000cc0 <__aeabi_fmul+0x1b4>
 8000b9e:	4652      	mov	r2, sl
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	4692      	mov	sl, r2
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	e7db      	b.n	8000b62 <__aeabi_fmul+0x56>
 8000baa:	464c      	mov	r4, r9
 8000bac:	4658      	mov	r0, fp
 8000bae:	0017      	movs	r7, r2
 8000bb0:	2802      	cmp	r0, #2
 8000bb2:	d024      	beq.n	8000bfe <__aeabi_fmul+0xf2>
 8000bb4:	2803      	cmp	r0, #3
 8000bb6:	d100      	bne.n	8000bba <__aeabi_fmul+0xae>
 8000bb8:	e0cf      	b.n	8000d5a <__aeabi_fmul+0x24e>
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2801      	cmp	r0, #1
 8000bc0:	d14d      	bne.n	8000c5e <__aeabi_fmul+0x152>
 8000bc2:	0258      	lsls	r0, r3, #9
 8000bc4:	05d2      	lsls	r2, r2, #23
 8000bc6:	0a40      	lsrs	r0, r0, #9
 8000bc8:	07ff      	lsls	r7, r7, #31
 8000bca:	4310      	orrs	r0, r2
 8000bcc:	4338      	orrs	r0, r7
 8000bce:	b003      	add	sp, #12
 8000bd0:	bc3c      	pop	{r2, r3, r4, r5}
 8000bd2:	4690      	mov	r8, r2
 8000bd4:	4699      	mov	r9, r3
 8000bd6:	46a2      	mov	sl, r4
 8000bd8:	46ab      	mov	fp, r5
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d15b      	bne.n	8000c98 <__aeabi_fmul+0x18c>
 8000be0:	2304      	movs	r3, #4
 8000be2:	469a      	mov	sl, r3
 8000be4:	3b03      	subs	r3, #3
 8000be6:	2500      	movs	r5, #0
 8000be8:	469b      	mov	fp, r3
 8000bea:	e7aa      	b.n	8000b42 <__aeabi_fmul+0x36>
 8000bec:	35ff      	adds	r5, #255	; 0xff
 8000bee:	2c00      	cmp	r4, #0
 8000bf0:	d160      	bne.n	8000cb4 <__aeabi_fmul+0x1a8>
 8000bf2:	4652      	mov	r2, sl
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	4692      	mov	sl, r2
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	e7b1      	b.n	8000b62 <__aeabi_fmul+0x56>
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	2300      	movs	r3, #0
 8000c02:	e7de      	b.n	8000bc2 <__aeabi_fmul+0xb6>
 8000c04:	464b      	mov	r3, r9
 8000c06:	0c1b      	lsrs	r3, r3, #16
 8000c08:	469c      	mov	ip, r3
 8000c0a:	464b      	mov	r3, r9
 8000c0c:	0426      	lsls	r6, r4, #16
 8000c0e:	0c36      	lsrs	r6, r6, #16
 8000c10:	0418      	lsls	r0, r3, #16
 8000c12:	4661      	mov	r1, ip
 8000c14:	0033      	movs	r3, r6
 8000c16:	0c22      	lsrs	r2, r4, #16
 8000c18:	4664      	mov	r4, ip
 8000c1a:	0c00      	lsrs	r0, r0, #16
 8000c1c:	4343      	muls	r3, r0
 8000c1e:	434e      	muls	r6, r1
 8000c20:	4350      	muls	r0, r2
 8000c22:	4354      	muls	r4, r2
 8000c24:	1980      	adds	r0, r0, r6
 8000c26:	0c1a      	lsrs	r2, r3, #16
 8000c28:	1812      	adds	r2, r2, r0
 8000c2a:	4296      	cmp	r6, r2
 8000c2c:	d903      	bls.n	8000c36 <__aeabi_fmul+0x12a>
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	0249      	lsls	r1, r1, #9
 8000c32:	468c      	mov	ip, r1
 8000c34:	4464      	add	r4, ip
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	0c1b      	lsrs	r3, r3, #16
 8000c3a:	0410      	lsls	r0, r2, #16
 8000c3c:	18c0      	adds	r0, r0, r3
 8000c3e:	0183      	lsls	r3, r0, #6
 8000c40:	1e5e      	subs	r6, r3, #1
 8000c42:	41b3      	sbcs	r3, r6
 8000c44:	0e80      	lsrs	r0, r0, #26
 8000c46:	4318      	orrs	r0, r3
 8000c48:	0c13      	lsrs	r3, r2, #16
 8000c4a:	191b      	adds	r3, r3, r4
 8000c4c:	019b      	lsls	r3, r3, #6
 8000c4e:	4303      	orrs	r3, r0
 8000c50:	001c      	movs	r4, r3
 8000c52:	0123      	lsls	r3, r4, #4
 8000c54:	d579      	bpl.n	8000d4a <__aeabi_fmul+0x23e>
 8000c56:	2301      	movs	r3, #1
 8000c58:	0862      	lsrs	r2, r4, #1
 8000c5a:	401c      	ands	r4, r3
 8000c5c:	4314      	orrs	r4, r2
 8000c5e:	9a01      	ldr	r2, [sp, #4]
 8000c60:	327f      	adds	r2, #127	; 0x7f
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	dd4d      	ble.n	8000d02 <__aeabi_fmul+0x1f6>
 8000c66:	0763      	lsls	r3, r4, #29
 8000c68:	d004      	beq.n	8000c74 <__aeabi_fmul+0x168>
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	4023      	ands	r3, r4
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d000      	beq.n	8000c74 <__aeabi_fmul+0x168>
 8000c72:	3404      	adds	r4, #4
 8000c74:	0123      	lsls	r3, r4, #4
 8000c76:	d503      	bpl.n	8000c80 <__aeabi_fmul+0x174>
 8000c78:	4b3c      	ldr	r3, [pc, #240]	; (8000d6c <__aeabi_fmul+0x260>)
 8000c7a:	9a01      	ldr	r2, [sp, #4]
 8000c7c:	401c      	ands	r4, r3
 8000c7e:	3280      	adds	r2, #128	; 0x80
 8000c80:	2afe      	cmp	r2, #254	; 0xfe
 8000c82:	dcbc      	bgt.n	8000bfe <__aeabi_fmul+0xf2>
 8000c84:	01a3      	lsls	r3, r4, #6
 8000c86:	0a5b      	lsrs	r3, r3, #9
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	e79a      	b.n	8000bc2 <__aeabi_fmul+0xb6>
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	469a      	mov	sl, r3
 8000c90:	3b09      	subs	r3, #9
 8000c92:	25ff      	movs	r5, #255	; 0xff
 8000c94:	469b      	mov	fp, r3
 8000c96:	e754      	b.n	8000b42 <__aeabi_fmul+0x36>
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f002 f893 	bl	8002dc4 <__clzsi2>
 8000c9e:	464a      	mov	r2, r9
 8000ca0:	1f43      	subs	r3, r0, #5
 8000ca2:	2576      	movs	r5, #118	; 0x76
 8000ca4:	409a      	lsls	r2, r3
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	426d      	negs	r5, r5
 8000caa:	4691      	mov	r9, r2
 8000cac:	1a2d      	subs	r5, r5, r0
 8000cae:	469a      	mov	sl, r3
 8000cb0:	469b      	mov	fp, r3
 8000cb2:	e746      	b.n	8000b42 <__aeabi_fmul+0x36>
 8000cb4:	4652      	mov	r2, sl
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	4692      	mov	sl, r2
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	e750      	b.n	8000b62 <__aeabi_fmul+0x56>
 8000cc0:	0020      	movs	r0, r4
 8000cc2:	f002 f87f 	bl	8002dc4 <__clzsi2>
 8000cc6:	1f43      	subs	r3, r0, #5
 8000cc8:	1a2d      	subs	r5, r5, r0
 8000cca:	409c      	lsls	r4, r3
 8000ccc:	3d76      	subs	r5, #118	; 0x76
 8000cce:	2000      	movs	r0, #0
 8000cd0:	e747      	b.n	8000b62 <__aeabi_fmul+0x56>
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	2700      	movs	r7, #0
 8000cd6:	03db      	lsls	r3, r3, #15
 8000cd8:	22ff      	movs	r2, #255	; 0xff
 8000cda:	e772      	b.n	8000bc2 <__aeabi_fmul+0xb6>
 8000cdc:	4642      	mov	r2, r8
 8000cde:	e766      	b.n	8000bae <__aeabi_fmul+0xa2>
 8000ce0:	464c      	mov	r4, r9
 8000ce2:	0032      	movs	r2, r6
 8000ce4:	4658      	mov	r0, fp
 8000ce6:	e762      	b.n	8000bae <__aeabi_fmul+0xa2>
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	464a      	mov	r2, r9
 8000cec:	03db      	lsls	r3, r3, #15
 8000cee:	421a      	tst	r2, r3
 8000cf0:	d022      	beq.n	8000d38 <__aeabi_fmul+0x22c>
 8000cf2:	421c      	tst	r4, r3
 8000cf4:	d120      	bne.n	8000d38 <__aeabi_fmul+0x22c>
 8000cf6:	4323      	orrs	r3, r4
 8000cf8:	025b      	lsls	r3, r3, #9
 8000cfa:	0a5b      	lsrs	r3, r3, #9
 8000cfc:	4647      	mov	r7, r8
 8000cfe:	22ff      	movs	r2, #255	; 0xff
 8000d00:	e75f      	b.n	8000bc2 <__aeabi_fmul+0xb6>
 8000d02:	2301      	movs	r3, #1
 8000d04:	1a9a      	subs	r2, r3, r2
 8000d06:	2a1b      	cmp	r2, #27
 8000d08:	dc21      	bgt.n	8000d4e <__aeabi_fmul+0x242>
 8000d0a:	0023      	movs	r3, r4
 8000d0c:	9901      	ldr	r1, [sp, #4]
 8000d0e:	40d3      	lsrs	r3, r2
 8000d10:	319e      	adds	r1, #158	; 0x9e
 8000d12:	408c      	lsls	r4, r1
 8000d14:	001a      	movs	r2, r3
 8000d16:	0023      	movs	r3, r4
 8000d18:	1e5c      	subs	r4, r3, #1
 8000d1a:	41a3      	sbcs	r3, r4
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	075a      	lsls	r2, r3, #29
 8000d20:	d004      	beq.n	8000d2c <__aeabi_fmul+0x220>
 8000d22:	220f      	movs	r2, #15
 8000d24:	401a      	ands	r2, r3
 8000d26:	2a04      	cmp	r2, #4
 8000d28:	d000      	beq.n	8000d2c <__aeabi_fmul+0x220>
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	015a      	lsls	r2, r3, #5
 8000d2e:	d411      	bmi.n	8000d54 <__aeabi_fmul+0x248>
 8000d30:	019b      	lsls	r3, r3, #6
 8000d32:	0a5b      	lsrs	r3, r3, #9
 8000d34:	2200      	movs	r2, #0
 8000d36:	e744      	b.n	8000bc2 <__aeabi_fmul+0xb6>
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	03db      	lsls	r3, r3, #15
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	025b      	lsls	r3, r3, #9
 8000d42:	0a5b      	lsrs	r3, r3, #9
 8000d44:	0037      	movs	r7, r6
 8000d46:	22ff      	movs	r2, #255	; 0xff
 8000d48:	e73b      	b.n	8000bc2 <__aeabi_fmul+0xb6>
 8000d4a:	9501      	str	r5, [sp, #4]
 8000d4c:	e787      	b.n	8000c5e <__aeabi_fmul+0x152>
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2300      	movs	r3, #0
 8000d52:	e736      	b.n	8000bc2 <__aeabi_fmul+0xb6>
 8000d54:	2201      	movs	r2, #1
 8000d56:	2300      	movs	r3, #0
 8000d58:	e733      	b.n	8000bc2 <__aeabi_fmul+0xb6>
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	03db      	lsls	r3, r3, #15
 8000d5e:	4323      	orrs	r3, r4
 8000d60:	025b      	lsls	r3, r3, #9
 8000d62:	0a5b      	lsrs	r3, r3, #9
 8000d64:	22ff      	movs	r2, #255	; 0xff
 8000d66:	e72c      	b.n	8000bc2 <__aeabi_fmul+0xb6>
 8000d68:	080050a0 	.word	0x080050a0
 8000d6c:	f7ffffff 	.word	0xf7ffffff

08000d70 <__aeabi_fsub>:
 8000d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d72:	4647      	mov	r7, r8
 8000d74:	46ce      	mov	lr, r9
 8000d76:	0044      	lsls	r4, r0, #1
 8000d78:	0fc2      	lsrs	r2, r0, #31
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	0247      	lsls	r7, r0, #9
 8000d7e:	0248      	lsls	r0, r1, #9
 8000d80:	0a40      	lsrs	r0, r0, #9
 8000d82:	4684      	mov	ip, r0
 8000d84:	4666      	mov	r6, ip
 8000d86:	0048      	lsls	r0, r1, #1
 8000d88:	0a7f      	lsrs	r7, r7, #9
 8000d8a:	0e24      	lsrs	r4, r4, #24
 8000d8c:	00f6      	lsls	r6, r6, #3
 8000d8e:	0025      	movs	r5, r4
 8000d90:	4690      	mov	r8, r2
 8000d92:	00fb      	lsls	r3, r7, #3
 8000d94:	0e00      	lsrs	r0, r0, #24
 8000d96:	0fc9      	lsrs	r1, r1, #31
 8000d98:	46b1      	mov	r9, r6
 8000d9a:	28ff      	cmp	r0, #255	; 0xff
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_fsub+0x30>
 8000d9e:	e085      	b.n	8000eac <__aeabi_fsub+0x13c>
 8000da0:	2601      	movs	r6, #1
 8000da2:	4071      	eors	r1, r6
 8000da4:	1a26      	subs	r6, r4, r0
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d057      	beq.n	8000e5a <__aeabi_fsub+0xea>
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	dd43      	ble.n	8000e36 <__aeabi_fsub+0xc6>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d000      	beq.n	8000db4 <__aeabi_fsub+0x44>
 8000db2:	e07f      	b.n	8000eb4 <__aeabi_fsub+0x144>
 8000db4:	4649      	mov	r1, r9
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d100      	bne.n	8000dbc <__aeabi_fsub+0x4c>
 8000dba:	e0aa      	b.n	8000f12 <__aeabi_fsub+0x1a2>
 8000dbc:	3e01      	subs	r6, #1
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_fsub+0x54>
 8000dc2:	e0f7      	b.n	8000fb4 <__aeabi_fsub+0x244>
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	015a      	lsls	r2, r3, #5
 8000dc8:	d400      	bmi.n	8000dcc <__aeabi_fsub+0x5c>
 8000dca:	e08b      	b.n	8000ee4 <__aeabi_fsub+0x174>
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	099c      	lsrs	r4, r3, #6
 8000dd0:	0020      	movs	r0, r4
 8000dd2:	f001 fff7 	bl	8002dc4 <__clzsi2>
 8000dd6:	3805      	subs	r0, #5
 8000dd8:	4084      	lsls	r4, r0
 8000dda:	4285      	cmp	r5, r0
 8000ddc:	dd00      	ble.n	8000de0 <__aeabi_fsub+0x70>
 8000dde:	e0d3      	b.n	8000f88 <__aeabi_fsub+0x218>
 8000de0:	1b45      	subs	r5, r0, r5
 8000de2:	0023      	movs	r3, r4
 8000de4:	2020      	movs	r0, #32
 8000de6:	3501      	adds	r5, #1
 8000de8:	40eb      	lsrs	r3, r5
 8000dea:	1b45      	subs	r5, r0, r5
 8000dec:	40ac      	lsls	r4, r5
 8000dee:	1e62      	subs	r2, r4, #1
 8000df0:	4194      	sbcs	r4, r2
 8000df2:	4323      	orrs	r3, r4
 8000df4:	2407      	movs	r4, #7
 8000df6:	2500      	movs	r5, #0
 8000df8:	401c      	ands	r4, r3
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4641      	mov	r1, r8
 8000dfe:	400a      	ands	r2, r1
 8000e00:	2c00      	cmp	r4, #0
 8000e02:	d004      	beq.n	8000e0e <__aeabi_fsub+0x9e>
 8000e04:	210f      	movs	r1, #15
 8000e06:	4019      	ands	r1, r3
 8000e08:	2904      	cmp	r1, #4
 8000e0a:	d000      	beq.n	8000e0e <__aeabi_fsub+0x9e>
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	0159      	lsls	r1, r3, #5
 8000e10:	d400      	bmi.n	8000e14 <__aeabi_fsub+0xa4>
 8000e12:	e080      	b.n	8000f16 <__aeabi_fsub+0x1a6>
 8000e14:	3501      	adds	r5, #1
 8000e16:	b2ec      	uxtb	r4, r5
 8000e18:	2dff      	cmp	r5, #255	; 0xff
 8000e1a:	d000      	beq.n	8000e1e <__aeabi_fsub+0xae>
 8000e1c:	e0a3      	b.n	8000f66 <__aeabi_fsub+0x1f6>
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	025b      	lsls	r3, r3, #9
 8000e24:	05e4      	lsls	r4, r4, #23
 8000e26:	0a58      	lsrs	r0, r3, #9
 8000e28:	07d2      	lsls	r2, r2, #31
 8000e2a:	4320      	orrs	r0, r4
 8000e2c:	4310      	orrs	r0, r2
 8000e2e:	bc0c      	pop	{r2, r3}
 8000e30:	4690      	mov	r8, r2
 8000e32:	4699      	mov	r9, r3
 8000e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d174      	bne.n	8000f24 <__aeabi_fsub+0x1b4>
 8000e3a:	1c60      	adds	r0, r4, #1
 8000e3c:	b2c0      	uxtb	r0, r0
 8000e3e:	2801      	cmp	r0, #1
 8000e40:	dc00      	bgt.n	8000e44 <__aeabi_fsub+0xd4>
 8000e42:	e0a7      	b.n	8000f94 <__aeabi_fsub+0x224>
 8000e44:	464a      	mov	r2, r9
 8000e46:	1a9c      	subs	r4, r3, r2
 8000e48:	0162      	lsls	r2, r4, #5
 8000e4a:	d500      	bpl.n	8000e4e <__aeabi_fsub+0xde>
 8000e4c:	e0b6      	b.n	8000fbc <__aeabi_fsub+0x24c>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d1be      	bne.n	8000dd0 <__aeabi_fsub+0x60>
 8000e52:	2200      	movs	r2, #0
 8000e54:	2400      	movs	r4, #0
 8000e56:	2300      	movs	r3, #0
 8000e58:	e7e3      	b.n	8000e22 <__aeabi_fsub+0xb2>
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	dc00      	bgt.n	8000e60 <__aeabi_fsub+0xf0>
 8000e5e:	e085      	b.n	8000f6c <__aeabi_fsub+0x1fc>
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d046      	beq.n	8000ef2 <__aeabi_fsub+0x182>
 8000e64:	2cff      	cmp	r4, #255	; 0xff
 8000e66:	d049      	beq.n	8000efc <__aeabi_fsub+0x18c>
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	4648      	mov	r0, r9
 8000e6c:	04d2      	lsls	r2, r2, #19
 8000e6e:	4310      	orrs	r0, r2
 8000e70:	4681      	mov	r9, r0
 8000e72:	2201      	movs	r2, #1
 8000e74:	2e1b      	cmp	r6, #27
 8000e76:	dc09      	bgt.n	8000e8c <__aeabi_fsub+0x11c>
 8000e78:	2020      	movs	r0, #32
 8000e7a:	464c      	mov	r4, r9
 8000e7c:	1b80      	subs	r0, r0, r6
 8000e7e:	4084      	lsls	r4, r0
 8000e80:	464a      	mov	r2, r9
 8000e82:	0020      	movs	r0, r4
 8000e84:	40f2      	lsrs	r2, r6
 8000e86:	1e44      	subs	r4, r0, #1
 8000e88:	41a0      	sbcs	r0, r4
 8000e8a:	4302      	orrs	r2, r0
 8000e8c:	189b      	adds	r3, r3, r2
 8000e8e:	015a      	lsls	r2, r3, #5
 8000e90:	d528      	bpl.n	8000ee4 <__aeabi_fsub+0x174>
 8000e92:	3501      	adds	r5, #1
 8000e94:	2dff      	cmp	r5, #255	; 0xff
 8000e96:	d100      	bne.n	8000e9a <__aeabi_fsub+0x12a>
 8000e98:	e0a8      	b.n	8000fec <__aeabi_fsub+0x27c>
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2407      	movs	r4, #7
 8000e9e:	4994      	ldr	r1, [pc, #592]	; (80010f0 <__aeabi_fsub+0x380>)
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	085b      	lsrs	r3, r3, #1
 8000ea4:	400b      	ands	r3, r1
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	401c      	ands	r4, r3
 8000eaa:	e7a6      	b.n	8000dfa <__aeabi_fsub+0x8a>
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_fsub+0x142>
 8000eb0:	e778      	b.n	8000da4 <__aeabi_fsub+0x34>
 8000eb2:	e775      	b.n	8000da0 <__aeabi_fsub+0x30>
 8000eb4:	2cff      	cmp	r4, #255	; 0xff
 8000eb6:	d054      	beq.n	8000f62 <__aeabi_fsub+0x1f2>
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	4649      	mov	r1, r9
 8000ebc:	04d2      	lsls	r2, r2, #19
 8000ebe:	4311      	orrs	r1, r2
 8000ec0:	4689      	mov	r9, r1
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2e1b      	cmp	r6, #27
 8000ec6:	dc09      	bgt.n	8000edc <__aeabi_fsub+0x16c>
 8000ec8:	2120      	movs	r1, #32
 8000eca:	4648      	mov	r0, r9
 8000ecc:	1b89      	subs	r1, r1, r6
 8000ece:	4088      	lsls	r0, r1
 8000ed0:	464a      	mov	r2, r9
 8000ed2:	0001      	movs	r1, r0
 8000ed4:	40f2      	lsrs	r2, r6
 8000ed6:	1e48      	subs	r0, r1, #1
 8000ed8:	4181      	sbcs	r1, r0
 8000eda:	430a      	orrs	r2, r1
 8000edc:	1a9b      	subs	r3, r3, r2
 8000ede:	015a      	lsls	r2, r3, #5
 8000ee0:	d500      	bpl.n	8000ee4 <__aeabi_fsub+0x174>
 8000ee2:	e773      	b.n	8000dcc <__aeabi_fsub+0x5c>
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4641      	mov	r1, r8
 8000ee8:	400a      	ands	r2, r1
 8000eea:	0759      	lsls	r1, r3, #29
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_fsub+0x180>
 8000eee:	e789      	b.n	8000e04 <__aeabi_fsub+0x94>
 8000ef0:	e011      	b.n	8000f16 <__aeabi_fsub+0x1a6>
 8000ef2:	4648      	mov	r0, r9
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	d158      	bne.n	8000faa <__aeabi_fsub+0x23a>
 8000ef8:	2cff      	cmp	r4, #255	; 0xff
 8000efa:	d10c      	bne.n	8000f16 <__aeabi_fsub+0x1a6>
 8000efc:	08db      	lsrs	r3, r3, #3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0x194>
 8000f02:	e78c      	b.n	8000e1e <__aeabi_fsub+0xae>
 8000f04:	2080      	movs	r0, #128	; 0x80
 8000f06:	03c0      	lsls	r0, r0, #15
 8000f08:	4303      	orrs	r3, r0
 8000f0a:	025b      	lsls	r3, r3, #9
 8000f0c:	0a5b      	lsrs	r3, r3, #9
 8000f0e:	24ff      	movs	r4, #255	; 0xff
 8000f10:	e787      	b.n	8000e22 <__aeabi_fsub+0xb2>
 8000f12:	2cff      	cmp	r4, #255	; 0xff
 8000f14:	d025      	beq.n	8000f62 <__aeabi_fsub+0x1f2>
 8000f16:	08db      	lsrs	r3, r3, #3
 8000f18:	2dff      	cmp	r5, #255	; 0xff
 8000f1a:	d0f0      	beq.n	8000efe <__aeabi_fsub+0x18e>
 8000f1c:	025b      	lsls	r3, r3, #9
 8000f1e:	0a5b      	lsrs	r3, r3, #9
 8000f20:	b2ec      	uxtb	r4, r5
 8000f22:	e77e      	b.n	8000e22 <__aeabi_fsub+0xb2>
 8000f24:	2c00      	cmp	r4, #0
 8000f26:	d04d      	beq.n	8000fc4 <__aeabi_fsub+0x254>
 8000f28:	28ff      	cmp	r0, #255	; 0xff
 8000f2a:	d018      	beq.n	8000f5e <__aeabi_fsub+0x1ee>
 8000f2c:	2480      	movs	r4, #128	; 0x80
 8000f2e:	04e4      	lsls	r4, r4, #19
 8000f30:	4272      	negs	r2, r6
 8000f32:	4323      	orrs	r3, r4
 8000f34:	2a1b      	cmp	r2, #27
 8000f36:	dd00      	ble.n	8000f3a <__aeabi_fsub+0x1ca>
 8000f38:	e0c4      	b.n	80010c4 <__aeabi_fsub+0x354>
 8000f3a:	001c      	movs	r4, r3
 8000f3c:	2520      	movs	r5, #32
 8000f3e:	40d4      	lsrs	r4, r2
 8000f40:	1aaa      	subs	r2, r5, r2
 8000f42:	4093      	lsls	r3, r2
 8000f44:	1e5a      	subs	r2, r3, #1
 8000f46:	4193      	sbcs	r3, r2
 8000f48:	4323      	orrs	r3, r4
 8000f4a:	464a      	mov	r2, r9
 8000f4c:	0005      	movs	r5, r0
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	4688      	mov	r8, r1
 8000f52:	e738      	b.n	8000dc6 <__aeabi_fsub+0x56>
 8000f54:	1c72      	adds	r2, r6, #1
 8000f56:	d0f8      	beq.n	8000f4a <__aeabi_fsub+0x1da>
 8000f58:	43f2      	mvns	r2, r6
 8000f5a:	28ff      	cmp	r0, #255	; 0xff
 8000f5c:	d1ea      	bne.n	8000f34 <__aeabi_fsub+0x1c4>
 8000f5e:	000a      	movs	r2, r1
 8000f60:	464b      	mov	r3, r9
 8000f62:	25ff      	movs	r5, #255	; 0xff
 8000f64:	e7d7      	b.n	8000f16 <__aeabi_fsub+0x1a6>
 8000f66:	019b      	lsls	r3, r3, #6
 8000f68:	0a5b      	lsrs	r3, r3, #9
 8000f6a:	e75a      	b.n	8000e22 <__aeabi_fsub+0xb2>
 8000f6c:	2e00      	cmp	r6, #0
 8000f6e:	d141      	bne.n	8000ff4 <__aeabi_fsub+0x284>
 8000f70:	1c65      	adds	r5, r4, #1
 8000f72:	b2e9      	uxtb	r1, r5
 8000f74:	2901      	cmp	r1, #1
 8000f76:	dd45      	ble.n	8001004 <__aeabi_fsub+0x294>
 8000f78:	2dff      	cmp	r5, #255	; 0xff
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_fsub+0x20e>
 8000f7c:	e74f      	b.n	8000e1e <__aeabi_fsub+0xae>
 8000f7e:	2407      	movs	r4, #7
 8000f80:	444b      	add	r3, r9
 8000f82:	085b      	lsrs	r3, r3, #1
 8000f84:	401c      	ands	r4, r3
 8000f86:	e738      	b.n	8000dfa <__aeabi_fsub+0x8a>
 8000f88:	2207      	movs	r2, #7
 8000f8a:	4b5a      	ldr	r3, [pc, #360]	; (80010f4 <__aeabi_fsub+0x384>)
 8000f8c:	1a2d      	subs	r5, r5, r0
 8000f8e:	4023      	ands	r3, r4
 8000f90:	4014      	ands	r4, r2
 8000f92:	e732      	b.n	8000dfa <__aeabi_fsub+0x8a>
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d11d      	bne.n	8000fd4 <__aeabi_fsub+0x264>
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d17a      	bne.n	8001092 <__aeabi_fsub+0x322>
 8000f9c:	464b      	mov	r3, r9
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_fsub+0x234>
 8000fa2:	e091      	b.n	80010c8 <__aeabi_fsub+0x358>
 8000fa4:	000a      	movs	r2, r1
 8000fa6:	2500      	movs	r5, #0
 8000fa8:	e7b5      	b.n	8000f16 <__aeabi_fsub+0x1a6>
 8000faa:	3e01      	subs	r6, #1
 8000fac:	2e00      	cmp	r6, #0
 8000fae:	d119      	bne.n	8000fe4 <__aeabi_fsub+0x274>
 8000fb0:	444b      	add	r3, r9
 8000fb2:	e76c      	b.n	8000e8e <__aeabi_fsub+0x11e>
 8000fb4:	2cff      	cmp	r4, #255	; 0xff
 8000fb6:	d184      	bne.n	8000ec2 <__aeabi_fsub+0x152>
 8000fb8:	25ff      	movs	r5, #255	; 0xff
 8000fba:	e7ac      	b.n	8000f16 <__aeabi_fsub+0x1a6>
 8000fbc:	464a      	mov	r2, r9
 8000fbe:	4688      	mov	r8, r1
 8000fc0:	1ad4      	subs	r4, r2, r3
 8000fc2:	e705      	b.n	8000dd0 <__aeabi_fsub+0x60>
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1c5      	bne.n	8000f54 <__aeabi_fsub+0x1e4>
 8000fc8:	000a      	movs	r2, r1
 8000fca:	28ff      	cmp	r0, #255	; 0xff
 8000fcc:	d0c8      	beq.n	8000f60 <__aeabi_fsub+0x1f0>
 8000fce:	0005      	movs	r5, r0
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	e7a0      	b.n	8000f16 <__aeabi_fsub+0x1a6>
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d149      	bne.n	800106c <__aeabi_fsub+0x2fc>
 8000fd8:	464b      	mov	r3, r9
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d077      	beq.n	80010ce <__aeabi_fsub+0x35e>
 8000fde:	000a      	movs	r2, r1
 8000fe0:	25ff      	movs	r5, #255	; 0xff
 8000fe2:	e798      	b.n	8000f16 <__aeabi_fsub+0x1a6>
 8000fe4:	2cff      	cmp	r4, #255	; 0xff
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0x27a>
 8000fe8:	e743      	b.n	8000e72 <__aeabi_fsub+0x102>
 8000fea:	e787      	b.n	8000efc <__aeabi_fsub+0x18c>
 8000fec:	000a      	movs	r2, r1
 8000fee:	24ff      	movs	r4, #255	; 0xff
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e716      	b.n	8000e22 <__aeabi_fsub+0xb2>
 8000ff4:	2c00      	cmp	r4, #0
 8000ff6:	d115      	bne.n	8001024 <__aeabi_fsub+0x2b4>
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d157      	bne.n	80010ac <__aeabi_fsub+0x33c>
 8000ffc:	28ff      	cmp	r0, #255	; 0xff
 8000ffe:	d1e6      	bne.n	8000fce <__aeabi_fsub+0x25e>
 8001000:	464b      	mov	r3, r9
 8001002:	e77b      	b.n	8000efc <__aeabi_fsub+0x18c>
 8001004:	2c00      	cmp	r4, #0
 8001006:	d120      	bne.n	800104a <__aeabi_fsub+0x2da>
 8001008:	2b00      	cmp	r3, #0
 800100a:	d057      	beq.n	80010bc <__aeabi_fsub+0x34c>
 800100c:	4649      	mov	r1, r9
 800100e:	2900      	cmp	r1, #0
 8001010:	d053      	beq.n	80010ba <__aeabi_fsub+0x34a>
 8001012:	444b      	add	r3, r9
 8001014:	015a      	lsls	r2, r3, #5
 8001016:	d568      	bpl.n	80010ea <__aeabi_fsub+0x37a>
 8001018:	2407      	movs	r4, #7
 800101a:	4a36      	ldr	r2, [pc, #216]	; (80010f4 <__aeabi_fsub+0x384>)
 800101c:	401c      	ands	r4, r3
 800101e:	2501      	movs	r5, #1
 8001020:	4013      	ands	r3, r2
 8001022:	e6ea      	b.n	8000dfa <__aeabi_fsub+0x8a>
 8001024:	28ff      	cmp	r0, #255	; 0xff
 8001026:	d0eb      	beq.n	8001000 <__aeabi_fsub+0x290>
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	04d2      	lsls	r2, r2, #19
 800102c:	4276      	negs	r6, r6
 800102e:	4313      	orrs	r3, r2
 8001030:	2e1b      	cmp	r6, #27
 8001032:	dc53      	bgt.n	80010dc <__aeabi_fsub+0x36c>
 8001034:	2520      	movs	r5, #32
 8001036:	1bad      	subs	r5, r5, r6
 8001038:	001a      	movs	r2, r3
 800103a:	40ab      	lsls	r3, r5
 800103c:	40f2      	lsrs	r2, r6
 800103e:	1e5c      	subs	r4, r3, #1
 8001040:	41a3      	sbcs	r3, r4
 8001042:	4313      	orrs	r3, r2
 8001044:	444b      	add	r3, r9
 8001046:	0005      	movs	r5, r0
 8001048:	e721      	b.n	8000e8e <__aeabi_fsub+0x11e>
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0d8      	beq.n	8001000 <__aeabi_fsub+0x290>
 800104e:	4649      	mov	r1, r9
 8001050:	2900      	cmp	r1, #0
 8001052:	d100      	bne.n	8001056 <__aeabi_fsub+0x2e6>
 8001054:	e752      	b.n	8000efc <__aeabi_fsub+0x18c>
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	03c9      	lsls	r1, r1, #15
 800105a:	420f      	tst	r7, r1
 800105c:	d100      	bne.n	8001060 <__aeabi_fsub+0x2f0>
 800105e:	e74d      	b.n	8000efc <__aeabi_fsub+0x18c>
 8001060:	4660      	mov	r0, ip
 8001062:	4208      	tst	r0, r1
 8001064:	d000      	beq.n	8001068 <__aeabi_fsub+0x2f8>
 8001066:	e749      	b.n	8000efc <__aeabi_fsub+0x18c>
 8001068:	464b      	mov	r3, r9
 800106a:	e747      	b.n	8000efc <__aeabi_fsub+0x18c>
 800106c:	4648      	mov	r0, r9
 800106e:	25ff      	movs	r5, #255	; 0xff
 8001070:	2800      	cmp	r0, #0
 8001072:	d100      	bne.n	8001076 <__aeabi_fsub+0x306>
 8001074:	e74f      	b.n	8000f16 <__aeabi_fsub+0x1a6>
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	03d2      	lsls	r2, r2, #15
 800107a:	4217      	tst	r7, r2
 800107c:	d004      	beq.n	8001088 <__aeabi_fsub+0x318>
 800107e:	4660      	mov	r0, ip
 8001080:	4210      	tst	r0, r2
 8001082:	d101      	bne.n	8001088 <__aeabi_fsub+0x318>
 8001084:	464b      	mov	r3, r9
 8001086:	4688      	mov	r8, r1
 8001088:	2201      	movs	r2, #1
 800108a:	4641      	mov	r1, r8
 800108c:	25ff      	movs	r5, #255	; 0xff
 800108e:	400a      	ands	r2, r1
 8001090:	e741      	b.n	8000f16 <__aeabi_fsub+0x1a6>
 8001092:	4648      	mov	r0, r9
 8001094:	2800      	cmp	r0, #0
 8001096:	d01f      	beq.n	80010d8 <__aeabi_fsub+0x368>
 8001098:	1a1a      	subs	r2, r3, r0
 800109a:	0150      	lsls	r0, r2, #5
 800109c:	d520      	bpl.n	80010e0 <__aeabi_fsub+0x370>
 800109e:	464a      	mov	r2, r9
 80010a0:	2407      	movs	r4, #7
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	401c      	ands	r4, r3
 80010a6:	4688      	mov	r8, r1
 80010a8:	2500      	movs	r5, #0
 80010aa:	e6a6      	b.n	8000dfa <__aeabi_fsub+0x8a>
 80010ac:	1c74      	adds	r4, r6, #1
 80010ae:	d0c9      	beq.n	8001044 <__aeabi_fsub+0x2d4>
 80010b0:	43f6      	mvns	r6, r6
 80010b2:	28ff      	cmp	r0, #255	; 0xff
 80010b4:	d1bc      	bne.n	8001030 <__aeabi_fsub+0x2c0>
 80010b6:	464b      	mov	r3, r9
 80010b8:	e720      	b.n	8000efc <__aeabi_fsub+0x18c>
 80010ba:	4699      	mov	r9, r3
 80010bc:	464b      	mov	r3, r9
 80010be:	2500      	movs	r5, #0
 80010c0:	08db      	lsrs	r3, r3, #3
 80010c2:	e72b      	b.n	8000f1c <__aeabi_fsub+0x1ac>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e740      	b.n	8000f4a <__aeabi_fsub+0x1da>
 80010c8:	2200      	movs	r2, #0
 80010ca:	2300      	movs	r3, #0
 80010cc:	e6a9      	b.n	8000e22 <__aeabi_fsub+0xb2>
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	2200      	movs	r2, #0
 80010d2:	03db      	lsls	r3, r3, #15
 80010d4:	24ff      	movs	r4, #255	; 0xff
 80010d6:	e6a4      	b.n	8000e22 <__aeabi_fsub+0xb2>
 80010d8:	2500      	movs	r5, #0
 80010da:	e71c      	b.n	8000f16 <__aeabi_fsub+0x1a6>
 80010dc:	2301      	movs	r3, #1
 80010de:	e7b1      	b.n	8001044 <__aeabi_fsub+0x2d4>
 80010e0:	2a00      	cmp	r2, #0
 80010e2:	d0f1      	beq.n	80010c8 <__aeabi_fsub+0x358>
 80010e4:	0013      	movs	r3, r2
 80010e6:	2500      	movs	r5, #0
 80010e8:	e6fc      	b.n	8000ee4 <__aeabi_fsub+0x174>
 80010ea:	2500      	movs	r5, #0
 80010ec:	e6fa      	b.n	8000ee4 <__aeabi_fsub+0x174>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	7dffffff 	.word	0x7dffffff
 80010f4:	fbffffff 	.word	0xfbffffff

080010f8 <__aeabi_f2iz>:
 80010f8:	0241      	lsls	r1, r0, #9
 80010fa:	0042      	lsls	r2, r0, #1
 80010fc:	0fc3      	lsrs	r3, r0, #31
 80010fe:	0a49      	lsrs	r1, r1, #9
 8001100:	0e12      	lsrs	r2, r2, #24
 8001102:	2000      	movs	r0, #0
 8001104:	2a7e      	cmp	r2, #126	; 0x7e
 8001106:	d90d      	bls.n	8001124 <__aeabi_f2iz+0x2c>
 8001108:	2a9d      	cmp	r2, #157	; 0x9d
 800110a:	d80c      	bhi.n	8001126 <__aeabi_f2iz+0x2e>
 800110c:	2080      	movs	r0, #128	; 0x80
 800110e:	0400      	lsls	r0, r0, #16
 8001110:	4301      	orrs	r1, r0
 8001112:	2a95      	cmp	r2, #149	; 0x95
 8001114:	dc0a      	bgt.n	800112c <__aeabi_f2iz+0x34>
 8001116:	2096      	movs	r0, #150	; 0x96
 8001118:	1a82      	subs	r2, r0, r2
 800111a:	40d1      	lsrs	r1, r2
 800111c:	4248      	negs	r0, r1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_f2iz+0x2c>
 8001122:	0008      	movs	r0, r1
 8001124:	4770      	bx	lr
 8001126:	4a03      	ldr	r2, [pc, #12]	; (8001134 <__aeabi_f2iz+0x3c>)
 8001128:	1898      	adds	r0, r3, r2
 800112a:	e7fb      	b.n	8001124 <__aeabi_f2iz+0x2c>
 800112c:	3a96      	subs	r2, #150	; 0x96
 800112e:	4091      	lsls	r1, r2
 8001130:	e7f4      	b.n	800111c <__aeabi_f2iz+0x24>
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	7fffffff 	.word	0x7fffffff

08001138 <__aeabi_dadd>:
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	464f      	mov	r7, r9
 800113c:	4646      	mov	r6, r8
 800113e:	46d6      	mov	lr, sl
 8001140:	000c      	movs	r4, r1
 8001142:	0309      	lsls	r1, r1, #12
 8001144:	b5c0      	push	{r6, r7, lr}
 8001146:	0a49      	lsrs	r1, r1, #9
 8001148:	0f47      	lsrs	r7, r0, #29
 800114a:	005e      	lsls	r6, r3, #1
 800114c:	4339      	orrs	r1, r7
 800114e:	031f      	lsls	r7, r3, #12
 8001150:	0fdb      	lsrs	r3, r3, #31
 8001152:	469c      	mov	ip, r3
 8001154:	0065      	lsls	r5, r4, #1
 8001156:	0a7b      	lsrs	r3, r7, #9
 8001158:	0f57      	lsrs	r7, r2, #29
 800115a:	431f      	orrs	r7, r3
 800115c:	0d6d      	lsrs	r5, r5, #21
 800115e:	0fe4      	lsrs	r4, r4, #31
 8001160:	0d76      	lsrs	r6, r6, #21
 8001162:	46a1      	mov	r9, r4
 8001164:	00c0      	lsls	r0, r0, #3
 8001166:	46b8      	mov	r8, r7
 8001168:	00d2      	lsls	r2, r2, #3
 800116a:	1bab      	subs	r3, r5, r6
 800116c:	4564      	cmp	r4, ip
 800116e:	d07b      	beq.n	8001268 <__aeabi_dadd+0x130>
 8001170:	2b00      	cmp	r3, #0
 8001172:	dd5f      	ble.n	8001234 <__aeabi_dadd+0xfc>
 8001174:	2e00      	cmp	r6, #0
 8001176:	d000      	beq.n	800117a <__aeabi_dadd+0x42>
 8001178:	e0a4      	b.n	80012c4 <__aeabi_dadd+0x18c>
 800117a:	003e      	movs	r6, r7
 800117c:	4316      	orrs	r6, r2
 800117e:	d100      	bne.n	8001182 <__aeabi_dadd+0x4a>
 8001180:	e112      	b.n	80013a8 <__aeabi_dadd+0x270>
 8001182:	1e5e      	subs	r6, r3, #1
 8001184:	2e00      	cmp	r6, #0
 8001186:	d000      	beq.n	800118a <__aeabi_dadd+0x52>
 8001188:	e19e      	b.n	80014c8 <__aeabi_dadd+0x390>
 800118a:	1a87      	subs	r7, r0, r2
 800118c:	4643      	mov	r3, r8
 800118e:	42b8      	cmp	r0, r7
 8001190:	4180      	sbcs	r0, r0
 8001192:	2501      	movs	r5, #1
 8001194:	1ac9      	subs	r1, r1, r3
 8001196:	4240      	negs	r0, r0
 8001198:	1a09      	subs	r1, r1, r0
 800119a:	020b      	lsls	r3, r1, #8
 800119c:	d400      	bmi.n	80011a0 <__aeabi_dadd+0x68>
 800119e:	e131      	b.n	8001404 <__aeabi_dadd+0x2cc>
 80011a0:	0249      	lsls	r1, r1, #9
 80011a2:	0a4e      	lsrs	r6, r1, #9
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	d100      	bne.n	80011aa <__aeabi_dadd+0x72>
 80011a8:	e16e      	b.n	8001488 <__aeabi_dadd+0x350>
 80011aa:	0030      	movs	r0, r6
 80011ac:	f001 fe0a 	bl	8002dc4 <__clzsi2>
 80011b0:	0003      	movs	r3, r0
 80011b2:	3b08      	subs	r3, #8
 80011b4:	2b1f      	cmp	r3, #31
 80011b6:	dd00      	ble.n	80011ba <__aeabi_dadd+0x82>
 80011b8:	e161      	b.n	800147e <__aeabi_dadd+0x346>
 80011ba:	2220      	movs	r2, #32
 80011bc:	0039      	movs	r1, r7
 80011be:	1ad2      	subs	r2, r2, r3
 80011c0:	409e      	lsls	r6, r3
 80011c2:	40d1      	lsrs	r1, r2
 80011c4:	409f      	lsls	r7, r3
 80011c6:	430e      	orrs	r6, r1
 80011c8:	429d      	cmp	r5, r3
 80011ca:	dd00      	ble.n	80011ce <__aeabi_dadd+0x96>
 80011cc:	e151      	b.n	8001472 <__aeabi_dadd+0x33a>
 80011ce:	1b5d      	subs	r5, r3, r5
 80011d0:	1c6b      	adds	r3, r5, #1
 80011d2:	2b1f      	cmp	r3, #31
 80011d4:	dd00      	ble.n	80011d8 <__aeabi_dadd+0xa0>
 80011d6:	e17c      	b.n	80014d2 <__aeabi_dadd+0x39a>
 80011d8:	2120      	movs	r1, #32
 80011da:	1ac9      	subs	r1, r1, r3
 80011dc:	003d      	movs	r5, r7
 80011de:	0030      	movs	r0, r6
 80011e0:	408f      	lsls	r7, r1
 80011e2:	4088      	lsls	r0, r1
 80011e4:	40dd      	lsrs	r5, r3
 80011e6:	1e79      	subs	r1, r7, #1
 80011e8:	418f      	sbcs	r7, r1
 80011ea:	0031      	movs	r1, r6
 80011ec:	2207      	movs	r2, #7
 80011ee:	4328      	orrs	r0, r5
 80011f0:	40d9      	lsrs	r1, r3
 80011f2:	2500      	movs	r5, #0
 80011f4:	4307      	orrs	r7, r0
 80011f6:	403a      	ands	r2, r7
 80011f8:	2a00      	cmp	r2, #0
 80011fa:	d009      	beq.n	8001210 <__aeabi_dadd+0xd8>
 80011fc:	230f      	movs	r3, #15
 80011fe:	403b      	ands	r3, r7
 8001200:	2b04      	cmp	r3, #4
 8001202:	d005      	beq.n	8001210 <__aeabi_dadd+0xd8>
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	42bb      	cmp	r3, r7
 8001208:	41bf      	sbcs	r7, r7
 800120a:	427f      	negs	r7, r7
 800120c:	19c9      	adds	r1, r1, r7
 800120e:	001f      	movs	r7, r3
 8001210:	020b      	lsls	r3, r1, #8
 8001212:	d400      	bmi.n	8001216 <__aeabi_dadd+0xde>
 8001214:	e226      	b.n	8001664 <__aeabi_dadd+0x52c>
 8001216:	1c6a      	adds	r2, r5, #1
 8001218:	4bc6      	ldr	r3, [pc, #792]	; (8001534 <__aeabi_dadd+0x3fc>)
 800121a:	0555      	lsls	r5, r2, #21
 800121c:	0d6d      	lsrs	r5, r5, #21
 800121e:	429a      	cmp	r2, r3
 8001220:	d100      	bne.n	8001224 <__aeabi_dadd+0xec>
 8001222:	e106      	b.n	8001432 <__aeabi_dadd+0x2fa>
 8001224:	4ac4      	ldr	r2, [pc, #784]	; (8001538 <__aeabi_dadd+0x400>)
 8001226:	08ff      	lsrs	r7, r7, #3
 8001228:	400a      	ands	r2, r1
 800122a:	0753      	lsls	r3, r2, #29
 800122c:	0252      	lsls	r2, r2, #9
 800122e:	433b      	orrs	r3, r7
 8001230:	0b12      	lsrs	r2, r2, #12
 8001232:	e08e      	b.n	8001352 <__aeabi_dadd+0x21a>
 8001234:	2b00      	cmp	r3, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x102>
 8001238:	e0b8      	b.n	80013ac <__aeabi_dadd+0x274>
 800123a:	1c6b      	adds	r3, r5, #1
 800123c:	055b      	lsls	r3, r3, #21
 800123e:	0d5b      	lsrs	r3, r3, #21
 8001240:	2b01      	cmp	r3, #1
 8001242:	dc00      	bgt.n	8001246 <__aeabi_dadd+0x10e>
 8001244:	e130      	b.n	80014a8 <__aeabi_dadd+0x370>
 8001246:	1a87      	subs	r7, r0, r2
 8001248:	4643      	mov	r3, r8
 800124a:	42b8      	cmp	r0, r7
 800124c:	41b6      	sbcs	r6, r6
 800124e:	1acb      	subs	r3, r1, r3
 8001250:	4276      	negs	r6, r6
 8001252:	1b9e      	subs	r6, r3, r6
 8001254:	0233      	lsls	r3, r6, #8
 8001256:	d500      	bpl.n	800125a <__aeabi_dadd+0x122>
 8001258:	e14c      	b.n	80014f4 <__aeabi_dadd+0x3bc>
 800125a:	003b      	movs	r3, r7
 800125c:	4333      	orrs	r3, r6
 800125e:	d1a1      	bne.n	80011a4 <__aeabi_dadd+0x6c>
 8001260:	2200      	movs	r2, #0
 8001262:	2400      	movs	r4, #0
 8001264:	2500      	movs	r5, #0
 8001266:	e070      	b.n	800134a <__aeabi_dadd+0x212>
 8001268:	2b00      	cmp	r3, #0
 800126a:	dc00      	bgt.n	800126e <__aeabi_dadd+0x136>
 800126c:	e0e5      	b.n	800143a <__aeabi_dadd+0x302>
 800126e:	2e00      	cmp	r6, #0
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x13c>
 8001272:	e083      	b.n	800137c <__aeabi_dadd+0x244>
 8001274:	4eaf      	ldr	r6, [pc, #700]	; (8001534 <__aeabi_dadd+0x3fc>)
 8001276:	42b5      	cmp	r5, r6
 8001278:	d060      	beq.n	800133c <__aeabi_dadd+0x204>
 800127a:	2680      	movs	r6, #128	; 0x80
 800127c:	0436      	lsls	r6, r6, #16
 800127e:	4337      	orrs	r7, r6
 8001280:	46b8      	mov	r8, r7
 8001282:	2b38      	cmp	r3, #56	; 0x38
 8001284:	dc00      	bgt.n	8001288 <__aeabi_dadd+0x150>
 8001286:	e13e      	b.n	8001506 <__aeabi_dadd+0x3ce>
 8001288:	4643      	mov	r3, r8
 800128a:	4313      	orrs	r3, r2
 800128c:	001f      	movs	r7, r3
 800128e:	1e7a      	subs	r2, r7, #1
 8001290:	4197      	sbcs	r7, r2
 8001292:	183f      	adds	r7, r7, r0
 8001294:	4287      	cmp	r7, r0
 8001296:	4180      	sbcs	r0, r0
 8001298:	4240      	negs	r0, r0
 800129a:	1809      	adds	r1, r1, r0
 800129c:	020b      	lsls	r3, r1, #8
 800129e:	d400      	bmi.n	80012a2 <__aeabi_dadd+0x16a>
 80012a0:	e0b0      	b.n	8001404 <__aeabi_dadd+0x2cc>
 80012a2:	4ba4      	ldr	r3, [pc, #656]	; (8001534 <__aeabi_dadd+0x3fc>)
 80012a4:	3501      	adds	r5, #1
 80012a6:	429d      	cmp	r5, r3
 80012a8:	d100      	bne.n	80012ac <__aeabi_dadd+0x174>
 80012aa:	e0c3      	b.n	8001434 <__aeabi_dadd+0x2fc>
 80012ac:	4aa2      	ldr	r2, [pc, #648]	; (8001538 <__aeabi_dadd+0x400>)
 80012ae:	087b      	lsrs	r3, r7, #1
 80012b0:	400a      	ands	r2, r1
 80012b2:	2101      	movs	r1, #1
 80012b4:	400f      	ands	r7, r1
 80012b6:	431f      	orrs	r7, r3
 80012b8:	0851      	lsrs	r1, r2, #1
 80012ba:	07d3      	lsls	r3, r2, #31
 80012bc:	2207      	movs	r2, #7
 80012be:	431f      	orrs	r7, r3
 80012c0:	403a      	ands	r2, r7
 80012c2:	e799      	b.n	80011f8 <__aeabi_dadd+0xc0>
 80012c4:	4e9b      	ldr	r6, [pc, #620]	; (8001534 <__aeabi_dadd+0x3fc>)
 80012c6:	42b5      	cmp	r5, r6
 80012c8:	d038      	beq.n	800133c <__aeabi_dadd+0x204>
 80012ca:	2680      	movs	r6, #128	; 0x80
 80012cc:	0436      	lsls	r6, r6, #16
 80012ce:	4337      	orrs	r7, r6
 80012d0:	46b8      	mov	r8, r7
 80012d2:	2b38      	cmp	r3, #56	; 0x38
 80012d4:	dd00      	ble.n	80012d8 <__aeabi_dadd+0x1a0>
 80012d6:	e0dc      	b.n	8001492 <__aeabi_dadd+0x35a>
 80012d8:	2b1f      	cmp	r3, #31
 80012da:	dc00      	bgt.n	80012de <__aeabi_dadd+0x1a6>
 80012dc:	e130      	b.n	8001540 <__aeabi_dadd+0x408>
 80012de:	001e      	movs	r6, r3
 80012e0:	4647      	mov	r7, r8
 80012e2:	3e20      	subs	r6, #32
 80012e4:	40f7      	lsrs	r7, r6
 80012e6:	46bc      	mov	ip, r7
 80012e8:	2b20      	cmp	r3, #32
 80012ea:	d004      	beq.n	80012f6 <__aeabi_dadd+0x1be>
 80012ec:	2640      	movs	r6, #64	; 0x40
 80012ee:	1af3      	subs	r3, r6, r3
 80012f0:	4646      	mov	r6, r8
 80012f2:	409e      	lsls	r6, r3
 80012f4:	4332      	orrs	r2, r6
 80012f6:	0017      	movs	r7, r2
 80012f8:	4663      	mov	r3, ip
 80012fa:	1e7a      	subs	r2, r7, #1
 80012fc:	4197      	sbcs	r7, r2
 80012fe:	431f      	orrs	r7, r3
 8001300:	e0cc      	b.n	800149c <__aeabi_dadd+0x364>
 8001302:	2b00      	cmp	r3, #0
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0x1d0>
 8001306:	e204      	b.n	8001712 <__aeabi_dadd+0x5da>
 8001308:	4643      	mov	r3, r8
 800130a:	4313      	orrs	r3, r2
 800130c:	d100      	bne.n	8001310 <__aeabi_dadd+0x1d8>
 800130e:	e159      	b.n	80015c4 <__aeabi_dadd+0x48c>
 8001310:	074b      	lsls	r3, r1, #29
 8001312:	08c0      	lsrs	r0, r0, #3
 8001314:	4318      	orrs	r0, r3
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	08c9      	lsrs	r1, r1, #3
 800131a:	031b      	lsls	r3, r3, #12
 800131c:	4219      	tst	r1, r3
 800131e:	d008      	beq.n	8001332 <__aeabi_dadd+0x1fa>
 8001320:	4645      	mov	r5, r8
 8001322:	08ed      	lsrs	r5, r5, #3
 8001324:	421d      	tst	r5, r3
 8001326:	d104      	bne.n	8001332 <__aeabi_dadd+0x1fa>
 8001328:	4643      	mov	r3, r8
 800132a:	08d0      	lsrs	r0, r2, #3
 800132c:	0759      	lsls	r1, r3, #29
 800132e:	4308      	orrs	r0, r1
 8001330:	0029      	movs	r1, r5
 8001332:	0f42      	lsrs	r2, r0, #29
 8001334:	00c9      	lsls	r1, r1, #3
 8001336:	4d7f      	ldr	r5, [pc, #508]	; (8001534 <__aeabi_dadd+0x3fc>)
 8001338:	4311      	orrs	r1, r2
 800133a:	00c0      	lsls	r0, r0, #3
 800133c:	074b      	lsls	r3, r1, #29
 800133e:	08ca      	lsrs	r2, r1, #3
 8001340:	497c      	ldr	r1, [pc, #496]	; (8001534 <__aeabi_dadd+0x3fc>)
 8001342:	08c0      	lsrs	r0, r0, #3
 8001344:	4303      	orrs	r3, r0
 8001346:	428d      	cmp	r5, r1
 8001348:	d068      	beq.n	800141c <__aeabi_dadd+0x2e4>
 800134a:	0312      	lsls	r2, r2, #12
 800134c:	056d      	lsls	r5, r5, #21
 800134e:	0b12      	lsrs	r2, r2, #12
 8001350:	0d6d      	lsrs	r5, r5, #21
 8001352:	2100      	movs	r1, #0
 8001354:	0312      	lsls	r2, r2, #12
 8001356:	0018      	movs	r0, r3
 8001358:	0b13      	lsrs	r3, r2, #12
 800135a:	0d0a      	lsrs	r2, r1, #20
 800135c:	0512      	lsls	r2, r2, #20
 800135e:	431a      	orrs	r2, r3
 8001360:	4b76      	ldr	r3, [pc, #472]	; (800153c <__aeabi_dadd+0x404>)
 8001362:	052d      	lsls	r5, r5, #20
 8001364:	4013      	ands	r3, r2
 8001366:	432b      	orrs	r3, r5
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	07e4      	lsls	r4, r4, #31
 800136c:	085b      	lsrs	r3, r3, #1
 800136e:	4323      	orrs	r3, r4
 8001370:	0019      	movs	r1, r3
 8001372:	bc1c      	pop	{r2, r3, r4}
 8001374:	4690      	mov	r8, r2
 8001376:	4699      	mov	r9, r3
 8001378:	46a2      	mov	sl, r4
 800137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137c:	003e      	movs	r6, r7
 800137e:	4316      	orrs	r6, r2
 8001380:	d012      	beq.n	80013a8 <__aeabi_dadd+0x270>
 8001382:	1e5e      	subs	r6, r3, #1
 8001384:	2e00      	cmp	r6, #0
 8001386:	d000      	beq.n	800138a <__aeabi_dadd+0x252>
 8001388:	e100      	b.n	800158c <__aeabi_dadd+0x454>
 800138a:	1887      	adds	r7, r0, r2
 800138c:	4287      	cmp	r7, r0
 800138e:	4180      	sbcs	r0, r0
 8001390:	4441      	add	r1, r8
 8001392:	4240      	negs	r0, r0
 8001394:	1809      	adds	r1, r1, r0
 8001396:	2501      	movs	r5, #1
 8001398:	020b      	lsls	r3, r1, #8
 800139a:	d533      	bpl.n	8001404 <__aeabi_dadd+0x2cc>
 800139c:	2502      	movs	r5, #2
 800139e:	e785      	b.n	80012ac <__aeabi_dadd+0x174>
 80013a0:	4664      	mov	r4, ip
 80013a2:	0033      	movs	r3, r6
 80013a4:	4641      	mov	r1, r8
 80013a6:	0010      	movs	r0, r2
 80013a8:	001d      	movs	r5, r3
 80013aa:	e7c7      	b.n	800133c <__aeabi_dadd+0x204>
 80013ac:	2d00      	cmp	r5, #0
 80013ae:	d000      	beq.n	80013b2 <__aeabi_dadd+0x27a>
 80013b0:	e0da      	b.n	8001568 <__aeabi_dadd+0x430>
 80013b2:	000c      	movs	r4, r1
 80013b4:	4304      	orrs	r4, r0
 80013b6:	d0f3      	beq.n	80013a0 <__aeabi_dadd+0x268>
 80013b8:	1c5c      	adds	r4, r3, #1
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x286>
 80013bc:	e19f      	b.n	80016fe <__aeabi_dadd+0x5c6>
 80013be:	4c5d      	ldr	r4, [pc, #372]	; (8001534 <__aeabi_dadd+0x3fc>)
 80013c0:	42a6      	cmp	r6, r4
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dadd+0x28e>
 80013c4:	e12f      	b.n	8001626 <__aeabi_dadd+0x4ee>
 80013c6:	43db      	mvns	r3, r3
 80013c8:	2b38      	cmp	r3, #56	; 0x38
 80013ca:	dd00      	ble.n	80013ce <__aeabi_dadd+0x296>
 80013cc:	e166      	b.n	800169c <__aeabi_dadd+0x564>
 80013ce:	2b1f      	cmp	r3, #31
 80013d0:	dd00      	ble.n	80013d4 <__aeabi_dadd+0x29c>
 80013d2:	e183      	b.n	80016dc <__aeabi_dadd+0x5a4>
 80013d4:	2420      	movs	r4, #32
 80013d6:	0005      	movs	r5, r0
 80013d8:	1ae4      	subs	r4, r4, r3
 80013da:	000f      	movs	r7, r1
 80013dc:	40dd      	lsrs	r5, r3
 80013de:	40d9      	lsrs	r1, r3
 80013e0:	40a0      	lsls	r0, r4
 80013e2:	4643      	mov	r3, r8
 80013e4:	40a7      	lsls	r7, r4
 80013e6:	1a5b      	subs	r3, r3, r1
 80013e8:	1e44      	subs	r4, r0, #1
 80013ea:	41a0      	sbcs	r0, r4
 80013ec:	4698      	mov	r8, r3
 80013ee:	432f      	orrs	r7, r5
 80013f0:	4338      	orrs	r0, r7
 80013f2:	1a17      	subs	r7, r2, r0
 80013f4:	42ba      	cmp	r2, r7
 80013f6:	4192      	sbcs	r2, r2
 80013f8:	4643      	mov	r3, r8
 80013fa:	4252      	negs	r2, r2
 80013fc:	1a99      	subs	r1, r3, r2
 80013fe:	4664      	mov	r4, ip
 8001400:	0035      	movs	r5, r6
 8001402:	e6ca      	b.n	800119a <__aeabi_dadd+0x62>
 8001404:	2207      	movs	r2, #7
 8001406:	403a      	ands	r2, r7
 8001408:	2a00      	cmp	r2, #0
 800140a:	d000      	beq.n	800140e <__aeabi_dadd+0x2d6>
 800140c:	e6f6      	b.n	80011fc <__aeabi_dadd+0xc4>
 800140e:	074b      	lsls	r3, r1, #29
 8001410:	08ca      	lsrs	r2, r1, #3
 8001412:	4948      	ldr	r1, [pc, #288]	; (8001534 <__aeabi_dadd+0x3fc>)
 8001414:	08ff      	lsrs	r7, r7, #3
 8001416:	433b      	orrs	r3, r7
 8001418:	428d      	cmp	r5, r1
 800141a:	d196      	bne.n	800134a <__aeabi_dadd+0x212>
 800141c:	0019      	movs	r1, r3
 800141e:	4311      	orrs	r1, r2
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x2ec>
 8001422:	e19e      	b.n	8001762 <__aeabi_dadd+0x62a>
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	0309      	lsls	r1, r1, #12
 8001428:	430a      	orrs	r2, r1
 800142a:	0312      	lsls	r2, r2, #12
 800142c:	0b12      	lsrs	r2, r2, #12
 800142e:	4d41      	ldr	r5, [pc, #260]	; (8001534 <__aeabi_dadd+0x3fc>)
 8001430:	e78f      	b.n	8001352 <__aeabi_dadd+0x21a>
 8001432:	0015      	movs	r5, r2
 8001434:	2200      	movs	r2, #0
 8001436:	2300      	movs	r3, #0
 8001438:	e78b      	b.n	8001352 <__aeabi_dadd+0x21a>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d000      	beq.n	8001440 <__aeabi_dadd+0x308>
 800143e:	e0c7      	b.n	80015d0 <__aeabi_dadd+0x498>
 8001440:	1c6b      	adds	r3, r5, #1
 8001442:	055f      	lsls	r7, r3, #21
 8001444:	0d7f      	lsrs	r7, r7, #21
 8001446:	2f01      	cmp	r7, #1
 8001448:	dc00      	bgt.n	800144c <__aeabi_dadd+0x314>
 800144a:	e0f1      	b.n	8001630 <__aeabi_dadd+0x4f8>
 800144c:	4d39      	ldr	r5, [pc, #228]	; (8001534 <__aeabi_dadd+0x3fc>)
 800144e:	42ab      	cmp	r3, r5
 8001450:	d100      	bne.n	8001454 <__aeabi_dadd+0x31c>
 8001452:	e0b9      	b.n	80015c8 <__aeabi_dadd+0x490>
 8001454:	1885      	adds	r5, r0, r2
 8001456:	000a      	movs	r2, r1
 8001458:	4285      	cmp	r5, r0
 800145a:	4189      	sbcs	r1, r1
 800145c:	4442      	add	r2, r8
 800145e:	4249      	negs	r1, r1
 8001460:	1851      	adds	r1, r2, r1
 8001462:	2207      	movs	r2, #7
 8001464:	07cf      	lsls	r7, r1, #31
 8001466:	086d      	lsrs	r5, r5, #1
 8001468:	432f      	orrs	r7, r5
 800146a:	0849      	lsrs	r1, r1, #1
 800146c:	403a      	ands	r2, r7
 800146e:	001d      	movs	r5, r3
 8001470:	e6c2      	b.n	80011f8 <__aeabi_dadd+0xc0>
 8001472:	2207      	movs	r2, #7
 8001474:	4930      	ldr	r1, [pc, #192]	; (8001538 <__aeabi_dadd+0x400>)
 8001476:	1aed      	subs	r5, r5, r3
 8001478:	4031      	ands	r1, r6
 800147a:	403a      	ands	r2, r7
 800147c:	e6bc      	b.n	80011f8 <__aeabi_dadd+0xc0>
 800147e:	003e      	movs	r6, r7
 8001480:	3828      	subs	r0, #40	; 0x28
 8001482:	4086      	lsls	r6, r0
 8001484:	2700      	movs	r7, #0
 8001486:	e69f      	b.n	80011c8 <__aeabi_dadd+0x90>
 8001488:	0038      	movs	r0, r7
 800148a:	f001 fc9b 	bl	8002dc4 <__clzsi2>
 800148e:	3020      	adds	r0, #32
 8001490:	e68e      	b.n	80011b0 <__aeabi_dadd+0x78>
 8001492:	4643      	mov	r3, r8
 8001494:	4313      	orrs	r3, r2
 8001496:	001f      	movs	r7, r3
 8001498:	1e7a      	subs	r2, r7, #1
 800149a:	4197      	sbcs	r7, r2
 800149c:	1bc7      	subs	r7, r0, r7
 800149e:	42b8      	cmp	r0, r7
 80014a0:	4180      	sbcs	r0, r0
 80014a2:	4240      	negs	r0, r0
 80014a4:	1a09      	subs	r1, r1, r0
 80014a6:	e678      	b.n	800119a <__aeabi_dadd+0x62>
 80014a8:	000e      	movs	r6, r1
 80014aa:	003b      	movs	r3, r7
 80014ac:	4306      	orrs	r6, r0
 80014ae:	4313      	orrs	r3, r2
 80014b0:	2d00      	cmp	r5, #0
 80014b2:	d161      	bne.n	8001578 <__aeabi_dadd+0x440>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d000      	beq.n	80014ba <__aeabi_dadd+0x382>
 80014b8:	e0f4      	b.n	80016a4 <__aeabi_dadd+0x56c>
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_dadd+0x388>
 80014be:	e11b      	b.n	80016f8 <__aeabi_dadd+0x5c0>
 80014c0:	4664      	mov	r4, ip
 80014c2:	0039      	movs	r1, r7
 80014c4:	0010      	movs	r0, r2
 80014c6:	e739      	b.n	800133c <__aeabi_dadd+0x204>
 80014c8:	4f1a      	ldr	r7, [pc, #104]	; (8001534 <__aeabi_dadd+0x3fc>)
 80014ca:	42bb      	cmp	r3, r7
 80014cc:	d07a      	beq.n	80015c4 <__aeabi_dadd+0x48c>
 80014ce:	0033      	movs	r3, r6
 80014d0:	e6ff      	b.n	80012d2 <__aeabi_dadd+0x19a>
 80014d2:	0030      	movs	r0, r6
 80014d4:	3d1f      	subs	r5, #31
 80014d6:	40e8      	lsrs	r0, r5
 80014d8:	2b20      	cmp	r3, #32
 80014da:	d003      	beq.n	80014e4 <__aeabi_dadd+0x3ac>
 80014dc:	2140      	movs	r1, #64	; 0x40
 80014de:	1acb      	subs	r3, r1, r3
 80014e0:	409e      	lsls	r6, r3
 80014e2:	4337      	orrs	r7, r6
 80014e4:	1e7b      	subs	r3, r7, #1
 80014e6:	419f      	sbcs	r7, r3
 80014e8:	2207      	movs	r2, #7
 80014ea:	4307      	orrs	r7, r0
 80014ec:	403a      	ands	r2, r7
 80014ee:	2100      	movs	r1, #0
 80014f0:	2500      	movs	r5, #0
 80014f2:	e789      	b.n	8001408 <__aeabi_dadd+0x2d0>
 80014f4:	1a17      	subs	r7, r2, r0
 80014f6:	4643      	mov	r3, r8
 80014f8:	42ba      	cmp	r2, r7
 80014fa:	41b6      	sbcs	r6, r6
 80014fc:	1a59      	subs	r1, r3, r1
 80014fe:	4276      	negs	r6, r6
 8001500:	1b8e      	subs	r6, r1, r6
 8001502:	4664      	mov	r4, ip
 8001504:	e64e      	b.n	80011a4 <__aeabi_dadd+0x6c>
 8001506:	2b1f      	cmp	r3, #31
 8001508:	dd00      	ble.n	800150c <__aeabi_dadd+0x3d4>
 800150a:	e0ad      	b.n	8001668 <__aeabi_dadd+0x530>
 800150c:	2620      	movs	r6, #32
 800150e:	4647      	mov	r7, r8
 8001510:	1af6      	subs	r6, r6, r3
 8001512:	40b7      	lsls	r7, r6
 8001514:	46b9      	mov	r9, r7
 8001516:	0017      	movs	r7, r2
 8001518:	46b2      	mov	sl, r6
 800151a:	40df      	lsrs	r7, r3
 800151c:	464e      	mov	r6, r9
 800151e:	433e      	orrs	r6, r7
 8001520:	0037      	movs	r7, r6
 8001522:	4656      	mov	r6, sl
 8001524:	40b2      	lsls	r2, r6
 8001526:	1e56      	subs	r6, r2, #1
 8001528:	41b2      	sbcs	r2, r6
 800152a:	4317      	orrs	r7, r2
 800152c:	4642      	mov	r2, r8
 800152e:	40da      	lsrs	r2, r3
 8001530:	1889      	adds	r1, r1, r2
 8001532:	e6ae      	b.n	8001292 <__aeabi_dadd+0x15a>
 8001534:	000007ff 	.word	0x000007ff
 8001538:	ff7fffff 	.word	0xff7fffff
 800153c:	800fffff 	.word	0x800fffff
 8001540:	2620      	movs	r6, #32
 8001542:	4647      	mov	r7, r8
 8001544:	1af6      	subs	r6, r6, r3
 8001546:	40b7      	lsls	r7, r6
 8001548:	46b9      	mov	r9, r7
 800154a:	0017      	movs	r7, r2
 800154c:	46b2      	mov	sl, r6
 800154e:	40df      	lsrs	r7, r3
 8001550:	464e      	mov	r6, r9
 8001552:	433e      	orrs	r6, r7
 8001554:	0037      	movs	r7, r6
 8001556:	4656      	mov	r6, sl
 8001558:	40b2      	lsls	r2, r6
 800155a:	1e56      	subs	r6, r2, #1
 800155c:	41b2      	sbcs	r2, r6
 800155e:	4317      	orrs	r7, r2
 8001560:	4642      	mov	r2, r8
 8001562:	40da      	lsrs	r2, r3
 8001564:	1a89      	subs	r1, r1, r2
 8001566:	e799      	b.n	800149c <__aeabi_dadd+0x364>
 8001568:	4c7f      	ldr	r4, [pc, #508]	; (8001768 <__aeabi_dadd+0x630>)
 800156a:	42a6      	cmp	r6, r4
 800156c:	d05b      	beq.n	8001626 <__aeabi_dadd+0x4ee>
 800156e:	2480      	movs	r4, #128	; 0x80
 8001570:	0424      	lsls	r4, r4, #16
 8001572:	425b      	negs	r3, r3
 8001574:	4321      	orrs	r1, r4
 8001576:	e727      	b.n	80013c8 <__aeabi_dadd+0x290>
 8001578:	2e00      	cmp	r6, #0
 800157a:	d10c      	bne.n	8001596 <__aeabi_dadd+0x45e>
 800157c:	2b00      	cmp	r3, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x44a>
 8001580:	e0cb      	b.n	800171a <__aeabi_dadd+0x5e2>
 8001582:	4664      	mov	r4, ip
 8001584:	0039      	movs	r1, r7
 8001586:	0010      	movs	r0, r2
 8001588:	4d77      	ldr	r5, [pc, #476]	; (8001768 <__aeabi_dadd+0x630>)
 800158a:	e6d7      	b.n	800133c <__aeabi_dadd+0x204>
 800158c:	4f76      	ldr	r7, [pc, #472]	; (8001768 <__aeabi_dadd+0x630>)
 800158e:	42bb      	cmp	r3, r7
 8001590:	d018      	beq.n	80015c4 <__aeabi_dadd+0x48c>
 8001592:	0033      	movs	r3, r6
 8001594:	e675      	b.n	8001282 <__aeabi_dadd+0x14a>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d014      	beq.n	80015c4 <__aeabi_dadd+0x48c>
 800159a:	074b      	lsls	r3, r1, #29
 800159c:	08c0      	lsrs	r0, r0, #3
 800159e:	4318      	orrs	r0, r3
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	08c9      	lsrs	r1, r1, #3
 80015a4:	031b      	lsls	r3, r3, #12
 80015a6:	4219      	tst	r1, r3
 80015a8:	d007      	beq.n	80015ba <__aeabi_dadd+0x482>
 80015aa:	08fc      	lsrs	r4, r7, #3
 80015ac:	421c      	tst	r4, r3
 80015ae:	d104      	bne.n	80015ba <__aeabi_dadd+0x482>
 80015b0:	0779      	lsls	r1, r7, #29
 80015b2:	08d0      	lsrs	r0, r2, #3
 80015b4:	4308      	orrs	r0, r1
 80015b6:	46e1      	mov	r9, ip
 80015b8:	0021      	movs	r1, r4
 80015ba:	464c      	mov	r4, r9
 80015bc:	0f42      	lsrs	r2, r0, #29
 80015be:	00c9      	lsls	r1, r1, #3
 80015c0:	4311      	orrs	r1, r2
 80015c2:	00c0      	lsls	r0, r0, #3
 80015c4:	4d68      	ldr	r5, [pc, #416]	; (8001768 <__aeabi_dadd+0x630>)
 80015c6:	e6b9      	b.n	800133c <__aeabi_dadd+0x204>
 80015c8:	001d      	movs	r5, r3
 80015ca:	2200      	movs	r2, #0
 80015cc:	2300      	movs	r3, #0
 80015ce:	e6c0      	b.n	8001352 <__aeabi_dadd+0x21a>
 80015d0:	2d00      	cmp	r5, #0
 80015d2:	d15b      	bne.n	800168c <__aeabi_dadd+0x554>
 80015d4:	000d      	movs	r5, r1
 80015d6:	4305      	orrs	r5, r0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x4a4>
 80015da:	e6e2      	b.n	80013a2 <__aeabi_dadd+0x26a>
 80015dc:	1c5d      	adds	r5, r3, #1
 80015de:	d100      	bne.n	80015e2 <__aeabi_dadd+0x4aa>
 80015e0:	e0b0      	b.n	8001744 <__aeabi_dadd+0x60c>
 80015e2:	4d61      	ldr	r5, [pc, #388]	; (8001768 <__aeabi_dadd+0x630>)
 80015e4:	42ae      	cmp	r6, r5
 80015e6:	d01f      	beq.n	8001628 <__aeabi_dadd+0x4f0>
 80015e8:	43db      	mvns	r3, r3
 80015ea:	2b38      	cmp	r3, #56	; 0x38
 80015ec:	dc71      	bgt.n	80016d2 <__aeabi_dadd+0x59a>
 80015ee:	2b1f      	cmp	r3, #31
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dadd+0x4bc>
 80015f2:	e096      	b.n	8001722 <__aeabi_dadd+0x5ea>
 80015f4:	2520      	movs	r5, #32
 80015f6:	000f      	movs	r7, r1
 80015f8:	1aed      	subs	r5, r5, r3
 80015fa:	40af      	lsls	r7, r5
 80015fc:	46b9      	mov	r9, r7
 80015fe:	0007      	movs	r7, r0
 8001600:	46aa      	mov	sl, r5
 8001602:	40df      	lsrs	r7, r3
 8001604:	464d      	mov	r5, r9
 8001606:	433d      	orrs	r5, r7
 8001608:	002f      	movs	r7, r5
 800160a:	4655      	mov	r5, sl
 800160c:	40a8      	lsls	r0, r5
 800160e:	40d9      	lsrs	r1, r3
 8001610:	1e45      	subs	r5, r0, #1
 8001612:	41a8      	sbcs	r0, r5
 8001614:	4488      	add	r8, r1
 8001616:	4307      	orrs	r7, r0
 8001618:	18bf      	adds	r7, r7, r2
 800161a:	4297      	cmp	r7, r2
 800161c:	4192      	sbcs	r2, r2
 800161e:	4251      	negs	r1, r2
 8001620:	4441      	add	r1, r8
 8001622:	0035      	movs	r5, r6
 8001624:	e63a      	b.n	800129c <__aeabi_dadd+0x164>
 8001626:	4664      	mov	r4, ip
 8001628:	0035      	movs	r5, r6
 800162a:	4641      	mov	r1, r8
 800162c:	0010      	movs	r0, r2
 800162e:	e685      	b.n	800133c <__aeabi_dadd+0x204>
 8001630:	000b      	movs	r3, r1
 8001632:	4303      	orrs	r3, r0
 8001634:	2d00      	cmp	r5, #0
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x502>
 8001638:	e663      	b.n	8001302 <__aeabi_dadd+0x1ca>
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f5      	beq.n	800162a <__aeabi_dadd+0x4f2>
 800163e:	4643      	mov	r3, r8
 8001640:	4313      	orrs	r3, r2
 8001642:	d100      	bne.n	8001646 <__aeabi_dadd+0x50e>
 8001644:	e67a      	b.n	800133c <__aeabi_dadd+0x204>
 8001646:	1887      	adds	r7, r0, r2
 8001648:	4287      	cmp	r7, r0
 800164a:	4180      	sbcs	r0, r0
 800164c:	2207      	movs	r2, #7
 800164e:	4441      	add	r1, r8
 8001650:	4240      	negs	r0, r0
 8001652:	1809      	adds	r1, r1, r0
 8001654:	403a      	ands	r2, r7
 8001656:	020b      	lsls	r3, r1, #8
 8001658:	d400      	bmi.n	800165c <__aeabi_dadd+0x524>
 800165a:	e6d5      	b.n	8001408 <__aeabi_dadd+0x2d0>
 800165c:	4b43      	ldr	r3, [pc, #268]	; (800176c <__aeabi_dadd+0x634>)
 800165e:	3501      	adds	r5, #1
 8001660:	4019      	ands	r1, r3
 8001662:	e5c9      	b.n	80011f8 <__aeabi_dadd+0xc0>
 8001664:	0038      	movs	r0, r7
 8001666:	e669      	b.n	800133c <__aeabi_dadd+0x204>
 8001668:	001e      	movs	r6, r3
 800166a:	4647      	mov	r7, r8
 800166c:	3e20      	subs	r6, #32
 800166e:	40f7      	lsrs	r7, r6
 8001670:	46bc      	mov	ip, r7
 8001672:	2b20      	cmp	r3, #32
 8001674:	d004      	beq.n	8001680 <__aeabi_dadd+0x548>
 8001676:	2640      	movs	r6, #64	; 0x40
 8001678:	1af3      	subs	r3, r6, r3
 800167a:	4646      	mov	r6, r8
 800167c:	409e      	lsls	r6, r3
 800167e:	4332      	orrs	r2, r6
 8001680:	0017      	movs	r7, r2
 8001682:	4663      	mov	r3, ip
 8001684:	1e7a      	subs	r2, r7, #1
 8001686:	4197      	sbcs	r7, r2
 8001688:	431f      	orrs	r7, r3
 800168a:	e602      	b.n	8001292 <__aeabi_dadd+0x15a>
 800168c:	4d36      	ldr	r5, [pc, #216]	; (8001768 <__aeabi_dadd+0x630>)
 800168e:	42ae      	cmp	r6, r5
 8001690:	d0ca      	beq.n	8001628 <__aeabi_dadd+0x4f0>
 8001692:	2580      	movs	r5, #128	; 0x80
 8001694:	042d      	lsls	r5, r5, #16
 8001696:	425b      	negs	r3, r3
 8001698:	4329      	orrs	r1, r5
 800169a:	e7a6      	b.n	80015ea <__aeabi_dadd+0x4b2>
 800169c:	4308      	orrs	r0, r1
 800169e:	1e41      	subs	r1, r0, #1
 80016a0:	4188      	sbcs	r0, r1
 80016a2:	e6a6      	b.n	80013f2 <__aeabi_dadd+0x2ba>
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d100      	bne.n	80016aa <__aeabi_dadd+0x572>
 80016a8:	e648      	b.n	800133c <__aeabi_dadd+0x204>
 80016aa:	1a87      	subs	r7, r0, r2
 80016ac:	4643      	mov	r3, r8
 80016ae:	42b8      	cmp	r0, r7
 80016b0:	41b6      	sbcs	r6, r6
 80016b2:	1acb      	subs	r3, r1, r3
 80016b4:	4276      	negs	r6, r6
 80016b6:	1b9e      	subs	r6, r3, r6
 80016b8:	0233      	lsls	r3, r6, #8
 80016ba:	d54b      	bpl.n	8001754 <__aeabi_dadd+0x61c>
 80016bc:	1a17      	subs	r7, r2, r0
 80016be:	4643      	mov	r3, r8
 80016c0:	42ba      	cmp	r2, r7
 80016c2:	4192      	sbcs	r2, r2
 80016c4:	1a59      	subs	r1, r3, r1
 80016c6:	4252      	negs	r2, r2
 80016c8:	1a89      	subs	r1, r1, r2
 80016ca:	2207      	movs	r2, #7
 80016cc:	4664      	mov	r4, ip
 80016ce:	403a      	ands	r2, r7
 80016d0:	e592      	b.n	80011f8 <__aeabi_dadd+0xc0>
 80016d2:	4301      	orrs	r1, r0
 80016d4:	000f      	movs	r7, r1
 80016d6:	1e79      	subs	r1, r7, #1
 80016d8:	418f      	sbcs	r7, r1
 80016da:	e79d      	b.n	8001618 <__aeabi_dadd+0x4e0>
 80016dc:	001c      	movs	r4, r3
 80016de:	000f      	movs	r7, r1
 80016e0:	3c20      	subs	r4, #32
 80016e2:	40e7      	lsrs	r7, r4
 80016e4:	2b20      	cmp	r3, #32
 80016e6:	d003      	beq.n	80016f0 <__aeabi_dadd+0x5b8>
 80016e8:	2440      	movs	r4, #64	; 0x40
 80016ea:	1ae3      	subs	r3, r4, r3
 80016ec:	4099      	lsls	r1, r3
 80016ee:	4308      	orrs	r0, r1
 80016f0:	1e41      	subs	r1, r0, #1
 80016f2:	4188      	sbcs	r0, r1
 80016f4:	4338      	orrs	r0, r7
 80016f6:	e67c      	b.n	80013f2 <__aeabi_dadd+0x2ba>
 80016f8:	2200      	movs	r2, #0
 80016fa:	2400      	movs	r4, #0
 80016fc:	e625      	b.n	800134a <__aeabi_dadd+0x212>
 80016fe:	1a17      	subs	r7, r2, r0
 8001700:	4643      	mov	r3, r8
 8001702:	42ba      	cmp	r2, r7
 8001704:	4192      	sbcs	r2, r2
 8001706:	1a59      	subs	r1, r3, r1
 8001708:	4252      	negs	r2, r2
 800170a:	1a89      	subs	r1, r1, r2
 800170c:	4664      	mov	r4, ip
 800170e:	0035      	movs	r5, r6
 8001710:	e543      	b.n	800119a <__aeabi_dadd+0x62>
 8001712:	4641      	mov	r1, r8
 8001714:	0010      	movs	r0, r2
 8001716:	4d14      	ldr	r5, [pc, #80]	; (8001768 <__aeabi_dadd+0x630>)
 8001718:	e610      	b.n	800133c <__aeabi_dadd+0x204>
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	2400      	movs	r4, #0
 800171e:	0312      	lsls	r2, r2, #12
 8001720:	e680      	b.n	8001424 <__aeabi_dadd+0x2ec>
 8001722:	001d      	movs	r5, r3
 8001724:	000f      	movs	r7, r1
 8001726:	3d20      	subs	r5, #32
 8001728:	40ef      	lsrs	r7, r5
 800172a:	46bc      	mov	ip, r7
 800172c:	2b20      	cmp	r3, #32
 800172e:	d003      	beq.n	8001738 <__aeabi_dadd+0x600>
 8001730:	2540      	movs	r5, #64	; 0x40
 8001732:	1aeb      	subs	r3, r5, r3
 8001734:	4099      	lsls	r1, r3
 8001736:	4308      	orrs	r0, r1
 8001738:	0007      	movs	r7, r0
 800173a:	4663      	mov	r3, ip
 800173c:	1e78      	subs	r0, r7, #1
 800173e:	4187      	sbcs	r7, r0
 8001740:	431f      	orrs	r7, r3
 8001742:	e769      	b.n	8001618 <__aeabi_dadd+0x4e0>
 8001744:	1887      	adds	r7, r0, r2
 8001746:	4297      	cmp	r7, r2
 8001748:	419b      	sbcs	r3, r3
 800174a:	4441      	add	r1, r8
 800174c:	425b      	negs	r3, r3
 800174e:	18c9      	adds	r1, r1, r3
 8001750:	0035      	movs	r5, r6
 8001752:	e5a3      	b.n	800129c <__aeabi_dadd+0x164>
 8001754:	003b      	movs	r3, r7
 8001756:	4333      	orrs	r3, r6
 8001758:	d0ce      	beq.n	80016f8 <__aeabi_dadd+0x5c0>
 800175a:	2207      	movs	r2, #7
 800175c:	0031      	movs	r1, r6
 800175e:	403a      	ands	r2, r7
 8001760:	e652      	b.n	8001408 <__aeabi_dadd+0x2d0>
 8001762:	2300      	movs	r3, #0
 8001764:	001a      	movs	r2, r3
 8001766:	e5f4      	b.n	8001352 <__aeabi_dadd+0x21a>
 8001768:	000007ff 	.word	0x000007ff
 800176c:	ff7fffff 	.word	0xff7fffff

08001770 <__aeabi_ddiv>:
 8001770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001772:	4657      	mov	r7, sl
 8001774:	46de      	mov	lr, fp
 8001776:	464e      	mov	r6, r9
 8001778:	4645      	mov	r5, r8
 800177a:	b5e0      	push	{r5, r6, r7, lr}
 800177c:	4683      	mov	fp, r0
 800177e:	0007      	movs	r7, r0
 8001780:	030e      	lsls	r6, r1, #12
 8001782:	0048      	lsls	r0, r1, #1
 8001784:	b085      	sub	sp, #20
 8001786:	4692      	mov	sl, r2
 8001788:	001c      	movs	r4, r3
 800178a:	0b36      	lsrs	r6, r6, #12
 800178c:	0d40      	lsrs	r0, r0, #21
 800178e:	0fcd      	lsrs	r5, r1, #31
 8001790:	2800      	cmp	r0, #0
 8001792:	d100      	bne.n	8001796 <__aeabi_ddiv+0x26>
 8001794:	e09d      	b.n	80018d2 <__aeabi_ddiv+0x162>
 8001796:	4b95      	ldr	r3, [pc, #596]	; (80019ec <__aeabi_ddiv+0x27c>)
 8001798:	4298      	cmp	r0, r3
 800179a:	d039      	beq.n	8001810 <__aeabi_ddiv+0xa0>
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	00f6      	lsls	r6, r6, #3
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	431e      	orrs	r6, r3
 80017a4:	4a92      	ldr	r2, [pc, #584]	; (80019f0 <__aeabi_ddiv+0x280>)
 80017a6:	0f7b      	lsrs	r3, r7, #29
 80017a8:	4333      	orrs	r3, r6
 80017aa:	4699      	mov	r9, r3
 80017ac:	4694      	mov	ip, r2
 80017ae:	0003      	movs	r3, r0
 80017b0:	4463      	add	r3, ip
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2300      	movs	r3, #0
 80017b6:	2600      	movs	r6, #0
 80017b8:	00ff      	lsls	r7, r7, #3
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	0323      	lsls	r3, r4, #12
 80017be:	0b1b      	lsrs	r3, r3, #12
 80017c0:	4698      	mov	r8, r3
 80017c2:	0063      	lsls	r3, r4, #1
 80017c4:	0fe4      	lsrs	r4, r4, #31
 80017c6:	4652      	mov	r2, sl
 80017c8:	0d5b      	lsrs	r3, r3, #21
 80017ca:	9401      	str	r4, [sp, #4]
 80017cc:	d100      	bne.n	80017d0 <__aeabi_ddiv+0x60>
 80017ce:	e0b3      	b.n	8001938 <__aeabi_ddiv+0x1c8>
 80017d0:	4986      	ldr	r1, [pc, #536]	; (80019ec <__aeabi_ddiv+0x27c>)
 80017d2:	428b      	cmp	r3, r1
 80017d4:	d100      	bne.n	80017d8 <__aeabi_ddiv+0x68>
 80017d6:	e09e      	b.n	8001916 <__aeabi_ddiv+0x1a6>
 80017d8:	4642      	mov	r2, r8
 80017da:	00d1      	lsls	r1, r2, #3
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	0412      	lsls	r2, r2, #16
 80017e0:	430a      	orrs	r2, r1
 80017e2:	4651      	mov	r1, sl
 80017e4:	0f49      	lsrs	r1, r1, #29
 80017e6:	4311      	orrs	r1, r2
 80017e8:	468b      	mov	fp, r1
 80017ea:	4981      	ldr	r1, [pc, #516]	; (80019f0 <__aeabi_ddiv+0x280>)
 80017ec:	4652      	mov	r2, sl
 80017ee:	468c      	mov	ip, r1
 80017f0:	9900      	ldr	r1, [sp, #0]
 80017f2:	4463      	add	r3, ip
 80017f4:	1acb      	subs	r3, r1, r3
 80017f6:	2100      	movs	r1, #0
 80017f8:	00d2      	lsls	r2, r2, #3
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	002b      	movs	r3, r5
 80017fe:	4063      	eors	r3, r4
 8001800:	469a      	mov	sl, r3
 8001802:	2e0f      	cmp	r6, #15
 8001804:	d900      	bls.n	8001808 <__aeabi_ddiv+0x98>
 8001806:	e105      	b.n	8001a14 <__aeabi_ddiv+0x2a4>
 8001808:	4b7a      	ldr	r3, [pc, #488]	; (80019f4 <__aeabi_ddiv+0x284>)
 800180a:	00b6      	lsls	r6, r6, #2
 800180c:	599b      	ldr	r3, [r3, r6]
 800180e:	469f      	mov	pc, r3
 8001810:	465b      	mov	r3, fp
 8001812:	4333      	orrs	r3, r6
 8001814:	4699      	mov	r9, r3
 8001816:	d000      	beq.n	800181a <__aeabi_ddiv+0xaa>
 8001818:	e0b8      	b.n	800198c <__aeabi_ddiv+0x21c>
 800181a:	2302      	movs	r3, #2
 800181c:	2608      	movs	r6, #8
 800181e:	2700      	movs	r7, #0
 8001820:	9000      	str	r0, [sp, #0]
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	e7ca      	b.n	80017bc <__aeabi_ddiv+0x4c>
 8001826:	46cb      	mov	fp, r9
 8001828:	003a      	movs	r2, r7
 800182a:	9902      	ldr	r1, [sp, #8]
 800182c:	9501      	str	r5, [sp, #4]
 800182e:	9b01      	ldr	r3, [sp, #4]
 8001830:	469a      	mov	sl, r3
 8001832:	2902      	cmp	r1, #2
 8001834:	d027      	beq.n	8001886 <__aeabi_ddiv+0x116>
 8001836:	2903      	cmp	r1, #3
 8001838:	d100      	bne.n	800183c <__aeabi_ddiv+0xcc>
 800183a:	e280      	b.n	8001d3e <__aeabi_ddiv+0x5ce>
 800183c:	2901      	cmp	r1, #1
 800183e:	d044      	beq.n	80018ca <__aeabi_ddiv+0x15a>
 8001840:	496d      	ldr	r1, [pc, #436]	; (80019f8 <__aeabi_ddiv+0x288>)
 8001842:	9b00      	ldr	r3, [sp, #0]
 8001844:	468c      	mov	ip, r1
 8001846:	4463      	add	r3, ip
 8001848:	001c      	movs	r4, r3
 800184a:	2c00      	cmp	r4, #0
 800184c:	dd38      	ble.n	80018c0 <__aeabi_ddiv+0x150>
 800184e:	0753      	lsls	r3, r2, #29
 8001850:	d000      	beq.n	8001854 <__aeabi_ddiv+0xe4>
 8001852:	e213      	b.n	8001c7c <__aeabi_ddiv+0x50c>
 8001854:	08d2      	lsrs	r2, r2, #3
 8001856:	465b      	mov	r3, fp
 8001858:	01db      	lsls	r3, r3, #7
 800185a:	d509      	bpl.n	8001870 <__aeabi_ddiv+0x100>
 800185c:	4659      	mov	r1, fp
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <__aeabi_ddiv+0x28c>)
 8001860:	4019      	ands	r1, r3
 8001862:	468b      	mov	fp, r1
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	00c9      	lsls	r1, r1, #3
 8001868:	468c      	mov	ip, r1
 800186a:	9b00      	ldr	r3, [sp, #0]
 800186c:	4463      	add	r3, ip
 800186e:	001c      	movs	r4, r3
 8001870:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <__aeabi_ddiv+0x290>)
 8001872:	429c      	cmp	r4, r3
 8001874:	dc07      	bgt.n	8001886 <__aeabi_ddiv+0x116>
 8001876:	465b      	mov	r3, fp
 8001878:	0564      	lsls	r4, r4, #21
 800187a:	075f      	lsls	r7, r3, #29
 800187c:	025b      	lsls	r3, r3, #9
 800187e:	4317      	orrs	r7, r2
 8001880:	0b1b      	lsrs	r3, r3, #12
 8001882:	0d62      	lsrs	r2, r4, #21
 8001884:	e002      	b.n	800188c <__aeabi_ddiv+0x11c>
 8001886:	2300      	movs	r3, #0
 8001888:	2700      	movs	r7, #0
 800188a:	4a58      	ldr	r2, [pc, #352]	; (80019ec <__aeabi_ddiv+0x27c>)
 800188c:	2100      	movs	r1, #0
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0b1c      	lsrs	r4, r3, #12
 8001892:	0d0b      	lsrs	r3, r1, #20
 8001894:	051b      	lsls	r3, r3, #20
 8001896:	4323      	orrs	r3, r4
 8001898:	0514      	lsls	r4, r2, #20
 800189a:	4a5a      	ldr	r2, [pc, #360]	; (8001a04 <__aeabi_ddiv+0x294>)
 800189c:	0038      	movs	r0, r7
 800189e:	4013      	ands	r3, r2
 80018a0:	431c      	orrs	r4, r3
 80018a2:	4653      	mov	r3, sl
 80018a4:	0064      	lsls	r4, r4, #1
 80018a6:	07db      	lsls	r3, r3, #31
 80018a8:	0864      	lsrs	r4, r4, #1
 80018aa:	431c      	orrs	r4, r3
 80018ac:	0021      	movs	r1, r4
 80018ae:	b005      	add	sp, #20
 80018b0:	bc3c      	pop	{r2, r3, r4, r5}
 80018b2:	4690      	mov	r8, r2
 80018b4:	4699      	mov	r9, r3
 80018b6:	46a2      	mov	sl, r4
 80018b8:	46ab      	mov	fp, r5
 80018ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018bc:	2201      	movs	r2, #1
 80018be:	4252      	negs	r2, r2
 80018c0:	2301      	movs	r3, #1
 80018c2:	1b1b      	subs	r3, r3, r4
 80018c4:	2b38      	cmp	r3, #56	; 0x38
 80018c6:	dc00      	bgt.n	80018ca <__aeabi_ddiv+0x15a>
 80018c8:	e1ad      	b.n	8001c26 <__aeabi_ddiv+0x4b6>
 80018ca:	2200      	movs	r2, #0
 80018cc:	2300      	movs	r3, #0
 80018ce:	2700      	movs	r7, #0
 80018d0:	e7dc      	b.n	800188c <__aeabi_ddiv+0x11c>
 80018d2:	465b      	mov	r3, fp
 80018d4:	4333      	orrs	r3, r6
 80018d6:	4699      	mov	r9, r3
 80018d8:	d05e      	beq.n	8001998 <__aeabi_ddiv+0x228>
 80018da:	2e00      	cmp	r6, #0
 80018dc:	d100      	bne.n	80018e0 <__aeabi_ddiv+0x170>
 80018de:	e18a      	b.n	8001bf6 <__aeabi_ddiv+0x486>
 80018e0:	0030      	movs	r0, r6
 80018e2:	f001 fa6f 	bl	8002dc4 <__clzsi2>
 80018e6:	0003      	movs	r3, r0
 80018e8:	3b0b      	subs	r3, #11
 80018ea:	2b1c      	cmp	r3, #28
 80018ec:	dd00      	ble.n	80018f0 <__aeabi_ddiv+0x180>
 80018ee:	e17b      	b.n	8001be8 <__aeabi_ddiv+0x478>
 80018f0:	221d      	movs	r2, #29
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	465a      	mov	r2, fp
 80018f6:	0001      	movs	r1, r0
 80018f8:	40da      	lsrs	r2, r3
 80018fa:	3908      	subs	r1, #8
 80018fc:	408e      	lsls	r6, r1
 80018fe:	0013      	movs	r3, r2
 8001900:	465f      	mov	r7, fp
 8001902:	4333      	orrs	r3, r6
 8001904:	4699      	mov	r9, r3
 8001906:	408f      	lsls	r7, r1
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <__aeabi_ddiv+0x298>)
 800190a:	2600      	movs	r6, #0
 800190c:	1a1b      	subs	r3, r3, r0
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2300      	movs	r3, #0
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	e752      	b.n	80017bc <__aeabi_ddiv+0x4c>
 8001916:	4641      	mov	r1, r8
 8001918:	4653      	mov	r3, sl
 800191a:	430b      	orrs	r3, r1
 800191c:	493b      	ldr	r1, [pc, #236]	; (8001a0c <__aeabi_ddiv+0x29c>)
 800191e:	469b      	mov	fp, r3
 8001920:	468c      	mov	ip, r1
 8001922:	9b00      	ldr	r3, [sp, #0]
 8001924:	4463      	add	r3, ip
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	465b      	mov	r3, fp
 800192a:	2b00      	cmp	r3, #0
 800192c:	d13b      	bne.n	80019a6 <__aeabi_ddiv+0x236>
 800192e:	2302      	movs	r3, #2
 8001930:	2200      	movs	r2, #0
 8001932:	431e      	orrs	r6, r3
 8001934:	2102      	movs	r1, #2
 8001936:	e761      	b.n	80017fc <__aeabi_ddiv+0x8c>
 8001938:	4643      	mov	r3, r8
 800193a:	4313      	orrs	r3, r2
 800193c:	469b      	mov	fp, r3
 800193e:	d037      	beq.n	80019b0 <__aeabi_ddiv+0x240>
 8001940:	4643      	mov	r3, r8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d100      	bne.n	8001948 <__aeabi_ddiv+0x1d8>
 8001946:	e162      	b.n	8001c0e <__aeabi_ddiv+0x49e>
 8001948:	4640      	mov	r0, r8
 800194a:	f001 fa3b 	bl	8002dc4 <__clzsi2>
 800194e:	0003      	movs	r3, r0
 8001950:	3b0b      	subs	r3, #11
 8001952:	2b1c      	cmp	r3, #28
 8001954:	dd00      	ble.n	8001958 <__aeabi_ddiv+0x1e8>
 8001956:	e153      	b.n	8001c00 <__aeabi_ddiv+0x490>
 8001958:	0002      	movs	r2, r0
 800195a:	4641      	mov	r1, r8
 800195c:	3a08      	subs	r2, #8
 800195e:	4091      	lsls	r1, r2
 8001960:	4688      	mov	r8, r1
 8001962:	211d      	movs	r1, #29
 8001964:	1acb      	subs	r3, r1, r3
 8001966:	4651      	mov	r1, sl
 8001968:	40d9      	lsrs	r1, r3
 800196a:	000b      	movs	r3, r1
 800196c:	4641      	mov	r1, r8
 800196e:	430b      	orrs	r3, r1
 8001970:	469b      	mov	fp, r3
 8001972:	4653      	mov	r3, sl
 8001974:	4093      	lsls	r3, r2
 8001976:	001a      	movs	r2, r3
 8001978:	9b00      	ldr	r3, [sp, #0]
 800197a:	4925      	ldr	r1, [pc, #148]	; (8001a10 <__aeabi_ddiv+0x2a0>)
 800197c:	469c      	mov	ip, r3
 800197e:	4460      	add	r0, ip
 8001980:	0003      	movs	r3, r0
 8001982:	468c      	mov	ip, r1
 8001984:	4463      	add	r3, ip
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2100      	movs	r1, #0
 800198a:	e737      	b.n	80017fc <__aeabi_ddiv+0x8c>
 800198c:	2303      	movs	r3, #3
 800198e:	46b1      	mov	r9, r6
 8001990:	9000      	str	r0, [sp, #0]
 8001992:	260c      	movs	r6, #12
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	e711      	b.n	80017bc <__aeabi_ddiv+0x4c>
 8001998:	2300      	movs	r3, #0
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	2604      	movs	r6, #4
 80019a0:	2700      	movs	r7, #0
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	e70a      	b.n	80017bc <__aeabi_ddiv+0x4c>
 80019a6:	2303      	movs	r3, #3
 80019a8:	46c3      	mov	fp, r8
 80019aa:	431e      	orrs	r6, r3
 80019ac:	2103      	movs	r1, #3
 80019ae:	e725      	b.n	80017fc <__aeabi_ddiv+0x8c>
 80019b0:	3301      	adds	r3, #1
 80019b2:	431e      	orrs	r6, r3
 80019b4:	2200      	movs	r2, #0
 80019b6:	2101      	movs	r1, #1
 80019b8:	e720      	b.n	80017fc <__aeabi_ddiv+0x8c>
 80019ba:	2300      	movs	r3, #0
 80019bc:	469a      	mov	sl, r3
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	2700      	movs	r7, #0
 80019c2:	031b      	lsls	r3, r3, #12
 80019c4:	4a09      	ldr	r2, [pc, #36]	; (80019ec <__aeabi_ddiv+0x27c>)
 80019c6:	e761      	b.n	800188c <__aeabi_ddiv+0x11c>
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	4649      	mov	r1, r9
 80019cc:	031b      	lsls	r3, r3, #12
 80019ce:	4219      	tst	r1, r3
 80019d0:	d100      	bne.n	80019d4 <__aeabi_ddiv+0x264>
 80019d2:	e0e2      	b.n	8001b9a <__aeabi_ddiv+0x42a>
 80019d4:	4659      	mov	r1, fp
 80019d6:	4219      	tst	r1, r3
 80019d8:	d000      	beq.n	80019dc <__aeabi_ddiv+0x26c>
 80019da:	e0de      	b.n	8001b9a <__aeabi_ddiv+0x42a>
 80019dc:	430b      	orrs	r3, r1
 80019de:	031b      	lsls	r3, r3, #12
 80019e0:	0017      	movs	r7, r2
 80019e2:	0b1b      	lsrs	r3, r3, #12
 80019e4:	46a2      	mov	sl, r4
 80019e6:	4a01      	ldr	r2, [pc, #4]	; (80019ec <__aeabi_ddiv+0x27c>)
 80019e8:	e750      	b.n	800188c <__aeabi_ddiv+0x11c>
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	000007ff 	.word	0x000007ff
 80019f0:	fffffc01 	.word	0xfffffc01
 80019f4:	080050e0 	.word	0x080050e0
 80019f8:	000003ff 	.word	0x000003ff
 80019fc:	feffffff 	.word	0xfeffffff
 8001a00:	000007fe 	.word	0x000007fe
 8001a04:	800fffff 	.word	0x800fffff
 8001a08:	fffffc0d 	.word	0xfffffc0d
 8001a0c:	fffff801 	.word	0xfffff801
 8001a10:	000003f3 	.word	0x000003f3
 8001a14:	45d9      	cmp	r9, fp
 8001a16:	d900      	bls.n	8001a1a <__aeabi_ddiv+0x2aa>
 8001a18:	e0cb      	b.n	8001bb2 <__aeabi_ddiv+0x442>
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_ddiv+0x2ae>
 8001a1c:	e0c6      	b.n	8001bac <__aeabi_ddiv+0x43c>
 8001a1e:	003c      	movs	r4, r7
 8001a20:	4648      	mov	r0, r9
 8001a22:	2700      	movs	r7, #0
 8001a24:	9b00      	ldr	r3, [sp, #0]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	465b      	mov	r3, fp
 8001a2c:	0e16      	lsrs	r6, r2, #24
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	431e      	orrs	r6, r3
 8001a32:	0213      	lsls	r3, r2, #8
 8001a34:	4698      	mov	r8, r3
 8001a36:	0433      	lsls	r3, r6, #16
 8001a38:	0c1b      	lsrs	r3, r3, #16
 8001a3a:	4699      	mov	r9, r3
 8001a3c:	0c31      	lsrs	r1, r6, #16
 8001a3e:	9101      	str	r1, [sp, #4]
 8001a40:	f7fe fc50 	bl	80002e4 <__aeabi_uidivmod>
 8001a44:	464a      	mov	r2, r9
 8001a46:	4342      	muls	r2, r0
 8001a48:	040b      	lsls	r3, r1, #16
 8001a4a:	0c21      	lsrs	r1, r4, #16
 8001a4c:	0005      	movs	r5, r0
 8001a4e:	4319      	orrs	r1, r3
 8001a50:	428a      	cmp	r2, r1
 8001a52:	d907      	bls.n	8001a64 <__aeabi_ddiv+0x2f4>
 8001a54:	1989      	adds	r1, r1, r6
 8001a56:	3d01      	subs	r5, #1
 8001a58:	428e      	cmp	r6, r1
 8001a5a:	d803      	bhi.n	8001a64 <__aeabi_ddiv+0x2f4>
 8001a5c:	428a      	cmp	r2, r1
 8001a5e:	d901      	bls.n	8001a64 <__aeabi_ddiv+0x2f4>
 8001a60:	1e85      	subs	r5, r0, #2
 8001a62:	1989      	adds	r1, r1, r6
 8001a64:	1a88      	subs	r0, r1, r2
 8001a66:	9901      	ldr	r1, [sp, #4]
 8001a68:	f7fe fc3c 	bl	80002e4 <__aeabi_uidivmod>
 8001a6c:	0409      	lsls	r1, r1, #16
 8001a6e:	468c      	mov	ip, r1
 8001a70:	464a      	mov	r2, r9
 8001a72:	0421      	lsls	r1, r4, #16
 8001a74:	4664      	mov	r4, ip
 8001a76:	4342      	muls	r2, r0
 8001a78:	0c09      	lsrs	r1, r1, #16
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	4321      	orrs	r1, r4
 8001a7e:	428a      	cmp	r2, r1
 8001a80:	d904      	bls.n	8001a8c <__aeabi_ddiv+0x31c>
 8001a82:	1989      	adds	r1, r1, r6
 8001a84:	3b01      	subs	r3, #1
 8001a86:	428e      	cmp	r6, r1
 8001a88:	d800      	bhi.n	8001a8c <__aeabi_ddiv+0x31c>
 8001a8a:	e0f1      	b.n	8001c70 <__aeabi_ddiv+0x500>
 8001a8c:	042d      	lsls	r5, r5, #16
 8001a8e:	431d      	orrs	r5, r3
 8001a90:	46ab      	mov	fp, r5
 8001a92:	4643      	mov	r3, r8
 8001a94:	1a89      	subs	r1, r1, r2
 8001a96:	4642      	mov	r2, r8
 8001a98:	0c28      	lsrs	r0, r5, #16
 8001a9a:	0412      	lsls	r2, r2, #16
 8001a9c:	0c1d      	lsrs	r5, r3, #16
 8001a9e:	465b      	mov	r3, fp
 8001aa0:	0c14      	lsrs	r4, r2, #16
 8001aa2:	0022      	movs	r2, r4
 8001aa4:	041b      	lsls	r3, r3, #16
 8001aa6:	0c1b      	lsrs	r3, r3, #16
 8001aa8:	435a      	muls	r2, r3
 8001aaa:	9403      	str	r4, [sp, #12]
 8001aac:	436b      	muls	r3, r5
 8001aae:	4344      	muls	r4, r0
 8001ab0:	9502      	str	r5, [sp, #8]
 8001ab2:	4368      	muls	r0, r5
 8001ab4:	191b      	adds	r3, r3, r4
 8001ab6:	0c15      	lsrs	r5, r2, #16
 8001ab8:	18eb      	adds	r3, r5, r3
 8001aba:	429c      	cmp	r4, r3
 8001abc:	d903      	bls.n	8001ac6 <__aeabi_ddiv+0x356>
 8001abe:	2480      	movs	r4, #128	; 0x80
 8001ac0:	0264      	lsls	r4, r4, #9
 8001ac2:	46a4      	mov	ip, r4
 8001ac4:	4460      	add	r0, ip
 8001ac6:	0c1c      	lsrs	r4, r3, #16
 8001ac8:	0415      	lsls	r5, r2, #16
 8001aca:	041b      	lsls	r3, r3, #16
 8001acc:	0c2d      	lsrs	r5, r5, #16
 8001ace:	1820      	adds	r0, r4, r0
 8001ad0:	195d      	adds	r5, r3, r5
 8001ad2:	4281      	cmp	r1, r0
 8001ad4:	d377      	bcc.n	8001bc6 <__aeabi_ddiv+0x456>
 8001ad6:	d073      	beq.n	8001bc0 <__aeabi_ddiv+0x450>
 8001ad8:	1a0c      	subs	r4, r1, r0
 8001ada:	4aa2      	ldr	r2, [pc, #648]	; (8001d64 <__aeabi_ddiv+0x5f4>)
 8001adc:	1b7d      	subs	r5, r7, r5
 8001ade:	42af      	cmp	r7, r5
 8001ae0:	41bf      	sbcs	r7, r7
 8001ae2:	4694      	mov	ip, r2
 8001ae4:	9b00      	ldr	r3, [sp, #0]
 8001ae6:	427f      	negs	r7, r7
 8001ae8:	4463      	add	r3, ip
 8001aea:	1be0      	subs	r0, r4, r7
 8001aec:	001c      	movs	r4, r3
 8001aee:	4286      	cmp	r6, r0
 8001af0:	d100      	bne.n	8001af4 <__aeabi_ddiv+0x384>
 8001af2:	e0db      	b.n	8001cac <__aeabi_ddiv+0x53c>
 8001af4:	9901      	ldr	r1, [sp, #4]
 8001af6:	f7fe fbf5 	bl	80002e4 <__aeabi_uidivmod>
 8001afa:	464a      	mov	r2, r9
 8001afc:	4342      	muls	r2, r0
 8001afe:	040b      	lsls	r3, r1, #16
 8001b00:	0c29      	lsrs	r1, r5, #16
 8001b02:	0007      	movs	r7, r0
 8001b04:	4319      	orrs	r1, r3
 8001b06:	428a      	cmp	r2, r1
 8001b08:	d907      	bls.n	8001b1a <__aeabi_ddiv+0x3aa>
 8001b0a:	1989      	adds	r1, r1, r6
 8001b0c:	3f01      	subs	r7, #1
 8001b0e:	428e      	cmp	r6, r1
 8001b10:	d803      	bhi.n	8001b1a <__aeabi_ddiv+0x3aa>
 8001b12:	428a      	cmp	r2, r1
 8001b14:	d901      	bls.n	8001b1a <__aeabi_ddiv+0x3aa>
 8001b16:	1e87      	subs	r7, r0, #2
 8001b18:	1989      	adds	r1, r1, r6
 8001b1a:	1a88      	subs	r0, r1, r2
 8001b1c:	9901      	ldr	r1, [sp, #4]
 8001b1e:	f7fe fbe1 	bl	80002e4 <__aeabi_uidivmod>
 8001b22:	0409      	lsls	r1, r1, #16
 8001b24:	464a      	mov	r2, r9
 8001b26:	4689      	mov	r9, r1
 8001b28:	0429      	lsls	r1, r5, #16
 8001b2a:	464d      	mov	r5, r9
 8001b2c:	4342      	muls	r2, r0
 8001b2e:	0c09      	lsrs	r1, r1, #16
 8001b30:	0003      	movs	r3, r0
 8001b32:	4329      	orrs	r1, r5
 8001b34:	428a      	cmp	r2, r1
 8001b36:	d907      	bls.n	8001b48 <__aeabi_ddiv+0x3d8>
 8001b38:	1989      	adds	r1, r1, r6
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	428e      	cmp	r6, r1
 8001b3e:	d803      	bhi.n	8001b48 <__aeabi_ddiv+0x3d8>
 8001b40:	428a      	cmp	r2, r1
 8001b42:	d901      	bls.n	8001b48 <__aeabi_ddiv+0x3d8>
 8001b44:	1e83      	subs	r3, r0, #2
 8001b46:	1989      	adds	r1, r1, r6
 8001b48:	043f      	lsls	r7, r7, #16
 8001b4a:	1a89      	subs	r1, r1, r2
 8001b4c:	003a      	movs	r2, r7
 8001b4e:	9f03      	ldr	r7, [sp, #12]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	0038      	movs	r0, r7
 8001b54:	0413      	lsls	r3, r2, #16
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	4358      	muls	r0, r3
 8001b5a:	4681      	mov	r9, r0
 8001b5c:	9802      	ldr	r0, [sp, #8]
 8001b5e:	0c15      	lsrs	r5, r2, #16
 8001b60:	436f      	muls	r7, r5
 8001b62:	4343      	muls	r3, r0
 8001b64:	4345      	muls	r5, r0
 8001b66:	4648      	mov	r0, r9
 8001b68:	0c00      	lsrs	r0, r0, #16
 8001b6a:	4684      	mov	ip, r0
 8001b6c:	19db      	adds	r3, r3, r7
 8001b6e:	4463      	add	r3, ip
 8001b70:	429f      	cmp	r7, r3
 8001b72:	d903      	bls.n	8001b7c <__aeabi_ddiv+0x40c>
 8001b74:	2080      	movs	r0, #128	; 0x80
 8001b76:	0240      	lsls	r0, r0, #9
 8001b78:	4684      	mov	ip, r0
 8001b7a:	4465      	add	r5, ip
 8001b7c:	4648      	mov	r0, r9
 8001b7e:	0c1f      	lsrs	r7, r3, #16
 8001b80:	0400      	lsls	r0, r0, #16
 8001b82:	041b      	lsls	r3, r3, #16
 8001b84:	0c00      	lsrs	r0, r0, #16
 8001b86:	197d      	adds	r5, r7, r5
 8001b88:	1818      	adds	r0, r3, r0
 8001b8a:	42a9      	cmp	r1, r5
 8001b8c:	d200      	bcs.n	8001b90 <__aeabi_ddiv+0x420>
 8001b8e:	e084      	b.n	8001c9a <__aeabi_ddiv+0x52a>
 8001b90:	d100      	bne.n	8001b94 <__aeabi_ddiv+0x424>
 8001b92:	e07f      	b.n	8001c94 <__aeabi_ddiv+0x524>
 8001b94:	2301      	movs	r3, #1
 8001b96:	431a      	orrs	r2, r3
 8001b98:	e657      	b.n	800184a <__aeabi_ddiv+0xda>
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	464a      	mov	r2, r9
 8001b9e:	031b      	lsls	r3, r3, #12
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	031b      	lsls	r3, r3, #12
 8001ba4:	0b1b      	lsrs	r3, r3, #12
 8001ba6:	46aa      	mov	sl, r5
 8001ba8:	4a6f      	ldr	r2, [pc, #444]	; (8001d68 <__aeabi_ddiv+0x5f8>)
 8001baa:	e66f      	b.n	800188c <__aeabi_ddiv+0x11c>
 8001bac:	42ba      	cmp	r2, r7
 8001bae:	d900      	bls.n	8001bb2 <__aeabi_ddiv+0x442>
 8001bb0:	e735      	b.n	8001a1e <__aeabi_ddiv+0x2ae>
 8001bb2:	464b      	mov	r3, r9
 8001bb4:	07dc      	lsls	r4, r3, #31
 8001bb6:	0858      	lsrs	r0, r3, #1
 8001bb8:	087b      	lsrs	r3, r7, #1
 8001bba:	431c      	orrs	r4, r3
 8001bbc:	07ff      	lsls	r7, r7, #31
 8001bbe:	e734      	b.n	8001a2a <__aeabi_ddiv+0x2ba>
 8001bc0:	2400      	movs	r4, #0
 8001bc2:	42af      	cmp	r7, r5
 8001bc4:	d289      	bcs.n	8001ada <__aeabi_ddiv+0x36a>
 8001bc6:	4447      	add	r7, r8
 8001bc8:	4547      	cmp	r7, r8
 8001bca:	41a4      	sbcs	r4, r4
 8001bcc:	465b      	mov	r3, fp
 8001bce:	4264      	negs	r4, r4
 8001bd0:	19a4      	adds	r4, r4, r6
 8001bd2:	1864      	adds	r4, r4, r1
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	42a6      	cmp	r6, r4
 8001bd8:	d21e      	bcs.n	8001c18 <__aeabi_ddiv+0x4a8>
 8001bda:	42a0      	cmp	r0, r4
 8001bdc:	d86d      	bhi.n	8001cba <__aeabi_ddiv+0x54a>
 8001bde:	d100      	bne.n	8001be2 <__aeabi_ddiv+0x472>
 8001be0:	e0b6      	b.n	8001d50 <__aeabi_ddiv+0x5e0>
 8001be2:	1a24      	subs	r4, r4, r0
 8001be4:	469b      	mov	fp, r3
 8001be6:	e778      	b.n	8001ada <__aeabi_ddiv+0x36a>
 8001be8:	0003      	movs	r3, r0
 8001bea:	465a      	mov	r2, fp
 8001bec:	3b28      	subs	r3, #40	; 0x28
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	2700      	movs	r7, #0
 8001bf2:	4691      	mov	r9, r2
 8001bf4:	e688      	b.n	8001908 <__aeabi_ddiv+0x198>
 8001bf6:	4658      	mov	r0, fp
 8001bf8:	f001 f8e4 	bl	8002dc4 <__clzsi2>
 8001bfc:	3020      	adds	r0, #32
 8001bfe:	e672      	b.n	80018e6 <__aeabi_ddiv+0x176>
 8001c00:	0003      	movs	r3, r0
 8001c02:	4652      	mov	r2, sl
 8001c04:	3b28      	subs	r3, #40	; 0x28
 8001c06:	409a      	lsls	r2, r3
 8001c08:	4693      	mov	fp, r2
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	e6b4      	b.n	8001978 <__aeabi_ddiv+0x208>
 8001c0e:	4650      	mov	r0, sl
 8001c10:	f001 f8d8 	bl	8002dc4 <__clzsi2>
 8001c14:	3020      	adds	r0, #32
 8001c16:	e69a      	b.n	800194e <__aeabi_ddiv+0x1de>
 8001c18:	42a6      	cmp	r6, r4
 8001c1a:	d1e2      	bne.n	8001be2 <__aeabi_ddiv+0x472>
 8001c1c:	45b8      	cmp	r8, r7
 8001c1e:	d9dc      	bls.n	8001bda <__aeabi_ddiv+0x46a>
 8001c20:	1a34      	subs	r4, r6, r0
 8001c22:	469b      	mov	fp, r3
 8001c24:	e759      	b.n	8001ada <__aeabi_ddiv+0x36a>
 8001c26:	2b1f      	cmp	r3, #31
 8001c28:	dc65      	bgt.n	8001cf6 <__aeabi_ddiv+0x586>
 8001c2a:	4c50      	ldr	r4, [pc, #320]	; (8001d6c <__aeabi_ddiv+0x5fc>)
 8001c2c:	9900      	ldr	r1, [sp, #0]
 8001c2e:	46a4      	mov	ip, r4
 8001c30:	465c      	mov	r4, fp
 8001c32:	4461      	add	r1, ip
 8001c34:	0008      	movs	r0, r1
 8001c36:	408c      	lsls	r4, r1
 8001c38:	0011      	movs	r1, r2
 8001c3a:	4082      	lsls	r2, r0
 8001c3c:	40d9      	lsrs	r1, r3
 8001c3e:	1e50      	subs	r0, r2, #1
 8001c40:	4182      	sbcs	r2, r0
 8001c42:	430c      	orrs	r4, r1
 8001c44:	4314      	orrs	r4, r2
 8001c46:	465a      	mov	r2, fp
 8001c48:	40da      	lsrs	r2, r3
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	0762      	lsls	r2, r4, #29
 8001c4e:	d009      	beq.n	8001c64 <__aeabi_ddiv+0x4f4>
 8001c50:	220f      	movs	r2, #15
 8001c52:	4022      	ands	r2, r4
 8001c54:	2a04      	cmp	r2, #4
 8001c56:	d005      	beq.n	8001c64 <__aeabi_ddiv+0x4f4>
 8001c58:	0022      	movs	r2, r4
 8001c5a:	1d14      	adds	r4, r2, #4
 8001c5c:	4294      	cmp	r4, r2
 8001c5e:	4189      	sbcs	r1, r1
 8001c60:	4249      	negs	r1, r1
 8001c62:	185b      	adds	r3, r3, r1
 8001c64:	021a      	lsls	r2, r3, #8
 8001c66:	d562      	bpl.n	8001d2e <__aeabi_ddiv+0x5be>
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2700      	movs	r7, #0
 8001c6e:	e60d      	b.n	800188c <__aeabi_ddiv+0x11c>
 8001c70:	428a      	cmp	r2, r1
 8001c72:	d800      	bhi.n	8001c76 <__aeabi_ddiv+0x506>
 8001c74:	e70a      	b.n	8001a8c <__aeabi_ddiv+0x31c>
 8001c76:	1e83      	subs	r3, r0, #2
 8001c78:	1989      	adds	r1, r1, r6
 8001c7a:	e707      	b.n	8001a8c <__aeabi_ddiv+0x31c>
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d100      	bne.n	8001c86 <__aeabi_ddiv+0x516>
 8001c84:	e5e6      	b.n	8001854 <__aeabi_ddiv+0xe4>
 8001c86:	1d17      	adds	r7, r2, #4
 8001c88:	4297      	cmp	r7, r2
 8001c8a:	4192      	sbcs	r2, r2
 8001c8c:	4253      	negs	r3, r2
 8001c8e:	449b      	add	fp, r3
 8001c90:	08fa      	lsrs	r2, r7, #3
 8001c92:	e5e0      	b.n	8001856 <__aeabi_ddiv+0xe6>
 8001c94:	2800      	cmp	r0, #0
 8001c96:	d100      	bne.n	8001c9a <__aeabi_ddiv+0x52a>
 8001c98:	e5d7      	b.n	800184a <__aeabi_ddiv+0xda>
 8001c9a:	1871      	adds	r1, r6, r1
 8001c9c:	1e53      	subs	r3, r2, #1
 8001c9e:	42b1      	cmp	r1, r6
 8001ca0:	d327      	bcc.n	8001cf2 <__aeabi_ddiv+0x582>
 8001ca2:	42a9      	cmp	r1, r5
 8001ca4:	d315      	bcc.n	8001cd2 <__aeabi_ddiv+0x562>
 8001ca6:	d058      	beq.n	8001d5a <__aeabi_ddiv+0x5ea>
 8001ca8:	001a      	movs	r2, r3
 8001caa:	e773      	b.n	8001b94 <__aeabi_ddiv+0x424>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	dc00      	bgt.n	8001cb2 <__aeabi_ddiv+0x542>
 8001cb0:	e604      	b.n	80018bc <__aeabi_ddiv+0x14c>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	449b      	add	fp, r3
 8001cb8:	e5cd      	b.n	8001856 <__aeabi_ddiv+0xe6>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	4447      	add	r7, r8
 8001cbe:	4547      	cmp	r7, r8
 8001cc0:	4189      	sbcs	r1, r1
 8001cc2:	425b      	negs	r3, r3
 8001cc4:	469c      	mov	ip, r3
 8001cc6:	4249      	negs	r1, r1
 8001cc8:	1989      	adds	r1, r1, r6
 8001cca:	190c      	adds	r4, r1, r4
 8001ccc:	44e3      	add	fp, ip
 8001cce:	1a24      	subs	r4, r4, r0
 8001cd0:	e703      	b.n	8001ada <__aeabi_ddiv+0x36a>
 8001cd2:	4643      	mov	r3, r8
 8001cd4:	005f      	lsls	r7, r3, #1
 8001cd6:	4547      	cmp	r7, r8
 8001cd8:	419b      	sbcs	r3, r3
 8001cda:	46b8      	mov	r8, r7
 8001cdc:	425b      	negs	r3, r3
 8001cde:	199e      	adds	r6, r3, r6
 8001ce0:	3a02      	subs	r2, #2
 8001ce2:	1989      	adds	r1, r1, r6
 8001ce4:	42a9      	cmp	r1, r5
 8001ce6:	d000      	beq.n	8001cea <__aeabi_ddiv+0x57a>
 8001ce8:	e754      	b.n	8001b94 <__aeabi_ddiv+0x424>
 8001cea:	4540      	cmp	r0, r8
 8001cec:	d000      	beq.n	8001cf0 <__aeabi_ddiv+0x580>
 8001cee:	e751      	b.n	8001b94 <__aeabi_ddiv+0x424>
 8001cf0:	e5ab      	b.n	800184a <__aeabi_ddiv+0xda>
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	e7f6      	b.n	8001ce4 <__aeabi_ddiv+0x574>
 8001cf6:	211f      	movs	r1, #31
 8001cf8:	465f      	mov	r7, fp
 8001cfa:	4249      	negs	r1, r1
 8001cfc:	1b0c      	subs	r4, r1, r4
 8001cfe:	40e7      	lsrs	r7, r4
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d007      	beq.n	8001d14 <__aeabi_ddiv+0x5a4>
 8001d04:	491a      	ldr	r1, [pc, #104]	; (8001d70 <__aeabi_ddiv+0x600>)
 8001d06:	9b00      	ldr	r3, [sp, #0]
 8001d08:	468c      	mov	ip, r1
 8001d0a:	4463      	add	r3, ip
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	465b      	mov	r3, fp
 8001d10:	4083      	lsls	r3, r0
 8001d12:	431a      	orrs	r2, r3
 8001d14:	1e50      	subs	r0, r2, #1
 8001d16:	4182      	sbcs	r2, r0
 8001d18:	433a      	orrs	r2, r7
 8001d1a:	2707      	movs	r7, #7
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	4017      	ands	r7, r2
 8001d20:	d009      	beq.n	8001d36 <__aeabi_ddiv+0x5c6>
 8001d22:	210f      	movs	r1, #15
 8001d24:	2300      	movs	r3, #0
 8001d26:	4011      	ands	r1, r2
 8001d28:	0014      	movs	r4, r2
 8001d2a:	2904      	cmp	r1, #4
 8001d2c:	d195      	bne.n	8001c5a <__aeabi_ddiv+0x4ea>
 8001d2e:	0022      	movs	r2, r4
 8001d30:	075f      	lsls	r7, r3, #29
 8001d32:	025b      	lsls	r3, r3, #9
 8001d34:	0b1b      	lsrs	r3, r3, #12
 8001d36:	08d2      	lsrs	r2, r2, #3
 8001d38:	4317      	orrs	r7, r2
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	e5a6      	b.n	800188c <__aeabi_ddiv+0x11c>
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	4659      	mov	r1, fp
 8001d42:	031b      	lsls	r3, r3, #12
 8001d44:	430b      	orrs	r3, r1
 8001d46:	031b      	lsls	r3, r3, #12
 8001d48:	0017      	movs	r7, r2
 8001d4a:	0b1b      	lsrs	r3, r3, #12
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <__aeabi_ddiv+0x5f8>)
 8001d4e:	e59d      	b.n	800188c <__aeabi_ddiv+0x11c>
 8001d50:	42bd      	cmp	r5, r7
 8001d52:	d8b2      	bhi.n	8001cba <__aeabi_ddiv+0x54a>
 8001d54:	469b      	mov	fp, r3
 8001d56:	2400      	movs	r4, #0
 8001d58:	e6bf      	b.n	8001ada <__aeabi_ddiv+0x36a>
 8001d5a:	4580      	cmp	r8, r0
 8001d5c:	d3b9      	bcc.n	8001cd2 <__aeabi_ddiv+0x562>
 8001d5e:	001a      	movs	r2, r3
 8001d60:	e7c3      	b.n	8001cea <__aeabi_ddiv+0x57a>
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	000003ff 	.word	0x000003ff
 8001d68:	000007ff 	.word	0x000007ff
 8001d6c:	0000041e 	.word	0x0000041e
 8001d70:	0000043e 	.word	0x0000043e

08001d74 <__eqdf2>:
 8001d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d76:	464f      	mov	r7, r9
 8001d78:	4646      	mov	r6, r8
 8001d7a:	46d6      	mov	lr, sl
 8001d7c:	4684      	mov	ip, r0
 8001d7e:	b5c0      	push	{r6, r7, lr}
 8001d80:	4680      	mov	r8, r0
 8001d82:	4e19      	ldr	r6, [pc, #100]	; (8001de8 <__eqdf2+0x74>)
 8001d84:	0318      	lsls	r0, r3, #12
 8001d86:	030f      	lsls	r7, r1, #12
 8001d88:	004d      	lsls	r5, r1, #1
 8001d8a:	0b00      	lsrs	r0, r0, #12
 8001d8c:	005c      	lsls	r4, r3, #1
 8001d8e:	4682      	mov	sl, r0
 8001d90:	0b3f      	lsrs	r7, r7, #12
 8001d92:	0d6d      	lsrs	r5, r5, #21
 8001d94:	0fc9      	lsrs	r1, r1, #31
 8001d96:	4691      	mov	r9, r2
 8001d98:	0d64      	lsrs	r4, r4, #21
 8001d9a:	0fdb      	lsrs	r3, r3, #31
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	42b5      	cmp	r5, r6
 8001da0:	d00a      	beq.n	8001db8 <__eqdf2+0x44>
 8001da2:	42b4      	cmp	r4, r6
 8001da4:	d003      	beq.n	8001dae <__eqdf2+0x3a>
 8001da6:	42a5      	cmp	r5, r4
 8001da8:	d101      	bne.n	8001dae <__eqdf2+0x3a>
 8001daa:	4557      	cmp	r7, sl
 8001dac:	d00c      	beq.n	8001dc8 <__eqdf2+0x54>
 8001dae:	bc1c      	pop	{r2, r3, r4}
 8001db0:	4690      	mov	r8, r2
 8001db2:	4699      	mov	r9, r3
 8001db4:	46a2      	mov	sl, r4
 8001db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db8:	4666      	mov	r6, ip
 8001dba:	433e      	orrs	r6, r7
 8001dbc:	d1f7      	bne.n	8001dae <__eqdf2+0x3a>
 8001dbe:	42ac      	cmp	r4, r5
 8001dc0:	d1f5      	bne.n	8001dae <__eqdf2+0x3a>
 8001dc2:	4654      	mov	r4, sl
 8001dc4:	4314      	orrs	r4, r2
 8001dc6:	d1f2      	bne.n	8001dae <__eqdf2+0x3a>
 8001dc8:	2001      	movs	r0, #1
 8001dca:	45c8      	cmp	r8, r9
 8001dcc:	d1ef      	bne.n	8001dae <__eqdf2+0x3a>
 8001dce:	4299      	cmp	r1, r3
 8001dd0:	d007      	beq.n	8001de2 <__eqdf2+0x6e>
 8001dd2:	2d00      	cmp	r5, #0
 8001dd4:	d1eb      	bne.n	8001dae <__eqdf2+0x3a>
 8001dd6:	4663      	mov	r3, ip
 8001dd8:	431f      	orrs	r7, r3
 8001dda:	0038      	movs	r0, r7
 8001ddc:	1e47      	subs	r7, r0, #1
 8001dde:	41b8      	sbcs	r0, r7
 8001de0:	e7e5      	b.n	8001dae <__eqdf2+0x3a>
 8001de2:	2000      	movs	r0, #0
 8001de4:	e7e3      	b.n	8001dae <__eqdf2+0x3a>
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	000007ff 	.word	0x000007ff

08001dec <__gedf2>:
 8001dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dee:	464f      	mov	r7, r9
 8001df0:	4646      	mov	r6, r8
 8001df2:	46d6      	mov	lr, sl
 8001df4:	004d      	lsls	r5, r1, #1
 8001df6:	b5c0      	push	{r6, r7, lr}
 8001df8:	030e      	lsls	r6, r1, #12
 8001dfa:	0fc9      	lsrs	r1, r1, #31
 8001dfc:	468a      	mov	sl, r1
 8001dfe:	492c      	ldr	r1, [pc, #176]	; (8001eb0 <__gedf2+0xc4>)
 8001e00:	031f      	lsls	r7, r3, #12
 8001e02:	005c      	lsls	r4, r3, #1
 8001e04:	4680      	mov	r8, r0
 8001e06:	0b36      	lsrs	r6, r6, #12
 8001e08:	0d6d      	lsrs	r5, r5, #21
 8001e0a:	4691      	mov	r9, r2
 8001e0c:	0b3f      	lsrs	r7, r7, #12
 8001e0e:	0d64      	lsrs	r4, r4, #21
 8001e10:	0fdb      	lsrs	r3, r3, #31
 8001e12:	428d      	cmp	r5, r1
 8001e14:	d01e      	beq.n	8001e54 <__gedf2+0x68>
 8001e16:	428c      	cmp	r4, r1
 8001e18:	d016      	beq.n	8001e48 <__gedf2+0x5c>
 8001e1a:	2d00      	cmp	r5, #0
 8001e1c:	d11e      	bne.n	8001e5c <__gedf2+0x70>
 8001e1e:	4330      	orrs	r0, r6
 8001e20:	4684      	mov	ip, r0
 8001e22:	2c00      	cmp	r4, #0
 8001e24:	d101      	bne.n	8001e2a <__gedf2+0x3e>
 8001e26:	433a      	orrs	r2, r7
 8001e28:	d023      	beq.n	8001e72 <__gedf2+0x86>
 8001e2a:	4662      	mov	r2, ip
 8001e2c:	2a00      	cmp	r2, #0
 8001e2e:	d01a      	beq.n	8001e66 <__gedf2+0x7a>
 8001e30:	459a      	cmp	sl, r3
 8001e32:	d029      	beq.n	8001e88 <__gedf2+0x9c>
 8001e34:	4651      	mov	r1, sl
 8001e36:	2002      	movs	r0, #2
 8001e38:	3901      	subs	r1, #1
 8001e3a:	4008      	ands	r0, r1
 8001e3c:	3801      	subs	r0, #1
 8001e3e:	bc1c      	pop	{r2, r3, r4}
 8001e40:	4690      	mov	r8, r2
 8001e42:	4699      	mov	r9, r3
 8001e44:	46a2      	mov	sl, r4
 8001e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e48:	0039      	movs	r1, r7
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	d0e5      	beq.n	8001e1a <__gedf2+0x2e>
 8001e4e:	2002      	movs	r0, #2
 8001e50:	4240      	negs	r0, r0
 8001e52:	e7f4      	b.n	8001e3e <__gedf2+0x52>
 8001e54:	4330      	orrs	r0, r6
 8001e56:	d1fa      	bne.n	8001e4e <__gedf2+0x62>
 8001e58:	42ac      	cmp	r4, r5
 8001e5a:	d00f      	beq.n	8001e7c <__gedf2+0x90>
 8001e5c:	2c00      	cmp	r4, #0
 8001e5e:	d10f      	bne.n	8001e80 <__gedf2+0x94>
 8001e60:	433a      	orrs	r2, r7
 8001e62:	d0e7      	beq.n	8001e34 <__gedf2+0x48>
 8001e64:	e00c      	b.n	8001e80 <__gedf2+0x94>
 8001e66:	2201      	movs	r2, #1
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4393      	bics	r3, r2
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	3001      	adds	r0, #1
 8001e70:	e7e5      	b.n	8001e3e <__gedf2+0x52>
 8001e72:	4663      	mov	r3, ip
 8001e74:	2000      	movs	r0, #0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0e1      	beq.n	8001e3e <__gedf2+0x52>
 8001e7a:	e7db      	b.n	8001e34 <__gedf2+0x48>
 8001e7c:	433a      	orrs	r2, r7
 8001e7e:	d1e6      	bne.n	8001e4e <__gedf2+0x62>
 8001e80:	459a      	cmp	sl, r3
 8001e82:	d1d7      	bne.n	8001e34 <__gedf2+0x48>
 8001e84:	42a5      	cmp	r5, r4
 8001e86:	dcd5      	bgt.n	8001e34 <__gedf2+0x48>
 8001e88:	42a5      	cmp	r5, r4
 8001e8a:	db05      	blt.n	8001e98 <__gedf2+0xac>
 8001e8c:	42be      	cmp	r6, r7
 8001e8e:	d8d1      	bhi.n	8001e34 <__gedf2+0x48>
 8001e90:	d008      	beq.n	8001ea4 <__gedf2+0xb8>
 8001e92:	2000      	movs	r0, #0
 8001e94:	42be      	cmp	r6, r7
 8001e96:	d2d2      	bcs.n	8001e3e <__gedf2+0x52>
 8001e98:	4650      	mov	r0, sl
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	3801      	subs	r0, #1
 8001e9e:	4398      	bics	r0, r3
 8001ea0:	3001      	adds	r0, #1
 8001ea2:	e7cc      	b.n	8001e3e <__gedf2+0x52>
 8001ea4:	45c8      	cmp	r8, r9
 8001ea6:	d8c5      	bhi.n	8001e34 <__gedf2+0x48>
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	45c8      	cmp	r8, r9
 8001eac:	d3f4      	bcc.n	8001e98 <__gedf2+0xac>
 8001eae:	e7c6      	b.n	8001e3e <__gedf2+0x52>
 8001eb0:	000007ff 	.word	0x000007ff

08001eb4 <__ledf2>:
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb6:	464f      	mov	r7, r9
 8001eb8:	4646      	mov	r6, r8
 8001eba:	46d6      	mov	lr, sl
 8001ebc:	004d      	lsls	r5, r1, #1
 8001ebe:	b5c0      	push	{r6, r7, lr}
 8001ec0:	030e      	lsls	r6, r1, #12
 8001ec2:	0fc9      	lsrs	r1, r1, #31
 8001ec4:	468a      	mov	sl, r1
 8001ec6:	492e      	ldr	r1, [pc, #184]	; (8001f80 <__ledf2+0xcc>)
 8001ec8:	031f      	lsls	r7, r3, #12
 8001eca:	005c      	lsls	r4, r3, #1
 8001ecc:	4680      	mov	r8, r0
 8001ece:	0b36      	lsrs	r6, r6, #12
 8001ed0:	0d6d      	lsrs	r5, r5, #21
 8001ed2:	4691      	mov	r9, r2
 8001ed4:	0b3f      	lsrs	r7, r7, #12
 8001ed6:	0d64      	lsrs	r4, r4, #21
 8001ed8:	0fdb      	lsrs	r3, r3, #31
 8001eda:	428d      	cmp	r5, r1
 8001edc:	d018      	beq.n	8001f10 <__ledf2+0x5c>
 8001ede:	428c      	cmp	r4, r1
 8001ee0:	d011      	beq.n	8001f06 <__ledf2+0x52>
 8001ee2:	2d00      	cmp	r5, #0
 8001ee4:	d118      	bne.n	8001f18 <__ledf2+0x64>
 8001ee6:	4330      	orrs	r0, r6
 8001ee8:	4684      	mov	ip, r0
 8001eea:	2c00      	cmp	r4, #0
 8001eec:	d11e      	bne.n	8001f2c <__ledf2+0x78>
 8001eee:	433a      	orrs	r2, r7
 8001ef0:	d11c      	bne.n	8001f2c <__ledf2+0x78>
 8001ef2:	4663      	mov	r3, ip
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d030      	beq.n	8001f5c <__ledf2+0xa8>
 8001efa:	4651      	mov	r1, sl
 8001efc:	2002      	movs	r0, #2
 8001efe:	3901      	subs	r1, #1
 8001f00:	4008      	ands	r0, r1
 8001f02:	3801      	subs	r0, #1
 8001f04:	e02a      	b.n	8001f5c <__ledf2+0xa8>
 8001f06:	0039      	movs	r1, r7
 8001f08:	4311      	orrs	r1, r2
 8001f0a:	d0ea      	beq.n	8001ee2 <__ledf2+0x2e>
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	e025      	b.n	8001f5c <__ledf2+0xa8>
 8001f10:	4330      	orrs	r0, r6
 8001f12:	d1fb      	bne.n	8001f0c <__ledf2+0x58>
 8001f14:	42ac      	cmp	r4, r5
 8001f16:	d026      	beq.n	8001f66 <__ledf2+0xb2>
 8001f18:	2c00      	cmp	r4, #0
 8001f1a:	d126      	bne.n	8001f6a <__ledf2+0xb6>
 8001f1c:	433a      	orrs	r2, r7
 8001f1e:	d124      	bne.n	8001f6a <__ledf2+0xb6>
 8001f20:	4651      	mov	r1, sl
 8001f22:	2002      	movs	r0, #2
 8001f24:	3901      	subs	r1, #1
 8001f26:	4008      	ands	r0, r1
 8001f28:	3801      	subs	r0, #1
 8001f2a:	e017      	b.n	8001f5c <__ledf2+0xa8>
 8001f2c:	4662      	mov	r2, ip
 8001f2e:	2a00      	cmp	r2, #0
 8001f30:	d00f      	beq.n	8001f52 <__ledf2+0x9e>
 8001f32:	459a      	cmp	sl, r3
 8001f34:	d1e1      	bne.n	8001efa <__ledf2+0x46>
 8001f36:	42a5      	cmp	r5, r4
 8001f38:	db05      	blt.n	8001f46 <__ledf2+0x92>
 8001f3a:	42be      	cmp	r6, r7
 8001f3c:	d8dd      	bhi.n	8001efa <__ledf2+0x46>
 8001f3e:	d019      	beq.n	8001f74 <__ledf2+0xc0>
 8001f40:	2000      	movs	r0, #0
 8001f42:	42be      	cmp	r6, r7
 8001f44:	d20a      	bcs.n	8001f5c <__ledf2+0xa8>
 8001f46:	4650      	mov	r0, sl
 8001f48:	2301      	movs	r3, #1
 8001f4a:	3801      	subs	r0, #1
 8001f4c:	4398      	bics	r0, r3
 8001f4e:	3001      	adds	r0, #1
 8001f50:	e004      	b.n	8001f5c <__ledf2+0xa8>
 8001f52:	2201      	movs	r2, #1
 8001f54:	3b01      	subs	r3, #1
 8001f56:	4393      	bics	r3, r2
 8001f58:	0018      	movs	r0, r3
 8001f5a:	3001      	adds	r0, #1
 8001f5c:	bc1c      	pop	{r2, r3, r4}
 8001f5e:	4690      	mov	r8, r2
 8001f60:	4699      	mov	r9, r3
 8001f62:	46a2      	mov	sl, r4
 8001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f66:	433a      	orrs	r2, r7
 8001f68:	d1d0      	bne.n	8001f0c <__ledf2+0x58>
 8001f6a:	459a      	cmp	sl, r3
 8001f6c:	d1c5      	bne.n	8001efa <__ledf2+0x46>
 8001f6e:	42a5      	cmp	r5, r4
 8001f70:	dcc3      	bgt.n	8001efa <__ledf2+0x46>
 8001f72:	e7e0      	b.n	8001f36 <__ledf2+0x82>
 8001f74:	45c8      	cmp	r8, r9
 8001f76:	d8c0      	bhi.n	8001efa <__ledf2+0x46>
 8001f78:	2000      	movs	r0, #0
 8001f7a:	45c8      	cmp	r8, r9
 8001f7c:	d3e3      	bcc.n	8001f46 <__ledf2+0x92>
 8001f7e:	e7ed      	b.n	8001f5c <__ledf2+0xa8>
 8001f80:	000007ff 	.word	0x000007ff

08001f84 <__aeabi_dmul>:
 8001f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f86:	4657      	mov	r7, sl
 8001f88:	46de      	mov	lr, fp
 8001f8a:	464e      	mov	r6, r9
 8001f8c:	4645      	mov	r5, r8
 8001f8e:	b5e0      	push	{r5, r6, r7, lr}
 8001f90:	4683      	mov	fp, r0
 8001f92:	0006      	movs	r6, r0
 8001f94:	030f      	lsls	r7, r1, #12
 8001f96:	0048      	lsls	r0, r1, #1
 8001f98:	b087      	sub	sp, #28
 8001f9a:	4692      	mov	sl, r2
 8001f9c:	001d      	movs	r5, r3
 8001f9e:	0b3f      	lsrs	r7, r7, #12
 8001fa0:	0d40      	lsrs	r0, r0, #21
 8001fa2:	0fcc      	lsrs	r4, r1, #31
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x26>
 8001fa8:	e06f      	b.n	800208a <__aeabi_dmul+0x106>
 8001faa:	4bde      	ldr	r3, [pc, #888]	; (8002324 <__aeabi_dmul+0x3a0>)
 8001fac:	4298      	cmp	r0, r3
 8001fae:	d038      	beq.n	8002022 <__aeabi_dmul+0x9e>
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	00ff      	lsls	r7, r7, #3
 8001fb4:	041b      	lsls	r3, r3, #16
 8001fb6:	431f      	orrs	r7, r3
 8001fb8:	0f73      	lsrs	r3, r6, #29
 8001fba:	433b      	orrs	r3, r7
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	4bda      	ldr	r3, [pc, #872]	; (8002328 <__aeabi_dmul+0x3a4>)
 8001fc0:	2700      	movs	r7, #0
 8001fc2:	4699      	mov	r9, r3
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	469b      	mov	fp, r3
 8001fc8:	00f6      	lsls	r6, r6, #3
 8001fca:	4481      	add	r9, r0
 8001fcc:	032b      	lsls	r3, r5, #12
 8001fce:	0069      	lsls	r1, r5, #1
 8001fd0:	0b1b      	lsrs	r3, r3, #12
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	4698      	mov	r8, r3
 8001fd6:	0d49      	lsrs	r1, r1, #21
 8001fd8:	0fed      	lsrs	r5, r5, #31
 8001fda:	2900      	cmp	r1, #0
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dmul+0x5c>
 8001fde:	e085      	b.n	80020ec <__aeabi_dmul+0x168>
 8001fe0:	4bd0      	ldr	r3, [pc, #832]	; (8002324 <__aeabi_dmul+0x3a0>)
 8001fe2:	4299      	cmp	r1, r3
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dmul+0x64>
 8001fe6:	e073      	b.n	80020d0 <__aeabi_dmul+0x14c>
 8001fe8:	4643      	mov	r3, r8
 8001fea:	00da      	lsls	r2, r3, #3
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	041b      	lsls	r3, r3, #16
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	4652      	mov	r2, sl
 8001ff4:	48cc      	ldr	r0, [pc, #816]	; (8002328 <__aeabi_dmul+0x3a4>)
 8001ff6:	0f52      	lsrs	r2, r2, #29
 8001ff8:	4684      	mov	ip, r0
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	4652      	mov	r2, sl
 8001ffe:	2000      	movs	r0, #0
 8002000:	4461      	add	r1, ip
 8002002:	00d2      	lsls	r2, r2, #3
 8002004:	4489      	add	r9, r1
 8002006:	0021      	movs	r1, r4
 8002008:	4069      	eors	r1, r5
 800200a:	9100      	str	r1, [sp, #0]
 800200c:	468c      	mov	ip, r1
 800200e:	2101      	movs	r1, #1
 8002010:	4449      	add	r1, r9
 8002012:	468a      	mov	sl, r1
 8002014:	2f0f      	cmp	r7, #15
 8002016:	d900      	bls.n	800201a <__aeabi_dmul+0x96>
 8002018:	e090      	b.n	800213c <__aeabi_dmul+0x1b8>
 800201a:	49c4      	ldr	r1, [pc, #784]	; (800232c <__aeabi_dmul+0x3a8>)
 800201c:	00bf      	lsls	r7, r7, #2
 800201e:	59cf      	ldr	r7, [r1, r7]
 8002020:	46bf      	mov	pc, r7
 8002022:	465b      	mov	r3, fp
 8002024:	433b      	orrs	r3, r7
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	d000      	beq.n	800202c <__aeabi_dmul+0xa8>
 800202a:	e16a      	b.n	8002302 <__aeabi_dmul+0x37e>
 800202c:	2302      	movs	r3, #2
 800202e:	2708      	movs	r7, #8
 8002030:	2600      	movs	r6, #0
 8002032:	4681      	mov	r9, r0
 8002034:	469b      	mov	fp, r3
 8002036:	e7c9      	b.n	8001fcc <__aeabi_dmul+0x48>
 8002038:	0032      	movs	r2, r6
 800203a:	4658      	mov	r0, fp
 800203c:	9b01      	ldr	r3, [sp, #4]
 800203e:	4661      	mov	r1, ip
 8002040:	9100      	str	r1, [sp, #0]
 8002042:	2802      	cmp	r0, #2
 8002044:	d100      	bne.n	8002048 <__aeabi_dmul+0xc4>
 8002046:	e075      	b.n	8002134 <__aeabi_dmul+0x1b0>
 8002048:	2803      	cmp	r0, #3
 800204a:	d100      	bne.n	800204e <__aeabi_dmul+0xca>
 800204c:	e1fe      	b.n	800244c <__aeabi_dmul+0x4c8>
 800204e:	2801      	cmp	r0, #1
 8002050:	d000      	beq.n	8002054 <__aeabi_dmul+0xd0>
 8002052:	e12c      	b.n	80022ae <__aeabi_dmul+0x32a>
 8002054:	2300      	movs	r3, #0
 8002056:	2700      	movs	r7, #0
 8002058:	2600      	movs	r6, #0
 800205a:	2500      	movs	r5, #0
 800205c:	033f      	lsls	r7, r7, #12
 800205e:	0d2a      	lsrs	r2, r5, #20
 8002060:	0b3f      	lsrs	r7, r7, #12
 8002062:	48b3      	ldr	r0, [pc, #716]	; (8002330 <__aeabi_dmul+0x3ac>)
 8002064:	0512      	lsls	r2, r2, #20
 8002066:	433a      	orrs	r2, r7
 8002068:	4002      	ands	r2, r0
 800206a:	051b      	lsls	r3, r3, #20
 800206c:	4313      	orrs	r3, r2
 800206e:	9a00      	ldr	r2, [sp, #0]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	07d1      	lsls	r1, r2, #31
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	430b      	orrs	r3, r1
 8002078:	0030      	movs	r0, r6
 800207a:	0019      	movs	r1, r3
 800207c:	b007      	add	sp, #28
 800207e:	bc3c      	pop	{r2, r3, r4, r5}
 8002080:	4690      	mov	r8, r2
 8002082:	4699      	mov	r9, r3
 8002084:	46a2      	mov	sl, r4
 8002086:	46ab      	mov	fp, r5
 8002088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800208a:	465b      	mov	r3, fp
 800208c:	433b      	orrs	r3, r7
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	d100      	bne.n	8002094 <__aeabi_dmul+0x110>
 8002092:	e12f      	b.n	80022f4 <__aeabi_dmul+0x370>
 8002094:	2f00      	cmp	r7, #0
 8002096:	d100      	bne.n	800209a <__aeabi_dmul+0x116>
 8002098:	e1a5      	b.n	80023e6 <__aeabi_dmul+0x462>
 800209a:	0038      	movs	r0, r7
 800209c:	f000 fe92 	bl	8002dc4 <__clzsi2>
 80020a0:	0003      	movs	r3, r0
 80020a2:	3b0b      	subs	r3, #11
 80020a4:	2b1c      	cmp	r3, #28
 80020a6:	dd00      	ble.n	80020aa <__aeabi_dmul+0x126>
 80020a8:	e196      	b.n	80023d8 <__aeabi_dmul+0x454>
 80020aa:	221d      	movs	r2, #29
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	465a      	mov	r2, fp
 80020b0:	0001      	movs	r1, r0
 80020b2:	40da      	lsrs	r2, r3
 80020b4:	465e      	mov	r6, fp
 80020b6:	3908      	subs	r1, #8
 80020b8:	408f      	lsls	r7, r1
 80020ba:	0013      	movs	r3, r2
 80020bc:	408e      	lsls	r6, r1
 80020be:	433b      	orrs	r3, r7
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	4b9c      	ldr	r3, [pc, #624]	; (8002334 <__aeabi_dmul+0x3b0>)
 80020c4:	2700      	movs	r7, #0
 80020c6:	1a1b      	subs	r3, r3, r0
 80020c8:	4699      	mov	r9, r3
 80020ca:	2300      	movs	r3, #0
 80020cc:	469b      	mov	fp, r3
 80020ce:	e77d      	b.n	8001fcc <__aeabi_dmul+0x48>
 80020d0:	4641      	mov	r1, r8
 80020d2:	4653      	mov	r3, sl
 80020d4:	430b      	orrs	r3, r1
 80020d6:	4993      	ldr	r1, [pc, #588]	; (8002324 <__aeabi_dmul+0x3a0>)
 80020d8:	468c      	mov	ip, r1
 80020da:	44e1      	add	r9, ip
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d000      	beq.n	80020e2 <__aeabi_dmul+0x15e>
 80020e0:	e11a      	b.n	8002318 <__aeabi_dmul+0x394>
 80020e2:	2202      	movs	r2, #2
 80020e4:	2002      	movs	r0, #2
 80020e6:	4317      	orrs	r7, r2
 80020e8:	2200      	movs	r2, #0
 80020ea:	e78c      	b.n	8002006 <__aeabi_dmul+0x82>
 80020ec:	4313      	orrs	r3, r2
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dmul+0x16e>
 80020f0:	e10d      	b.n	800230e <__aeabi_dmul+0x38a>
 80020f2:	4643      	mov	r3, r8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d100      	bne.n	80020fa <__aeabi_dmul+0x176>
 80020f8:	e181      	b.n	80023fe <__aeabi_dmul+0x47a>
 80020fa:	4640      	mov	r0, r8
 80020fc:	f000 fe62 	bl	8002dc4 <__clzsi2>
 8002100:	0002      	movs	r2, r0
 8002102:	3a0b      	subs	r2, #11
 8002104:	2a1c      	cmp	r2, #28
 8002106:	dd00      	ble.n	800210a <__aeabi_dmul+0x186>
 8002108:	e172      	b.n	80023f0 <__aeabi_dmul+0x46c>
 800210a:	0001      	movs	r1, r0
 800210c:	4643      	mov	r3, r8
 800210e:	3908      	subs	r1, #8
 8002110:	408b      	lsls	r3, r1
 8002112:	4698      	mov	r8, r3
 8002114:	231d      	movs	r3, #29
 8002116:	1a9a      	subs	r2, r3, r2
 8002118:	4653      	mov	r3, sl
 800211a:	40d3      	lsrs	r3, r2
 800211c:	001a      	movs	r2, r3
 800211e:	4643      	mov	r3, r8
 8002120:	4313      	orrs	r3, r2
 8002122:	4652      	mov	r2, sl
 8002124:	408a      	lsls	r2, r1
 8002126:	4649      	mov	r1, r9
 8002128:	1a08      	subs	r0, r1, r0
 800212a:	4982      	ldr	r1, [pc, #520]	; (8002334 <__aeabi_dmul+0x3b0>)
 800212c:	4689      	mov	r9, r1
 800212e:	4481      	add	r9, r0
 8002130:	2000      	movs	r0, #0
 8002132:	e768      	b.n	8002006 <__aeabi_dmul+0x82>
 8002134:	4b7b      	ldr	r3, [pc, #492]	; (8002324 <__aeabi_dmul+0x3a0>)
 8002136:	2700      	movs	r7, #0
 8002138:	2600      	movs	r6, #0
 800213a:	e78e      	b.n	800205a <__aeabi_dmul+0xd6>
 800213c:	0c14      	lsrs	r4, r2, #16
 800213e:	0412      	lsls	r2, r2, #16
 8002140:	0c12      	lsrs	r2, r2, #16
 8002142:	0011      	movs	r1, r2
 8002144:	0c37      	lsrs	r7, r6, #16
 8002146:	0436      	lsls	r6, r6, #16
 8002148:	0c35      	lsrs	r5, r6, #16
 800214a:	4379      	muls	r1, r7
 800214c:	0028      	movs	r0, r5
 800214e:	468c      	mov	ip, r1
 8002150:	002e      	movs	r6, r5
 8002152:	4360      	muls	r0, r4
 8002154:	4460      	add	r0, ip
 8002156:	4683      	mov	fp, r0
 8002158:	4356      	muls	r6, r2
 800215a:	0021      	movs	r1, r4
 800215c:	0c30      	lsrs	r0, r6, #16
 800215e:	4680      	mov	r8, r0
 8002160:	4658      	mov	r0, fp
 8002162:	4379      	muls	r1, r7
 8002164:	4440      	add	r0, r8
 8002166:	9102      	str	r1, [sp, #8]
 8002168:	4584      	cmp	ip, r0
 800216a:	d906      	bls.n	800217a <__aeabi_dmul+0x1f6>
 800216c:	4688      	mov	r8, r1
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	0249      	lsls	r1, r1, #9
 8002172:	468c      	mov	ip, r1
 8002174:	44e0      	add	r8, ip
 8002176:	4641      	mov	r1, r8
 8002178:	9102      	str	r1, [sp, #8]
 800217a:	0436      	lsls	r6, r6, #16
 800217c:	0c01      	lsrs	r1, r0, #16
 800217e:	0c36      	lsrs	r6, r6, #16
 8002180:	0400      	lsls	r0, r0, #16
 8002182:	468b      	mov	fp, r1
 8002184:	1981      	adds	r1, r0, r6
 8002186:	0c1e      	lsrs	r6, r3, #16
 8002188:	041b      	lsls	r3, r3, #16
 800218a:	0c1b      	lsrs	r3, r3, #16
 800218c:	9103      	str	r1, [sp, #12]
 800218e:	0019      	movs	r1, r3
 8002190:	4379      	muls	r1, r7
 8002192:	468c      	mov	ip, r1
 8002194:	0028      	movs	r0, r5
 8002196:	4375      	muls	r5, r6
 8002198:	4465      	add	r5, ip
 800219a:	46a8      	mov	r8, r5
 800219c:	4358      	muls	r0, r3
 800219e:	0c05      	lsrs	r5, r0, #16
 80021a0:	4445      	add	r5, r8
 80021a2:	4377      	muls	r7, r6
 80021a4:	42a9      	cmp	r1, r5
 80021a6:	d903      	bls.n	80021b0 <__aeabi_dmul+0x22c>
 80021a8:	2180      	movs	r1, #128	; 0x80
 80021aa:	0249      	lsls	r1, r1, #9
 80021ac:	468c      	mov	ip, r1
 80021ae:	4467      	add	r7, ip
 80021b0:	0c29      	lsrs	r1, r5, #16
 80021b2:	468c      	mov	ip, r1
 80021b4:	0039      	movs	r1, r7
 80021b6:	0400      	lsls	r0, r0, #16
 80021b8:	0c00      	lsrs	r0, r0, #16
 80021ba:	042d      	lsls	r5, r5, #16
 80021bc:	182d      	adds	r5, r5, r0
 80021be:	4461      	add	r1, ip
 80021c0:	44ab      	add	fp, r5
 80021c2:	9105      	str	r1, [sp, #20]
 80021c4:	4659      	mov	r1, fp
 80021c6:	9104      	str	r1, [sp, #16]
 80021c8:	9901      	ldr	r1, [sp, #4]
 80021ca:	040f      	lsls	r7, r1, #16
 80021cc:	0c3f      	lsrs	r7, r7, #16
 80021ce:	0c08      	lsrs	r0, r1, #16
 80021d0:	0039      	movs	r1, r7
 80021d2:	4351      	muls	r1, r2
 80021d4:	4342      	muls	r2, r0
 80021d6:	4690      	mov	r8, r2
 80021d8:	0002      	movs	r2, r0
 80021da:	468c      	mov	ip, r1
 80021dc:	0c09      	lsrs	r1, r1, #16
 80021de:	468b      	mov	fp, r1
 80021e0:	4362      	muls	r2, r4
 80021e2:	437c      	muls	r4, r7
 80021e4:	4444      	add	r4, r8
 80021e6:	445c      	add	r4, fp
 80021e8:	45a0      	cmp	r8, r4
 80021ea:	d903      	bls.n	80021f4 <__aeabi_dmul+0x270>
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	0249      	lsls	r1, r1, #9
 80021f0:	4688      	mov	r8, r1
 80021f2:	4442      	add	r2, r8
 80021f4:	0c21      	lsrs	r1, r4, #16
 80021f6:	4688      	mov	r8, r1
 80021f8:	4661      	mov	r1, ip
 80021fa:	0409      	lsls	r1, r1, #16
 80021fc:	0c09      	lsrs	r1, r1, #16
 80021fe:	468c      	mov	ip, r1
 8002200:	0039      	movs	r1, r7
 8002202:	4359      	muls	r1, r3
 8002204:	4343      	muls	r3, r0
 8002206:	4370      	muls	r0, r6
 8002208:	437e      	muls	r6, r7
 800220a:	0c0f      	lsrs	r7, r1, #16
 800220c:	18f6      	adds	r6, r6, r3
 800220e:	0424      	lsls	r4, r4, #16
 8002210:	19be      	adds	r6, r7, r6
 8002212:	4464      	add	r4, ip
 8002214:	4442      	add	r2, r8
 8002216:	468c      	mov	ip, r1
 8002218:	42b3      	cmp	r3, r6
 800221a:	d903      	bls.n	8002224 <__aeabi_dmul+0x2a0>
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	025b      	lsls	r3, r3, #9
 8002220:	4698      	mov	r8, r3
 8002222:	4440      	add	r0, r8
 8002224:	9b02      	ldr	r3, [sp, #8]
 8002226:	4661      	mov	r1, ip
 8002228:	4698      	mov	r8, r3
 800222a:	9b04      	ldr	r3, [sp, #16]
 800222c:	0437      	lsls	r7, r6, #16
 800222e:	4443      	add	r3, r8
 8002230:	469b      	mov	fp, r3
 8002232:	45ab      	cmp	fp, r5
 8002234:	41ad      	sbcs	r5, r5
 8002236:	426b      	negs	r3, r5
 8002238:	040d      	lsls	r5, r1, #16
 800223a:	9905      	ldr	r1, [sp, #20]
 800223c:	0c2d      	lsrs	r5, r5, #16
 800223e:	468c      	mov	ip, r1
 8002240:	197f      	adds	r7, r7, r5
 8002242:	4467      	add	r7, ip
 8002244:	18fd      	adds	r5, r7, r3
 8002246:	46a8      	mov	r8, r5
 8002248:	465d      	mov	r5, fp
 800224a:	192d      	adds	r5, r5, r4
 800224c:	42a5      	cmp	r5, r4
 800224e:	41a4      	sbcs	r4, r4
 8002250:	4693      	mov	fp, r2
 8002252:	4264      	negs	r4, r4
 8002254:	46a4      	mov	ip, r4
 8002256:	44c3      	add	fp, r8
 8002258:	44dc      	add	ip, fp
 800225a:	428f      	cmp	r7, r1
 800225c:	41bf      	sbcs	r7, r7
 800225e:	4598      	cmp	r8, r3
 8002260:	419b      	sbcs	r3, r3
 8002262:	4593      	cmp	fp, r2
 8002264:	4192      	sbcs	r2, r2
 8002266:	45a4      	cmp	ip, r4
 8002268:	41a4      	sbcs	r4, r4
 800226a:	425b      	negs	r3, r3
 800226c:	427f      	negs	r7, r7
 800226e:	431f      	orrs	r7, r3
 8002270:	0c36      	lsrs	r6, r6, #16
 8002272:	4252      	negs	r2, r2
 8002274:	4264      	negs	r4, r4
 8002276:	19bf      	adds	r7, r7, r6
 8002278:	4322      	orrs	r2, r4
 800227a:	18bf      	adds	r7, r7, r2
 800227c:	4662      	mov	r2, ip
 800227e:	1838      	adds	r0, r7, r0
 8002280:	0243      	lsls	r3, r0, #9
 8002282:	0dd2      	lsrs	r2, r2, #23
 8002284:	9903      	ldr	r1, [sp, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	026a      	lsls	r2, r5, #9
 800228a:	430a      	orrs	r2, r1
 800228c:	1e50      	subs	r0, r2, #1
 800228e:	4182      	sbcs	r2, r0
 8002290:	4661      	mov	r1, ip
 8002292:	0ded      	lsrs	r5, r5, #23
 8002294:	432a      	orrs	r2, r5
 8002296:	024e      	lsls	r6, r1, #9
 8002298:	4332      	orrs	r2, r6
 800229a:	01d9      	lsls	r1, r3, #7
 800229c:	d400      	bmi.n	80022a0 <__aeabi_dmul+0x31c>
 800229e:	e0b3      	b.n	8002408 <__aeabi_dmul+0x484>
 80022a0:	2601      	movs	r6, #1
 80022a2:	0850      	lsrs	r0, r2, #1
 80022a4:	4032      	ands	r2, r6
 80022a6:	4302      	orrs	r2, r0
 80022a8:	07de      	lsls	r6, r3, #31
 80022aa:	4332      	orrs	r2, r6
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	4c22      	ldr	r4, [pc, #136]	; (8002338 <__aeabi_dmul+0x3b4>)
 80022b0:	4454      	add	r4, sl
 80022b2:	2c00      	cmp	r4, #0
 80022b4:	dd62      	ble.n	800237c <__aeabi_dmul+0x3f8>
 80022b6:	0751      	lsls	r1, r2, #29
 80022b8:	d009      	beq.n	80022ce <__aeabi_dmul+0x34a>
 80022ba:	200f      	movs	r0, #15
 80022bc:	4010      	ands	r0, r2
 80022be:	2804      	cmp	r0, #4
 80022c0:	d005      	beq.n	80022ce <__aeabi_dmul+0x34a>
 80022c2:	1d10      	adds	r0, r2, #4
 80022c4:	4290      	cmp	r0, r2
 80022c6:	4192      	sbcs	r2, r2
 80022c8:	4252      	negs	r2, r2
 80022ca:	189b      	adds	r3, r3, r2
 80022cc:	0002      	movs	r2, r0
 80022ce:	01d9      	lsls	r1, r3, #7
 80022d0:	d504      	bpl.n	80022dc <__aeabi_dmul+0x358>
 80022d2:	2480      	movs	r4, #128	; 0x80
 80022d4:	4819      	ldr	r0, [pc, #100]	; (800233c <__aeabi_dmul+0x3b8>)
 80022d6:	00e4      	lsls	r4, r4, #3
 80022d8:	4003      	ands	r3, r0
 80022da:	4454      	add	r4, sl
 80022dc:	4818      	ldr	r0, [pc, #96]	; (8002340 <__aeabi_dmul+0x3bc>)
 80022de:	4284      	cmp	r4, r0
 80022e0:	dd00      	ble.n	80022e4 <__aeabi_dmul+0x360>
 80022e2:	e727      	b.n	8002134 <__aeabi_dmul+0x1b0>
 80022e4:	075e      	lsls	r6, r3, #29
 80022e6:	025b      	lsls	r3, r3, #9
 80022e8:	08d2      	lsrs	r2, r2, #3
 80022ea:	0b1f      	lsrs	r7, r3, #12
 80022ec:	0563      	lsls	r3, r4, #21
 80022ee:	4316      	orrs	r6, r2
 80022f0:	0d5b      	lsrs	r3, r3, #21
 80022f2:	e6b2      	b.n	800205a <__aeabi_dmul+0xd6>
 80022f4:	2300      	movs	r3, #0
 80022f6:	4699      	mov	r9, r3
 80022f8:	3301      	adds	r3, #1
 80022fa:	2704      	movs	r7, #4
 80022fc:	2600      	movs	r6, #0
 80022fe:	469b      	mov	fp, r3
 8002300:	e664      	b.n	8001fcc <__aeabi_dmul+0x48>
 8002302:	2303      	movs	r3, #3
 8002304:	9701      	str	r7, [sp, #4]
 8002306:	4681      	mov	r9, r0
 8002308:	270c      	movs	r7, #12
 800230a:	469b      	mov	fp, r3
 800230c:	e65e      	b.n	8001fcc <__aeabi_dmul+0x48>
 800230e:	2201      	movs	r2, #1
 8002310:	2001      	movs	r0, #1
 8002312:	4317      	orrs	r7, r2
 8002314:	2200      	movs	r2, #0
 8002316:	e676      	b.n	8002006 <__aeabi_dmul+0x82>
 8002318:	2303      	movs	r3, #3
 800231a:	2003      	movs	r0, #3
 800231c:	431f      	orrs	r7, r3
 800231e:	4643      	mov	r3, r8
 8002320:	e671      	b.n	8002006 <__aeabi_dmul+0x82>
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	000007ff 	.word	0x000007ff
 8002328:	fffffc01 	.word	0xfffffc01
 800232c:	08005120 	.word	0x08005120
 8002330:	800fffff 	.word	0x800fffff
 8002334:	fffffc0d 	.word	0xfffffc0d
 8002338:	000003ff 	.word	0x000003ff
 800233c:	feffffff 	.word	0xfeffffff
 8002340:	000007fe 	.word	0x000007fe
 8002344:	2300      	movs	r3, #0
 8002346:	2780      	movs	r7, #128	; 0x80
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	033f      	lsls	r7, r7, #12
 800234c:	2600      	movs	r6, #0
 800234e:	4b43      	ldr	r3, [pc, #268]	; (800245c <__aeabi_dmul+0x4d8>)
 8002350:	e683      	b.n	800205a <__aeabi_dmul+0xd6>
 8002352:	9b01      	ldr	r3, [sp, #4]
 8002354:	0032      	movs	r2, r6
 8002356:	46a4      	mov	ip, r4
 8002358:	4658      	mov	r0, fp
 800235a:	e670      	b.n	800203e <__aeabi_dmul+0xba>
 800235c:	46ac      	mov	ip, r5
 800235e:	e66e      	b.n	800203e <__aeabi_dmul+0xba>
 8002360:	2780      	movs	r7, #128	; 0x80
 8002362:	9901      	ldr	r1, [sp, #4]
 8002364:	033f      	lsls	r7, r7, #12
 8002366:	4239      	tst	r1, r7
 8002368:	d02d      	beq.n	80023c6 <__aeabi_dmul+0x442>
 800236a:	423b      	tst	r3, r7
 800236c:	d12b      	bne.n	80023c6 <__aeabi_dmul+0x442>
 800236e:	431f      	orrs	r7, r3
 8002370:	033f      	lsls	r7, r7, #12
 8002372:	0b3f      	lsrs	r7, r7, #12
 8002374:	9500      	str	r5, [sp, #0]
 8002376:	0016      	movs	r6, r2
 8002378:	4b38      	ldr	r3, [pc, #224]	; (800245c <__aeabi_dmul+0x4d8>)
 800237a:	e66e      	b.n	800205a <__aeabi_dmul+0xd6>
 800237c:	2501      	movs	r5, #1
 800237e:	1b2d      	subs	r5, r5, r4
 8002380:	2d38      	cmp	r5, #56	; 0x38
 8002382:	dd00      	ble.n	8002386 <__aeabi_dmul+0x402>
 8002384:	e666      	b.n	8002054 <__aeabi_dmul+0xd0>
 8002386:	2d1f      	cmp	r5, #31
 8002388:	dc40      	bgt.n	800240c <__aeabi_dmul+0x488>
 800238a:	4835      	ldr	r0, [pc, #212]	; (8002460 <__aeabi_dmul+0x4dc>)
 800238c:	001c      	movs	r4, r3
 800238e:	4450      	add	r0, sl
 8002390:	0016      	movs	r6, r2
 8002392:	4082      	lsls	r2, r0
 8002394:	4084      	lsls	r4, r0
 8002396:	40ee      	lsrs	r6, r5
 8002398:	1e50      	subs	r0, r2, #1
 800239a:	4182      	sbcs	r2, r0
 800239c:	4334      	orrs	r4, r6
 800239e:	4314      	orrs	r4, r2
 80023a0:	40eb      	lsrs	r3, r5
 80023a2:	0762      	lsls	r2, r4, #29
 80023a4:	d009      	beq.n	80023ba <__aeabi_dmul+0x436>
 80023a6:	220f      	movs	r2, #15
 80023a8:	4022      	ands	r2, r4
 80023aa:	2a04      	cmp	r2, #4
 80023ac:	d005      	beq.n	80023ba <__aeabi_dmul+0x436>
 80023ae:	0022      	movs	r2, r4
 80023b0:	1d14      	adds	r4, r2, #4
 80023b2:	4294      	cmp	r4, r2
 80023b4:	4180      	sbcs	r0, r0
 80023b6:	4240      	negs	r0, r0
 80023b8:	181b      	adds	r3, r3, r0
 80023ba:	021a      	lsls	r2, r3, #8
 80023bc:	d53e      	bpl.n	800243c <__aeabi_dmul+0x4b8>
 80023be:	2301      	movs	r3, #1
 80023c0:	2700      	movs	r7, #0
 80023c2:	2600      	movs	r6, #0
 80023c4:	e649      	b.n	800205a <__aeabi_dmul+0xd6>
 80023c6:	2780      	movs	r7, #128	; 0x80
 80023c8:	9b01      	ldr	r3, [sp, #4]
 80023ca:	033f      	lsls	r7, r7, #12
 80023cc:	431f      	orrs	r7, r3
 80023ce:	033f      	lsls	r7, r7, #12
 80023d0:	0b3f      	lsrs	r7, r7, #12
 80023d2:	9400      	str	r4, [sp, #0]
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <__aeabi_dmul+0x4d8>)
 80023d6:	e640      	b.n	800205a <__aeabi_dmul+0xd6>
 80023d8:	0003      	movs	r3, r0
 80023da:	465a      	mov	r2, fp
 80023dc:	3b28      	subs	r3, #40	; 0x28
 80023de:	409a      	lsls	r2, r3
 80023e0:	2600      	movs	r6, #0
 80023e2:	9201      	str	r2, [sp, #4]
 80023e4:	e66d      	b.n	80020c2 <__aeabi_dmul+0x13e>
 80023e6:	4658      	mov	r0, fp
 80023e8:	f000 fcec 	bl	8002dc4 <__clzsi2>
 80023ec:	3020      	adds	r0, #32
 80023ee:	e657      	b.n	80020a0 <__aeabi_dmul+0x11c>
 80023f0:	0003      	movs	r3, r0
 80023f2:	4652      	mov	r2, sl
 80023f4:	3b28      	subs	r3, #40	; 0x28
 80023f6:	409a      	lsls	r2, r3
 80023f8:	0013      	movs	r3, r2
 80023fa:	2200      	movs	r2, #0
 80023fc:	e693      	b.n	8002126 <__aeabi_dmul+0x1a2>
 80023fe:	4650      	mov	r0, sl
 8002400:	f000 fce0 	bl	8002dc4 <__clzsi2>
 8002404:	3020      	adds	r0, #32
 8002406:	e67b      	b.n	8002100 <__aeabi_dmul+0x17c>
 8002408:	46ca      	mov	sl, r9
 800240a:	e750      	b.n	80022ae <__aeabi_dmul+0x32a>
 800240c:	201f      	movs	r0, #31
 800240e:	001e      	movs	r6, r3
 8002410:	4240      	negs	r0, r0
 8002412:	1b04      	subs	r4, r0, r4
 8002414:	40e6      	lsrs	r6, r4
 8002416:	2d20      	cmp	r5, #32
 8002418:	d003      	beq.n	8002422 <__aeabi_dmul+0x49e>
 800241a:	4c12      	ldr	r4, [pc, #72]	; (8002464 <__aeabi_dmul+0x4e0>)
 800241c:	4454      	add	r4, sl
 800241e:	40a3      	lsls	r3, r4
 8002420:	431a      	orrs	r2, r3
 8002422:	1e50      	subs	r0, r2, #1
 8002424:	4182      	sbcs	r2, r0
 8002426:	4332      	orrs	r2, r6
 8002428:	2607      	movs	r6, #7
 800242a:	2700      	movs	r7, #0
 800242c:	4016      	ands	r6, r2
 800242e:	d009      	beq.n	8002444 <__aeabi_dmul+0x4c0>
 8002430:	200f      	movs	r0, #15
 8002432:	2300      	movs	r3, #0
 8002434:	4010      	ands	r0, r2
 8002436:	0014      	movs	r4, r2
 8002438:	2804      	cmp	r0, #4
 800243a:	d1b9      	bne.n	80023b0 <__aeabi_dmul+0x42c>
 800243c:	0022      	movs	r2, r4
 800243e:	075e      	lsls	r6, r3, #29
 8002440:	025b      	lsls	r3, r3, #9
 8002442:	0b1f      	lsrs	r7, r3, #12
 8002444:	08d2      	lsrs	r2, r2, #3
 8002446:	4316      	orrs	r6, r2
 8002448:	2300      	movs	r3, #0
 800244a:	e606      	b.n	800205a <__aeabi_dmul+0xd6>
 800244c:	2780      	movs	r7, #128	; 0x80
 800244e:	033f      	lsls	r7, r7, #12
 8002450:	431f      	orrs	r7, r3
 8002452:	033f      	lsls	r7, r7, #12
 8002454:	0b3f      	lsrs	r7, r7, #12
 8002456:	0016      	movs	r6, r2
 8002458:	4b00      	ldr	r3, [pc, #0]	; (800245c <__aeabi_dmul+0x4d8>)
 800245a:	e5fe      	b.n	800205a <__aeabi_dmul+0xd6>
 800245c:	000007ff 	.word	0x000007ff
 8002460:	0000041e 	.word	0x0000041e
 8002464:	0000043e 	.word	0x0000043e

08002468 <__aeabi_dsub>:
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	4657      	mov	r7, sl
 800246c:	464e      	mov	r6, r9
 800246e:	4645      	mov	r5, r8
 8002470:	46de      	mov	lr, fp
 8002472:	000c      	movs	r4, r1
 8002474:	0309      	lsls	r1, r1, #12
 8002476:	b5e0      	push	{r5, r6, r7, lr}
 8002478:	0a49      	lsrs	r1, r1, #9
 800247a:	0f46      	lsrs	r6, r0, #29
 800247c:	005f      	lsls	r7, r3, #1
 800247e:	4331      	orrs	r1, r6
 8002480:	031e      	lsls	r6, r3, #12
 8002482:	0fdb      	lsrs	r3, r3, #31
 8002484:	0a76      	lsrs	r6, r6, #9
 8002486:	469b      	mov	fp, r3
 8002488:	0f53      	lsrs	r3, r2, #29
 800248a:	4333      	orrs	r3, r6
 800248c:	4ec8      	ldr	r6, [pc, #800]	; (80027b0 <__aeabi_dsub+0x348>)
 800248e:	0065      	lsls	r5, r4, #1
 8002490:	00c0      	lsls	r0, r0, #3
 8002492:	0fe4      	lsrs	r4, r4, #31
 8002494:	00d2      	lsls	r2, r2, #3
 8002496:	0d6d      	lsrs	r5, r5, #21
 8002498:	46a2      	mov	sl, r4
 800249a:	4681      	mov	r9, r0
 800249c:	0d7f      	lsrs	r7, r7, #21
 800249e:	469c      	mov	ip, r3
 80024a0:	4690      	mov	r8, r2
 80024a2:	42b7      	cmp	r7, r6
 80024a4:	d100      	bne.n	80024a8 <__aeabi_dsub+0x40>
 80024a6:	e0b9      	b.n	800261c <__aeabi_dsub+0x1b4>
 80024a8:	465b      	mov	r3, fp
 80024aa:	2601      	movs	r6, #1
 80024ac:	4073      	eors	r3, r6
 80024ae:	469b      	mov	fp, r3
 80024b0:	1bee      	subs	r6, r5, r7
 80024b2:	45a3      	cmp	fp, r4
 80024b4:	d100      	bne.n	80024b8 <__aeabi_dsub+0x50>
 80024b6:	e083      	b.n	80025c0 <__aeabi_dsub+0x158>
 80024b8:	2e00      	cmp	r6, #0
 80024ba:	dd63      	ble.n	8002584 <__aeabi_dsub+0x11c>
 80024bc:	2f00      	cmp	r7, #0
 80024be:	d000      	beq.n	80024c2 <__aeabi_dsub+0x5a>
 80024c0:	e0b1      	b.n	8002626 <__aeabi_dsub+0x1be>
 80024c2:	4663      	mov	r3, ip
 80024c4:	4313      	orrs	r3, r2
 80024c6:	d100      	bne.n	80024ca <__aeabi_dsub+0x62>
 80024c8:	e123      	b.n	8002712 <__aeabi_dsub+0x2aa>
 80024ca:	1e73      	subs	r3, r6, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d000      	beq.n	80024d2 <__aeabi_dsub+0x6a>
 80024d0:	e1ba      	b.n	8002848 <__aeabi_dsub+0x3e0>
 80024d2:	1a86      	subs	r6, r0, r2
 80024d4:	4663      	mov	r3, ip
 80024d6:	42b0      	cmp	r0, r6
 80024d8:	4180      	sbcs	r0, r0
 80024da:	2501      	movs	r5, #1
 80024dc:	1ac9      	subs	r1, r1, r3
 80024de:	4240      	negs	r0, r0
 80024e0:	1a09      	subs	r1, r1, r0
 80024e2:	020b      	lsls	r3, r1, #8
 80024e4:	d400      	bmi.n	80024e8 <__aeabi_dsub+0x80>
 80024e6:	e147      	b.n	8002778 <__aeabi_dsub+0x310>
 80024e8:	0249      	lsls	r1, r1, #9
 80024ea:	0a4b      	lsrs	r3, r1, #9
 80024ec:	4698      	mov	r8, r3
 80024ee:	4643      	mov	r3, r8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dsub+0x8e>
 80024f4:	e189      	b.n	800280a <__aeabi_dsub+0x3a2>
 80024f6:	4640      	mov	r0, r8
 80024f8:	f000 fc64 	bl	8002dc4 <__clzsi2>
 80024fc:	0003      	movs	r3, r0
 80024fe:	3b08      	subs	r3, #8
 8002500:	2b1f      	cmp	r3, #31
 8002502:	dd00      	ble.n	8002506 <__aeabi_dsub+0x9e>
 8002504:	e17c      	b.n	8002800 <__aeabi_dsub+0x398>
 8002506:	2220      	movs	r2, #32
 8002508:	0030      	movs	r0, r6
 800250a:	1ad2      	subs	r2, r2, r3
 800250c:	4641      	mov	r1, r8
 800250e:	40d0      	lsrs	r0, r2
 8002510:	4099      	lsls	r1, r3
 8002512:	0002      	movs	r2, r0
 8002514:	409e      	lsls	r6, r3
 8002516:	430a      	orrs	r2, r1
 8002518:	429d      	cmp	r5, r3
 800251a:	dd00      	ble.n	800251e <__aeabi_dsub+0xb6>
 800251c:	e16a      	b.n	80027f4 <__aeabi_dsub+0x38c>
 800251e:	1b5d      	subs	r5, r3, r5
 8002520:	1c6b      	adds	r3, r5, #1
 8002522:	2b1f      	cmp	r3, #31
 8002524:	dd00      	ble.n	8002528 <__aeabi_dsub+0xc0>
 8002526:	e194      	b.n	8002852 <__aeabi_dsub+0x3ea>
 8002528:	2120      	movs	r1, #32
 800252a:	0010      	movs	r0, r2
 800252c:	0035      	movs	r5, r6
 800252e:	1ac9      	subs	r1, r1, r3
 8002530:	408e      	lsls	r6, r1
 8002532:	40da      	lsrs	r2, r3
 8002534:	4088      	lsls	r0, r1
 8002536:	40dd      	lsrs	r5, r3
 8002538:	1e71      	subs	r1, r6, #1
 800253a:	418e      	sbcs	r6, r1
 800253c:	0011      	movs	r1, r2
 800253e:	2207      	movs	r2, #7
 8002540:	4328      	orrs	r0, r5
 8002542:	2500      	movs	r5, #0
 8002544:	4306      	orrs	r6, r0
 8002546:	4032      	ands	r2, r6
 8002548:	2a00      	cmp	r2, #0
 800254a:	d009      	beq.n	8002560 <__aeabi_dsub+0xf8>
 800254c:	230f      	movs	r3, #15
 800254e:	4033      	ands	r3, r6
 8002550:	2b04      	cmp	r3, #4
 8002552:	d005      	beq.n	8002560 <__aeabi_dsub+0xf8>
 8002554:	1d33      	adds	r3, r6, #4
 8002556:	42b3      	cmp	r3, r6
 8002558:	41b6      	sbcs	r6, r6
 800255a:	4276      	negs	r6, r6
 800255c:	1989      	adds	r1, r1, r6
 800255e:	001e      	movs	r6, r3
 8002560:	020b      	lsls	r3, r1, #8
 8002562:	d400      	bmi.n	8002566 <__aeabi_dsub+0xfe>
 8002564:	e23d      	b.n	80029e2 <__aeabi_dsub+0x57a>
 8002566:	1c6a      	adds	r2, r5, #1
 8002568:	4b91      	ldr	r3, [pc, #580]	; (80027b0 <__aeabi_dsub+0x348>)
 800256a:	0555      	lsls	r5, r2, #21
 800256c:	0d6d      	lsrs	r5, r5, #21
 800256e:	429a      	cmp	r2, r3
 8002570:	d100      	bne.n	8002574 <__aeabi_dsub+0x10c>
 8002572:	e119      	b.n	80027a8 <__aeabi_dsub+0x340>
 8002574:	4a8f      	ldr	r2, [pc, #572]	; (80027b4 <__aeabi_dsub+0x34c>)
 8002576:	08f6      	lsrs	r6, r6, #3
 8002578:	400a      	ands	r2, r1
 800257a:	0757      	lsls	r7, r2, #29
 800257c:	0252      	lsls	r2, r2, #9
 800257e:	4337      	orrs	r7, r6
 8002580:	0b12      	lsrs	r2, r2, #12
 8002582:	e09b      	b.n	80026bc <__aeabi_dsub+0x254>
 8002584:	2e00      	cmp	r6, #0
 8002586:	d000      	beq.n	800258a <__aeabi_dsub+0x122>
 8002588:	e0c5      	b.n	8002716 <__aeabi_dsub+0x2ae>
 800258a:	1c6e      	adds	r6, r5, #1
 800258c:	0576      	lsls	r6, r6, #21
 800258e:	0d76      	lsrs	r6, r6, #21
 8002590:	2e01      	cmp	r6, #1
 8002592:	dc00      	bgt.n	8002596 <__aeabi_dsub+0x12e>
 8002594:	e148      	b.n	8002828 <__aeabi_dsub+0x3c0>
 8002596:	4667      	mov	r7, ip
 8002598:	1a86      	subs	r6, r0, r2
 800259a:	1bcb      	subs	r3, r1, r7
 800259c:	42b0      	cmp	r0, r6
 800259e:	41bf      	sbcs	r7, r7
 80025a0:	427f      	negs	r7, r7
 80025a2:	46b8      	mov	r8, r7
 80025a4:	001f      	movs	r7, r3
 80025a6:	4643      	mov	r3, r8
 80025a8:	1aff      	subs	r7, r7, r3
 80025aa:	003b      	movs	r3, r7
 80025ac:	46b8      	mov	r8, r7
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	d500      	bpl.n	80025b4 <__aeabi_dsub+0x14c>
 80025b2:	e15f      	b.n	8002874 <__aeabi_dsub+0x40c>
 80025b4:	4337      	orrs	r7, r6
 80025b6:	d19a      	bne.n	80024ee <__aeabi_dsub+0x86>
 80025b8:	2200      	movs	r2, #0
 80025ba:	2400      	movs	r4, #0
 80025bc:	2500      	movs	r5, #0
 80025be:	e079      	b.n	80026b4 <__aeabi_dsub+0x24c>
 80025c0:	2e00      	cmp	r6, #0
 80025c2:	dc00      	bgt.n	80025c6 <__aeabi_dsub+0x15e>
 80025c4:	e0fa      	b.n	80027bc <__aeabi_dsub+0x354>
 80025c6:	2f00      	cmp	r7, #0
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x164>
 80025ca:	e08d      	b.n	80026e8 <__aeabi_dsub+0x280>
 80025cc:	4b78      	ldr	r3, [pc, #480]	; (80027b0 <__aeabi_dsub+0x348>)
 80025ce:	429d      	cmp	r5, r3
 80025d0:	d067      	beq.n	80026a2 <__aeabi_dsub+0x23a>
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	4667      	mov	r7, ip
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	431f      	orrs	r7, r3
 80025da:	46bc      	mov	ip, r7
 80025dc:	2e38      	cmp	r6, #56	; 0x38
 80025de:	dc00      	bgt.n	80025e2 <__aeabi_dsub+0x17a>
 80025e0:	e152      	b.n	8002888 <__aeabi_dsub+0x420>
 80025e2:	4663      	mov	r3, ip
 80025e4:	4313      	orrs	r3, r2
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	4193      	sbcs	r3, r2
 80025ea:	181e      	adds	r6, r3, r0
 80025ec:	4286      	cmp	r6, r0
 80025ee:	4180      	sbcs	r0, r0
 80025f0:	4240      	negs	r0, r0
 80025f2:	1809      	adds	r1, r1, r0
 80025f4:	020b      	lsls	r3, r1, #8
 80025f6:	d400      	bmi.n	80025fa <__aeabi_dsub+0x192>
 80025f8:	e0be      	b.n	8002778 <__aeabi_dsub+0x310>
 80025fa:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <__aeabi_dsub+0x348>)
 80025fc:	3501      	adds	r5, #1
 80025fe:	429d      	cmp	r5, r3
 8002600:	d100      	bne.n	8002604 <__aeabi_dsub+0x19c>
 8002602:	e0d2      	b.n	80027aa <__aeabi_dsub+0x342>
 8002604:	4a6b      	ldr	r2, [pc, #428]	; (80027b4 <__aeabi_dsub+0x34c>)
 8002606:	0873      	lsrs	r3, r6, #1
 8002608:	400a      	ands	r2, r1
 800260a:	2101      	movs	r1, #1
 800260c:	400e      	ands	r6, r1
 800260e:	431e      	orrs	r6, r3
 8002610:	0851      	lsrs	r1, r2, #1
 8002612:	07d3      	lsls	r3, r2, #31
 8002614:	2207      	movs	r2, #7
 8002616:	431e      	orrs	r6, r3
 8002618:	4032      	ands	r2, r6
 800261a:	e795      	b.n	8002548 <__aeabi_dsub+0xe0>
 800261c:	001e      	movs	r6, r3
 800261e:	4316      	orrs	r6, r2
 8002620:	d000      	beq.n	8002624 <__aeabi_dsub+0x1bc>
 8002622:	e745      	b.n	80024b0 <__aeabi_dsub+0x48>
 8002624:	e740      	b.n	80024a8 <__aeabi_dsub+0x40>
 8002626:	4b62      	ldr	r3, [pc, #392]	; (80027b0 <__aeabi_dsub+0x348>)
 8002628:	429d      	cmp	r5, r3
 800262a:	d03a      	beq.n	80026a2 <__aeabi_dsub+0x23a>
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	4667      	mov	r7, ip
 8002630:	041b      	lsls	r3, r3, #16
 8002632:	431f      	orrs	r7, r3
 8002634:	46bc      	mov	ip, r7
 8002636:	2e38      	cmp	r6, #56	; 0x38
 8002638:	dd00      	ble.n	800263c <__aeabi_dsub+0x1d4>
 800263a:	e0eb      	b.n	8002814 <__aeabi_dsub+0x3ac>
 800263c:	2e1f      	cmp	r6, #31
 800263e:	dc00      	bgt.n	8002642 <__aeabi_dsub+0x1da>
 8002640:	e13a      	b.n	80028b8 <__aeabi_dsub+0x450>
 8002642:	0033      	movs	r3, r6
 8002644:	4667      	mov	r7, ip
 8002646:	3b20      	subs	r3, #32
 8002648:	40df      	lsrs	r7, r3
 800264a:	003b      	movs	r3, r7
 800264c:	2e20      	cmp	r6, #32
 800264e:	d005      	beq.n	800265c <__aeabi_dsub+0x1f4>
 8002650:	2740      	movs	r7, #64	; 0x40
 8002652:	1bbf      	subs	r7, r7, r6
 8002654:	4666      	mov	r6, ip
 8002656:	40be      	lsls	r6, r7
 8002658:	4332      	orrs	r2, r6
 800265a:	4690      	mov	r8, r2
 800265c:	4646      	mov	r6, r8
 800265e:	1e72      	subs	r2, r6, #1
 8002660:	4196      	sbcs	r6, r2
 8002662:	4333      	orrs	r3, r6
 8002664:	e0da      	b.n	800281c <__aeabi_dsub+0x3b4>
 8002666:	2b00      	cmp	r3, #0
 8002668:	d100      	bne.n	800266c <__aeabi_dsub+0x204>
 800266a:	e214      	b.n	8002a96 <__aeabi_dsub+0x62e>
 800266c:	4663      	mov	r3, ip
 800266e:	4313      	orrs	r3, r2
 8002670:	d100      	bne.n	8002674 <__aeabi_dsub+0x20c>
 8002672:	e168      	b.n	8002946 <__aeabi_dsub+0x4de>
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	074e      	lsls	r6, r1, #29
 8002678:	08c0      	lsrs	r0, r0, #3
 800267a:	08c9      	lsrs	r1, r1, #3
 800267c:	031b      	lsls	r3, r3, #12
 800267e:	4306      	orrs	r6, r0
 8002680:	4219      	tst	r1, r3
 8002682:	d008      	beq.n	8002696 <__aeabi_dsub+0x22e>
 8002684:	4660      	mov	r0, ip
 8002686:	08c0      	lsrs	r0, r0, #3
 8002688:	4218      	tst	r0, r3
 800268a:	d104      	bne.n	8002696 <__aeabi_dsub+0x22e>
 800268c:	4663      	mov	r3, ip
 800268e:	0001      	movs	r1, r0
 8002690:	08d2      	lsrs	r2, r2, #3
 8002692:	075e      	lsls	r6, r3, #29
 8002694:	4316      	orrs	r6, r2
 8002696:	00f3      	lsls	r3, r6, #3
 8002698:	4699      	mov	r9, r3
 800269a:	00c9      	lsls	r1, r1, #3
 800269c:	0f72      	lsrs	r2, r6, #29
 800269e:	4d44      	ldr	r5, [pc, #272]	; (80027b0 <__aeabi_dsub+0x348>)
 80026a0:	4311      	orrs	r1, r2
 80026a2:	464b      	mov	r3, r9
 80026a4:	08de      	lsrs	r6, r3, #3
 80026a6:	4b42      	ldr	r3, [pc, #264]	; (80027b0 <__aeabi_dsub+0x348>)
 80026a8:	074f      	lsls	r7, r1, #29
 80026aa:	4337      	orrs	r7, r6
 80026ac:	08ca      	lsrs	r2, r1, #3
 80026ae:	429d      	cmp	r5, r3
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x24c>
 80026b2:	e06e      	b.n	8002792 <__aeabi_dsub+0x32a>
 80026b4:	0312      	lsls	r2, r2, #12
 80026b6:	056d      	lsls	r5, r5, #21
 80026b8:	0b12      	lsrs	r2, r2, #12
 80026ba:	0d6d      	lsrs	r5, r5, #21
 80026bc:	2100      	movs	r1, #0
 80026be:	0312      	lsls	r2, r2, #12
 80026c0:	0b13      	lsrs	r3, r2, #12
 80026c2:	0d0a      	lsrs	r2, r1, #20
 80026c4:	0512      	lsls	r2, r2, #20
 80026c6:	431a      	orrs	r2, r3
 80026c8:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <__aeabi_dsub+0x350>)
 80026ca:	052d      	lsls	r5, r5, #20
 80026cc:	4013      	ands	r3, r2
 80026ce:	432b      	orrs	r3, r5
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	07e4      	lsls	r4, r4, #31
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	4323      	orrs	r3, r4
 80026d8:	0038      	movs	r0, r7
 80026da:	0019      	movs	r1, r3
 80026dc:	bc3c      	pop	{r2, r3, r4, r5}
 80026de:	4690      	mov	r8, r2
 80026e0:	4699      	mov	r9, r3
 80026e2:	46a2      	mov	sl, r4
 80026e4:	46ab      	mov	fp, r5
 80026e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026e8:	4663      	mov	r3, ip
 80026ea:	4313      	orrs	r3, r2
 80026ec:	d011      	beq.n	8002712 <__aeabi_dsub+0x2aa>
 80026ee:	1e73      	subs	r3, r6, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d000      	beq.n	80026f6 <__aeabi_dsub+0x28e>
 80026f4:	e107      	b.n	8002906 <__aeabi_dsub+0x49e>
 80026f6:	1886      	adds	r6, r0, r2
 80026f8:	4286      	cmp	r6, r0
 80026fa:	4180      	sbcs	r0, r0
 80026fc:	4461      	add	r1, ip
 80026fe:	4240      	negs	r0, r0
 8002700:	1809      	adds	r1, r1, r0
 8002702:	2501      	movs	r5, #1
 8002704:	020b      	lsls	r3, r1, #8
 8002706:	d537      	bpl.n	8002778 <__aeabi_dsub+0x310>
 8002708:	2502      	movs	r5, #2
 800270a:	e77b      	b.n	8002604 <__aeabi_dsub+0x19c>
 800270c:	003e      	movs	r6, r7
 800270e:	4661      	mov	r1, ip
 8002710:	4691      	mov	r9, r2
 8002712:	0035      	movs	r5, r6
 8002714:	e7c5      	b.n	80026a2 <__aeabi_dsub+0x23a>
 8002716:	465c      	mov	r4, fp
 8002718:	2d00      	cmp	r5, #0
 800271a:	d000      	beq.n	800271e <__aeabi_dsub+0x2b6>
 800271c:	e0e1      	b.n	80028e2 <__aeabi_dsub+0x47a>
 800271e:	000b      	movs	r3, r1
 8002720:	4303      	orrs	r3, r0
 8002722:	d0f3      	beq.n	800270c <__aeabi_dsub+0x2a4>
 8002724:	1c73      	adds	r3, r6, #1
 8002726:	d100      	bne.n	800272a <__aeabi_dsub+0x2c2>
 8002728:	e1ac      	b.n	8002a84 <__aeabi_dsub+0x61c>
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <__aeabi_dsub+0x348>)
 800272c:	429f      	cmp	r7, r3
 800272e:	d100      	bne.n	8002732 <__aeabi_dsub+0x2ca>
 8002730:	e13a      	b.n	80029a8 <__aeabi_dsub+0x540>
 8002732:	43f3      	mvns	r3, r6
 8002734:	2b38      	cmp	r3, #56	; 0x38
 8002736:	dd00      	ble.n	800273a <__aeabi_dsub+0x2d2>
 8002738:	e16f      	b.n	8002a1a <__aeabi_dsub+0x5b2>
 800273a:	2b1f      	cmp	r3, #31
 800273c:	dd00      	ble.n	8002740 <__aeabi_dsub+0x2d8>
 800273e:	e18c      	b.n	8002a5a <__aeabi_dsub+0x5f2>
 8002740:	2520      	movs	r5, #32
 8002742:	000e      	movs	r6, r1
 8002744:	1aed      	subs	r5, r5, r3
 8002746:	40ae      	lsls	r6, r5
 8002748:	46b0      	mov	r8, r6
 800274a:	0006      	movs	r6, r0
 800274c:	46aa      	mov	sl, r5
 800274e:	40de      	lsrs	r6, r3
 8002750:	4645      	mov	r5, r8
 8002752:	4335      	orrs	r5, r6
 8002754:	002e      	movs	r6, r5
 8002756:	4655      	mov	r5, sl
 8002758:	40d9      	lsrs	r1, r3
 800275a:	40a8      	lsls	r0, r5
 800275c:	4663      	mov	r3, ip
 800275e:	1e45      	subs	r5, r0, #1
 8002760:	41a8      	sbcs	r0, r5
 8002762:	1a5b      	subs	r3, r3, r1
 8002764:	469c      	mov	ip, r3
 8002766:	4330      	orrs	r0, r6
 8002768:	1a16      	subs	r6, r2, r0
 800276a:	42b2      	cmp	r2, r6
 800276c:	4192      	sbcs	r2, r2
 800276e:	4663      	mov	r3, ip
 8002770:	4252      	negs	r2, r2
 8002772:	1a99      	subs	r1, r3, r2
 8002774:	003d      	movs	r5, r7
 8002776:	e6b4      	b.n	80024e2 <__aeabi_dsub+0x7a>
 8002778:	2207      	movs	r2, #7
 800277a:	4032      	ands	r2, r6
 800277c:	2a00      	cmp	r2, #0
 800277e:	d000      	beq.n	8002782 <__aeabi_dsub+0x31a>
 8002780:	e6e4      	b.n	800254c <__aeabi_dsub+0xe4>
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <__aeabi_dsub+0x348>)
 8002784:	08f6      	lsrs	r6, r6, #3
 8002786:	074f      	lsls	r7, r1, #29
 8002788:	4337      	orrs	r7, r6
 800278a:	08ca      	lsrs	r2, r1, #3
 800278c:	429d      	cmp	r5, r3
 800278e:	d000      	beq.n	8002792 <__aeabi_dsub+0x32a>
 8002790:	e790      	b.n	80026b4 <__aeabi_dsub+0x24c>
 8002792:	003b      	movs	r3, r7
 8002794:	4313      	orrs	r3, r2
 8002796:	d100      	bne.n	800279a <__aeabi_dsub+0x332>
 8002798:	e1a6      	b.n	8002ae8 <__aeabi_dsub+0x680>
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	031b      	lsls	r3, r3, #12
 800279e:	431a      	orrs	r2, r3
 80027a0:	0312      	lsls	r2, r2, #12
 80027a2:	0b12      	lsrs	r2, r2, #12
 80027a4:	4d02      	ldr	r5, [pc, #8]	; (80027b0 <__aeabi_dsub+0x348>)
 80027a6:	e789      	b.n	80026bc <__aeabi_dsub+0x254>
 80027a8:	0015      	movs	r5, r2
 80027aa:	2200      	movs	r2, #0
 80027ac:	2700      	movs	r7, #0
 80027ae:	e785      	b.n	80026bc <__aeabi_dsub+0x254>
 80027b0:	000007ff 	.word	0x000007ff
 80027b4:	ff7fffff 	.word	0xff7fffff
 80027b8:	800fffff 	.word	0x800fffff
 80027bc:	2e00      	cmp	r6, #0
 80027be:	d000      	beq.n	80027c2 <__aeabi_dsub+0x35a>
 80027c0:	e0c7      	b.n	8002952 <__aeabi_dsub+0x4ea>
 80027c2:	1c6b      	adds	r3, r5, #1
 80027c4:	055e      	lsls	r6, r3, #21
 80027c6:	0d76      	lsrs	r6, r6, #21
 80027c8:	2e01      	cmp	r6, #1
 80027ca:	dc00      	bgt.n	80027ce <__aeabi_dsub+0x366>
 80027cc:	e0f0      	b.n	80029b0 <__aeabi_dsub+0x548>
 80027ce:	4dc8      	ldr	r5, [pc, #800]	; (8002af0 <__aeabi_dsub+0x688>)
 80027d0:	42ab      	cmp	r3, r5
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dsub+0x36e>
 80027d4:	e0b9      	b.n	800294a <__aeabi_dsub+0x4e2>
 80027d6:	1885      	adds	r5, r0, r2
 80027d8:	000a      	movs	r2, r1
 80027da:	4285      	cmp	r5, r0
 80027dc:	4189      	sbcs	r1, r1
 80027de:	4462      	add	r2, ip
 80027e0:	4249      	negs	r1, r1
 80027e2:	1851      	adds	r1, r2, r1
 80027e4:	2207      	movs	r2, #7
 80027e6:	07ce      	lsls	r6, r1, #31
 80027e8:	086d      	lsrs	r5, r5, #1
 80027ea:	432e      	orrs	r6, r5
 80027ec:	0849      	lsrs	r1, r1, #1
 80027ee:	4032      	ands	r2, r6
 80027f0:	001d      	movs	r5, r3
 80027f2:	e6a9      	b.n	8002548 <__aeabi_dsub+0xe0>
 80027f4:	49bf      	ldr	r1, [pc, #764]	; (8002af4 <__aeabi_dsub+0x68c>)
 80027f6:	1aed      	subs	r5, r5, r3
 80027f8:	4011      	ands	r1, r2
 80027fa:	2207      	movs	r2, #7
 80027fc:	4032      	ands	r2, r6
 80027fe:	e6a3      	b.n	8002548 <__aeabi_dsub+0xe0>
 8002800:	0032      	movs	r2, r6
 8002802:	3828      	subs	r0, #40	; 0x28
 8002804:	4082      	lsls	r2, r0
 8002806:	2600      	movs	r6, #0
 8002808:	e686      	b.n	8002518 <__aeabi_dsub+0xb0>
 800280a:	0030      	movs	r0, r6
 800280c:	f000 fada 	bl	8002dc4 <__clzsi2>
 8002810:	3020      	adds	r0, #32
 8002812:	e673      	b.n	80024fc <__aeabi_dsub+0x94>
 8002814:	4663      	mov	r3, ip
 8002816:	4313      	orrs	r3, r2
 8002818:	1e5a      	subs	r2, r3, #1
 800281a:	4193      	sbcs	r3, r2
 800281c:	1ac6      	subs	r6, r0, r3
 800281e:	42b0      	cmp	r0, r6
 8002820:	4180      	sbcs	r0, r0
 8002822:	4240      	negs	r0, r0
 8002824:	1a09      	subs	r1, r1, r0
 8002826:	e65c      	b.n	80024e2 <__aeabi_dsub+0x7a>
 8002828:	000e      	movs	r6, r1
 800282a:	4667      	mov	r7, ip
 800282c:	4306      	orrs	r6, r0
 800282e:	4317      	orrs	r7, r2
 8002830:	2d00      	cmp	r5, #0
 8002832:	d15e      	bne.n	80028f2 <__aeabi_dsub+0x48a>
 8002834:	2e00      	cmp	r6, #0
 8002836:	d000      	beq.n	800283a <__aeabi_dsub+0x3d2>
 8002838:	e0f3      	b.n	8002a22 <__aeabi_dsub+0x5ba>
 800283a:	2f00      	cmp	r7, #0
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x3d8>
 800283e:	e11e      	b.n	8002a7e <__aeabi_dsub+0x616>
 8002840:	465c      	mov	r4, fp
 8002842:	4661      	mov	r1, ip
 8002844:	4691      	mov	r9, r2
 8002846:	e72c      	b.n	80026a2 <__aeabi_dsub+0x23a>
 8002848:	4fa9      	ldr	r7, [pc, #676]	; (8002af0 <__aeabi_dsub+0x688>)
 800284a:	42be      	cmp	r6, r7
 800284c:	d07b      	beq.n	8002946 <__aeabi_dsub+0x4de>
 800284e:	001e      	movs	r6, r3
 8002850:	e6f1      	b.n	8002636 <__aeabi_dsub+0x1ce>
 8002852:	0010      	movs	r0, r2
 8002854:	3d1f      	subs	r5, #31
 8002856:	40e8      	lsrs	r0, r5
 8002858:	2b20      	cmp	r3, #32
 800285a:	d003      	beq.n	8002864 <__aeabi_dsub+0x3fc>
 800285c:	2140      	movs	r1, #64	; 0x40
 800285e:	1acb      	subs	r3, r1, r3
 8002860:	409a      	lsls	r2, r3
 8002862:	4316      	orrs	r6, r2
 8002864:	1e73      	subs	r3, r6, #1
 8002866:	419e      	sbcs	r6, r3
 8002868:	2207      	movs	r2, #7
 800286a:	4306      	orrs	r6, r0
 800286c:	4032      	ands	r2, r6
 800286e:	2100      	movs	r1, #0
 8002870:	2500      	movs	r5, #0
 8002872:	e783      	b.n	800277c <__aeabi_dsub+0x314>
 8002874:	1a16      	subs	r6, r2, r0
 8002876:	4663      	mov	r3, ip
 8002878:	42b2      	cmp	r2, r6
 800287a:	4180      	sbcs	r0, r0
 800287c:	1a59      	subs	r1, r3, r1
 800287e:	4240      	negs	r0, r0
 8002880:	1a0b      	subs	r3, r1, r0
 8002882:	4698      	mov	r8, r3
 8002884:	465c      	mov	r4, fp
 8002886:	e632      	b.n	80024ee <__aeabi_dsub+0x86>
 8002888:	2e1f      	cmp	r6, #31
 800288a:	dd00      	ble.n	800288e <__aeabi_dsub+0x426>
 800288c:	e0ab      	b.n	80029e6 <__aeabi_dsub+0x57e>
 800288e:	2720      	movs	r7, #32
 8002890:	1bbb      	subs	r3, r7, r6
 8002892:	469a      	mov	sl, r3
 8002894:	4663      	mov	r3, ip
 8002896:	4657      	mov	r7, sl
 8002898:	40bb      	lsls	r3, r7
 800289a:	4699      	mov	r9, r3
 800289c:	0013      	movs	r3, r2
 800289e:	464f      	mov	r7, r9
 80028a0:	40f3      	lsrs	r3, r6
 80028a2:	431f      	orrs	r7, r3
 80028a4:	003b      	movs	r3, r7
 80028a6:	4657      	mov	r7, sl
 80028a8:	40ba      	lsls	r2, r7
 80028aa:	1e57      	subs	r7, r2, #1
 80028ac:	41ba      	sbcs	r2, r7
 80028ae:	4313      	orrs	r3, r2
 80028b0:	4662      	mov	r2, ip
 80028b2:	40f2      	lsrs	r2, r6
 80028b4:	1889      	adds	r1, r1, r2
 80028b6:	e698      	b.n	80025ea <__aeabi_dsub+0x182>
 80028b8:	2720      	movs	r7, #32
 80028ba:	1bbb      	subs	r3, r7, r6
 80028bc:	469a      	mov	sl, r3
 80028be:	4663      	mov	r3, ip
 80028c0:	4657      	mov	r7, sl
 80028c2:	40bb      	lsls	r3, r7
 80028c4:	4699      	mov	r9, r3
 80028c6:	0013      	movs	r3, r2
 80028c8:	464f      	mov	r7, r9
 80028ca:	40f3      	lsrs	r3, r6
 80028cc:	431f      	orrs	r7, r3
 80028ce:	003b      	movs	r3, r7
 80028d0:	4657      	mov	r7, sl
 80028d2:	40ba      	lsls	r2, r7
 80028d4:	1e57      	subs	r7, r2, #1
 80028d6:	41ba      	sbcs	r2, r7
 80028d8:	4313      	orrs	r3, r2
 80028da:	4662      	mov	r2, ip
 80028dc:	40f2      	lsrs	r2, r6
 80028de:	1a89      	subs	r1, r1, r2
 80028e0:	e79c      	b.n	800281c <__aeabi_dsub+0x3b4>
 80028e2:	4b83      	ldr	r3, [pc, #524]	; (8002af0 <__aeabi_dsub+0x688>)
 80028e4:	429f      	cmp	r7, r3
 80028e6:	d05f      	beq.n	80029a8 <__aeabi_dsub+0x540>
 80028e8:	2580      	movs	r5, #128	; 0x80
 80028ea:	042d      	lsls	r5, r5, #16
 80028ec:	4273      	negs	r3, r6
 80028ee:	4329      	orrs	r1, r5
 80028f0:	e720      	b.n	8002734 <__aeabi_dsub+0x2cc>
 80028f2:	2e00      	cmp	r6, #0
 80028f4:	d10c      	bne.n	8002910 <__aeabi_dsub+0x4a8>
 80028f6:	2f00      	cmp	r7, #0
 80028f8:	d100      	bne.n	80028fc <__aeabi_dsub+0x494>
 80028fa:	e0d0      	b.n	8002a9e <__aeabi_dsub+0x636>
 80028fc:	465c      	mov	r4, fp
 80028fe:	4661      	mov	r1, ip
 8002900:	4691      	mov	r9, r2
 8002902:	4d7b      	ldr	r5, [pc, #492]	; (8002af0 <__aeabi_dsub+0x688>)
 8002904:	e6cd      	b.n	80026a2 <__aeabi_dsub+0x23a>
 8002906:	4f7a      	ldr	r7, [pc, #488]	; (8002af0 <__aeabi_dsub+0x688>)
 8002908:	42be      	cmp	r6, r7
 800290a:	d01c      	beq.n	8002946 <__aeabi_dsub+0x4de>
 800290c:	001e      	movs	r6, r3
 800290e:	e665      	b.n	80025dc <__aeabi_dsub+0x174>
 8002910:	2f00      	cmp	r7, #0
 8002912:	d018      	beq.n	8002946 <__aeabi_dsub+0x4de>
 8002914:	08c0      	lsrs	r0, r0, #3
 8002916:	074e      	lsls	r6, r1, #29
 8002918:	4306      	orrs	r6, r0
 800291a:	2080      	movs	r0, #128	; 0x80
 800291c:	08c9      	lsrs	r1, r1, #3
 800291e:	0300      	lsls	r0, r0, #12
 8002920:	4201      	tst	r1, r0
 8002922:	d008      	beq.n	8002936 <__aeabi_dsub+0x4ce>
 8002924:	4663      	mov	r3, ip
 8002926:	08dc      	lsrs	r4, r3, #3
 8002928:	4204      	tst	r4, r0
 800292a:	d104      	bne.n	8002936 <__aeabi_dsub+0x4ce>
 800292c:	0021      	movs	r1, r4
 800292e:	46da      	mov	sl, fp
 8002930:	08d2      	lsrs	r2, r2, #3
 8002932:	075e      	lsls	r6, r3, #29
 8002934:	4316      	orrs	r6, r2
 8002936:	00f3      	lsls	r3, r6, #3
 8002938:	4699      	mov	r9, r3
 800293a:	2401      	movs	r4, #1
 800293c:	4653      	mov	r3, sl
 800293e:	00c9      	lsls	r1, r1, #3
 8002940:	0f72      	lsrs	r2, r6, #29
 8002942:	4311      	orrs	r1, r2
 8002944:	401c      	ands	r4, r3
 8002946:	4d6a      	ldr	r5, [pc, #424]	; (8002af0 <__aeabi_dsub+0x688>)
 8002948:	e6ab      	b.n	80026a2 <__aeabi_dsub+0x23a>
 800294a:	001d      	movs	r5, r3
 800294c:	2200      	movs	r2, #0
 800294e:	2700      	movs	r7, #0
 8002950:	e6b4      	b.n	80026bc <__aeabi_dsub+0x254>
 8002952:	2d00      	cmp	r5, #0
 8002954:	d159      	bne.n	8002a0a <__aeabi_dsub+0x5a2>
 8002956:	000b      	movs	r3, r1
 8002958:	4303      	orrs	r3, r0
 800295a:	d100      	bne.n	800295e <__aeabi_dsub+0x4f6>
 800295c:	e6d6      	b.n	800270c <__aeabi_dsub+0x2a4>
 800295e:	1c73      	adds	r3, r6, #1
 8002960:	d100      	bne.n	8002964 <__aeabi_dsub+0x4fc>
 8002962:	e0b2      	b.n	8002aca <__aeabi_dsub+0x662>
 8002964:	4b62      	ldr	r3, [pc, #392]	; (8002af0 <__aeabi_dsub+0x688>)
 8002966:	429f      	cmp	r7, r3
 8002968:	d01e      	beq.n	80029a8 <__aeabi_dsub+0x540>
 800296a:	43f3      	mvns	r3, r6
 800296c:	2b38      	cmp	r3, #56	; 0x38
 800296e:	dc6f      	bgt.n	8002a50 <__aeabi_dsub+0x5e8>
 8002970:	2b1f      	cmp	r3, #31
 8002972:	dd00      	ble.n	8002976 <__aeabi_dsub+0x50e>
 8002974:	e097      	b.n	8002aa6 <__aeabi_dsub+0x63e>
 8002976:	2520      	movs	r5, #32
 8002978:	000e      	movs	r6, r1
 800297a:	1aed      	subs	r5, r5, r3
 800297c:	40ae      	lsls	r6, r5
 800297e:	46b0      	mov	r8, r6
 8002980:	0006      	movs	r6, r0
 8002982:	46aa      	mov	sl, r5
 8002984:	40de      	lsrs	r6, r3
 8002986:	4645      	mov	r5, r8
 8002988:	4335      	orrs	r5, r6
 800298a:	002e      	movs	r6, r5
 800298c:	4655      	mov	r5, sl
 800298e:	40a8      	lsls	r0, r5
 8002990:	40d9      	lsrs	r1, r3
 8002992:	1e45      	subs	r5, r0, #1
 8002994:	41a8      	sbcs	r0, r5
 8002996:	448c      	add	ip, r1
 8002998:	4306      	orrs	r6, r0
 800299a:	18b6      	adds	r6, r6, r2
 800299c:	4296      	cmp	r6, r2
 800299e:	4192      	sbcs	r2, r2
 80029a0:	4251      	negs	r1, r2
 80029a2:	4461      	add	r1, ip
 80029a4:	003d      	movs	r5, r7
 80029a6:	e625      	b.n	80025f4 <__aeabi_dsub+0x18c>
 80029a8:	003d      	movs	r5, r7
 80029aa:	4661      	mov	r1, ip
 80029ac:	4691      	mov	r9, r2
 80029ae:	e678      	b.n	80026a2 <__aeabi_dsub+0x23a>
 80029b0:	000b      	movs	r3, r1
 80029b2:	4303      	orrs	r3, r0
 80029b4:	2d00      	cmp	r5, #0
 80029b6:	d000      	beq.n	80029ba <__aeabi_dsub+0x552>
 80029b8:	e655      	b.n	8002666 <__aeabi_dsub+0x1fe>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f5      	beq.n	80029aa <__aeabi_dsub+0x542>
 80029be:	4663      	mov	r3, ip
 80029c0:	4313      	orrs	r3, r2
 80029c2:	d100      	bne.n	80029c6 <__aeabi_dsub+0x55e>
 80029c4:	e66d      	b.n	80026a2 <__aeabi_dsub+0x23a>
 80029c6:	1886      	adds	r6, r0, r2
 80029c8:	4286      	cmp	r6, r0
 80029ca:	4180      	sbcs	r0, r0
 80029cc:	4461      	add	r1, ip
 80029ce:	4240      	negs	r0, r0
 80029d0:	1809      	adds	r1, r1, r0
 80029d2:	2200      	movs	r2, #0
 80029d4:	020b      	lsls	r3, r1, #8
 80029d6:	d400      	bmi.n	80029da <__aeabi_dsub+0x572>
 80029d8:	e6d0      	b.n	800277c <__aeabi_dsub+0x314>
 80029da:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <__aeabi_dsub+0x68c>)
 80029dc:	3501      	adds	r5, #1
 80029de:	4019      	ands	r1, r3
 80029e0:	e5b2      	b.n	8002548 <__aeabi_dsub+0xe0>
 80029e2:	46b1      	mov	r9, r6
 80029e4:	e65d      	b.n	80026a2 <__aeabi_dsub+0x23a>
 80029e6:	0033      	movs	r3, r6
 80029e8:	4667      	mov	r7, ip
 80029ea:	3b20      	subs	r3, #32
 80029ec:	40df      	lsrs	r7, r3
 80029ee:	003b      	movs	r3, r7
 80029f0:	2e20      	cmp	r6, #32
 80029f2:	d005      	beq.n	8002a00 <__aeabi_dsub+0x598>
 80029f4:	2740      	movs	r7, #64	; 0x40
 80029f6:	1bbf      	subs	r7, r7, r6
 80029f8:	4666      	mov	r6, ip
 80029fa:	40be      	lsls	r6, r7
 80029fc:	4332      	orrs	r2, r6
 80029fe:	4690      	mov	r8, r2
 8002a00:	4646      	mov	r6, r8
 8002a02:	1e72      	subs	r2, r6, #1
 8002a04:	4196      	sbcs	r6, r2
 8002a06:	4333      	orrs	r3, r6
 8002a08:	e5ef      	b.n	80025ea <__aeabi_dsub+0x182>
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <__aeabi_dsub+0x688>)
 8002a0c:	429f      	cmp	r7, r3
 8002a0e:	d0cb      	beq.n	80029a8 <__aeabi_dsub+0x540>
 8002a10:	2580      	movs	r5, #128	; 0x80
 8002a12:	042d      	lsls	r5, r5, #16
 8002a14:	4273      	negs	r3, r6
 8002a16:	4329      	orrs	r1, r5
 8002a18:	e7a8      	b.n	800296c <__aeabi_dsub+0x504>
 8002a1a:	4308      	orrs	r0, r1
 8002a1c:	1e41      	subs	r1, r0, #1
 8002a1e:	4188      	sbcs	r0, r1
 8002a20:	e6a2      	b.n	8002768 <__aeabi_dsub+0x300>
 8002a22:	2f00      	cmp	r7, #0
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dsub+0x5c0>
 8002a26:	e63c      	b.n	80026a2 <__aeabi_dsub+0x23a>
 8002a28:	4663      	mov	r3, ip
 8002a2a:	1a86      	subs	r6, r0, r2
 8002a2c:	1acf      	subs	r7, r1, r3
 8002a2e:	42b0      	cmp	r0, r6
 8002a30:	419b      	sbcs	r3, r3
 8002a32:	425b      	negs	r3, r3
 8002a34:	1afb      	subs	r3, r7, r3
 8002a36:	4698      	mov	r8, r3
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	d54e      	bpl.n	8002ada <__aeabi_dsub+0x672>
 8002a3c:	1a16      	subs	r6, r2, r0
 8002a3e:	4663      	mov	r3, ip
 8002a40:	42b2      	cmp	r2, r6
 8002a42:	4192      	sbcs	r2, r2
 8002a44:	1a59      	subs	r1, r3, r1
 8002a46:	4252      	negs	r2, r2
 8002a48:	1a89      	subs	r1, r1, r2
 8002a4a:	465c      	mov	r4, fp
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	e57b      	b.n	8002548 <__aeabi_dsub+0xe0>
 8002a50:	4301      	orrs	r1, r0
 8002a52:	000e      	movs	r6, r1
 8002a54:	1e71      	subs	r1, r6, #1
 8002a56:	418e      	sbcs	r6, r1
 8002a58:	e79f      	b.n	800299a <__aeabi_dsub+0x532>
 8002a5a:	001d      	movs	r5, r3
 8002a5c:	000e      	movs	r6, r1
 8002a5e:	3d20      	subs	r5, #32
 8002a60:	40ee      	lsrs	r6, r5
 8002a62:	46b0      	mov	r8, r6
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d004      	beq.n	8002a72 <__aeabi_dsub+0x60a>
 8002a68:	2540      	movs	r5, #64	; 0x40
 8002a6a:	1aeb      	subs	r3, r5, r3
 8002a6c:	4099      	lsls	r1, r3
 8002a6e:	4308      	orrs	r0, r1
 8002a70:	4681      	mov	r9, r0
 8002a72:	4648      	mov	r0, r9
 8002a74:	4643      	mov	r3, r8
 8002a76:	1e41      	subs	r1, r0, #1
 8002a78:	4188      	sbcs	r0, r1
 8002a7a:	4318      	orrs	r0, r3
 8002a7c:	e674      	b.n	8002768 <__aeabi_dsub+0x300>
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2400      	movs	r4, #0
 8002a82:	e617      	b.n	80026b4 <__aeabi_dsub+0x24c>
 8002a84:	1a16      	subs	r6, r2, r0
 8002a86:	4663      	mov	r3, ip
 8002a88:	42b2      	cmp	r2, r6
 8002a8a:	4192      	sbcs	r2, r2
 8002a8c:	1a59      	subs	r1, r3, r1
 8002a8e:	4252      	negs	r2, r2
 8002a90:	1a89      	subs	r1, r1, r2
 8002a92:	003d      	movs	r5, r7
 8002a94:	e525      	b.n	80024e2 <__aeabi_dsub+0x7a>
 8002a96:	4661      	mov	r1, ip
 8002a98:	4691      	mov	r9, r2
 8002a9a:	4d15      	ldr	r5, [pc, #84]	; (8002af0 <__aeabi_dsub+0x688>)
 8002a9c:	e601      	b.n	80026a2 <__aeabi_dsub+0x23a>
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	2400      	movs	r4, #0
 8002aa2:	0312      	lsls	r2, r2, #12
 8002aa4:	e679      	b.n	800279a <__aeabi_dsub+0x332>
 8002aa6:	001d      	movs	r5, r3
 8002aa8:	000e      	movs	r6, r1
 8002aaa:	3d20      	subs	r5, #32
 8002aac:	40ee      	lsrs	r6, r5
 8002aae:	46b0      	mov	r8, r6
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d004      	beq.n	8002abe <__aeabi_dsub+0x656>
 8002ab4:	2540      	movs	r5, #64	; 0x40
 8002ab6:	1aeb      	subs	r3, r5, r3
 8002ab8:	4099      	lsls	r1, r3
 8002aba:	4308      	orrs	r0, r1
 8002abc:	4681      	mov	r9, r0
 8002abe:	464e      	mov	r6, r9
 8002ac0:	4643      	mov	r3, r8
 8002ac2:	1e71      	subs	r1, r6, #1
 8002ac4:	418e      	sbcs	r6, r1
 8002ac6:	431e      	orrs	r6, r3
 8002ac8:	e767      	b.n	800299a <__aeabi_dsub+0x532>
 8002aca:	1886      	adds	r6, r0, r2
 8002acc:	4296      	cmp	r6, r2
 8002ace:	419b      	sbcs	r3, r3
 8002ad0:	4461      	add	r1, ip
 8002ad2:	425b      	negs	r3, r3
 8002ad4:	18c9      	adds	r1, r1, r3
 8002ad6:	003d      	movs	r5, r7
 8002ad8:	e58c      	b.n	80025f4 <__aeabi_dsub+0x18c>
 8002ada:	4647      	mov	r7, r8
 8002adc:	4337      	orrs	r7, r6
 8002ade:	d0ce      	beq.n	8002a7e <__aeabi_dsub+0x616>
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	4032      	ands	r2, r6
 8002ae6:	e649      	b.n	800277c <__aeabi_dsub+0x314>
 8002ae8:	2700      	movs	r7, #0
 8002aea:	003a      	movs	r2, r7
 8002aec:	e5e6      	b.n	80026bc <__aeabi_dsub+0x254>
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	000007ff 	.word	0x000007ff
 8002af4:	ff7fffff 	.word	0xff7fffff

08002af8 <__aeabi_dcmpun>:
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	4e0c      	ldr	r6, [pc, #48]	; (8002b2c <__aeabi_dcmpun+0x34>)
 8002afc:	030d      	lsls	r5, r1, #12
 8002afe:	031c      	lsls	r4, r3, #12
 8002b00:	0049      	lsls	r1, r1, #1
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	0b2d      	lsrs	r5, r5, #12
 8002b06:	0d49      	lsrs	r1, r1, #21
 8002b08:	0b24      	lsrs	r4, r4, #12
 8002b0a:	0d5b      	lsrs	r3, r3, #21
 8002b0c:	42b1      	cmp	r1, r6
 8002b0e:	d008      	beq.n	8002b22 <__aeabi_dcmpun+0x2a>
 8002b10:	4906      	ldr	r1, [pc, #24]	; (8002b2c <__aeabi_dcmpun+0x34>)
 8002b12:	2000      	movs	r0, #0
 8002b14:	428b      	cmp	r3, r1
 8002b16:	d103      	bne.n	8002b20 <__aeabi_dcmpun+0x28>
 8002b18:	4314      	orrs	r4, r2
 8002b1a:	0020      	movs	r0, r4
 8002b1c:	1e44      	subs	r4, r0, #1
 8002b1e:	41a0      	sbcs	r0, r4
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
 8002b22:	4305      	orrs	r5, r0
 8002b24:	2001      	movs	r0, #1
 8002b26:	2d00      	cmp	r5, #0
 8002b28:	d1fa      	bne.n	8002b20 <__aeabi_dcmpun+0x28>
 8002b2a:	e7f1      	b.n	8002b10 <__aeabi_dcmpun+0x18>
 8002b2c:	000007ff 	.word	0x000007ff

08002b30 <__aeabi_i2d>:
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d02d      	beq.n	8002b92 <__aeabi_i2d+0x62>
 8002b36:	17c3      	asrs	r3, r0, #31
 8002b38:	18c5      	adds	r5, r0, r3
 8002b3a:	405d      	eors	r5, r3
 8002b3c:	0fc4      	lsrs	r4, r0, #31
 8002b3e:	0028      	movs	r0, r5
 8002b40:	f000 f940 	bl	8002dc4 <__clzsi2>
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <__aeabi_i2d+0x6c>)
 8002b46:	1a1b      	subs	r3, r3, r0
 8002b48:	055b      	lsls	r3, r3, #21
 8002b4a:	0d5b      	lsrs	r3, r3, #21
 8002b4c:	280a      	cmp	r0, #10
 8002b4e:	dd15      	ble.n	8002b7c <__aeabi_i2d+0x4c>
 8002b50:	380b      	subs	r0, #11
 8002b52:	4085      	lsls	r5, r0
 8002b54:	2200      	movs	r2, #0
 8002b56:	032d      	lsls	r5, r5, #12
 8002b58:	0b2d      	lsrs	r5, r5, #12
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	032d      	lsls	r5, r5, #12
 8002b60:	0d0a      	lsrs	r2, r1, #20
 8002b62:	0b2d      	lsrs	r5, r5, #12
 8002b64:	0512      	lsls	r2, r2, #20
 8002b66:	432a      	orrs	r2, r5
 8002b68:	4d0d      	ldr	r5, [pc, #52]	; (8002ba0 <__aeabi_i2d+0x70>)
 8002b6a:	051b      	lsls	r3, r3, #20
 8002b6c:	402a      	ands	r2, r5
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	07e4      	lsls	r4, r4, #31
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	4323      	orrs	r3, r4
 8002b78:	0019      	movs	r1, r3
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	0029      	movs	r1, r5
 8002b80:	3215      	adds	r2, #21
 8002b82:	4091      	lsls	r1, r2
 8002b84:	000a      	movs	r2, r1
 8002b86:	210b      	movs	r1, #11
 8002b88:	1a08      	subs	r0, r1, r0
 8002b8a:	40c5      	lsrs	r5, r0
 8002b8c:	032d      	lsls	r5, r5, #12
 8002b8e:	0b2d      	lsrs	r5, r5, #12
 8002b90:	e7e3      	b.n	8002b5a <__aeabi_i2d+0x2a>
 8002b92:	2400      	movs	r4, #0
 8002b94:	2300      	movs	r3, #0
 8002b96:	2500      	movs	r5, #0
 8002b98:	2200      	movs	r2, #0
 8002b9a:	e7de      	b.n	8002b5a <__aeabi_i2d+0x2a>
 8002b9c:	0000041e 	.word	0x0000041e
 8002ba0:	800fffff 	.word	0x800fffff

08002ba4 <__aeabi_f2d>:
 8002ba4:	0041      	lsls	r1, r0, #1
 8002ba6:	0e09      	lsrs	r1, r1, #24
 8002ba8:	1c4b      	adds	r3, r1, #1
 8002baa:	b570      	push	{r4, r5, r6, lr}
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	0246      	lsls	r6, r0, #9
 8002bb0:	0a75      	lsrs	r5, r6, #9
 8002bb2:	0fc4      	lsrs	r4, r0, #31
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	dd14      	ble.n	8002be2 <__aeabi_f2d+0x3e>
 8002bb8:	23e0      	movs	r3, #224	; 0xe0
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	076d      	lsls	r5, r5, #29
 8002bbe:	0b36      	lsrs	r6, r6, #12
 8002bc0:	18cb      	adds	r3, r1, r3
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	0d0a      	lsrs	r2, r1, #20
 8002bc6:	0028      	movs	r0, r5
 8002bc8:	0512      	lsls	r2, r2, #20
 8002bca:	4d1c      	ldr	r5, [pc, #112]	; (8002c3c <__aeabi_f2d+0x98>)
 8002bcc:	4332      	orrs	r2, r6
 8002bce:	055b      	lsls	r3, r3, #21
 8002bd0:	402a      	ands	r2, r5
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	07e4      	lsls	r4, r4, #31
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	4323      	orrs	r3, r4
 8002bde:	0019      	movs	r1, r3
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
 8002be2:	2900      	cmp	r1, #0
 8002be4:	d114      	bne.n	8002c10 <__aeabi_f2d+0x6c>
 8002be6:	2d00      	cmp	r5, #0
 8002be8:	d01e      	beq.n	8002c28 <__aeabi_f2d+0x84>
 8002bea:	0028      	movs	r0, r5
 8002bec:	f000 f8ea 	bl	8002dc4 <__clzsi2>
 8002bf0:	280a      	cmp	r0, #10
 8002bf2:	dc1c      	bgt.n	8002c2e <__aeabi_f2d+0x8a>
 8002bf4:	230b      	movs	r3, #11
 8002bf6:	002a      	movs	r2, r5
 8002bf8:	1a1b      	subs	r3, r3, r0
 8002bfa:	40da      	lsrs	r2, r3
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	3315      	adds	r3, #21
 8002c00:	409d      	lsls	r5, r3
 8002c02:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <__aeabi_f2d+0x9c>)
 8002c04:	0312      	lsls	r2, r2, #12
 8002c06:	1a1b      	subs	r3, r3, r0
 8002c08:	055b      	lsls	r3, r3, #21
 8002c0a:	0b16      	lsrs	r6, r2, #12
 8002c0c:	0d5b      	lsrs	r3, r3, #21
 8002c0e:	e7d8      	b.n	8002bc2 <__aeabi_f2d+0x1e>
 8002c10:	2d00      	cmp	r5, #0
 8002c12:	d006      	beq.n	8002c22 <__aeabi_f2d+0x7e>
 8002c14:	0b32      	lsrs	r2, r6, #12
 8002c16:	2680      	movs	r6, #128	; 0x80
 8002c18:	0336      	lsls	r6, r6, #12
 8002c1a:	076d      	lsls	r5, r5, #29
 8002c1c:	4316      	orrs	r6, r2
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <__aeabi_f2d+0xa0>)
 8002c20:	e7cf      	b.n	8002bc2 <__aeabi_f2d+0x1e>
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <__aeabi_f2d+0xa0>)
 8002c24:	2600      	movs	r6, #0
 8002c26:	e7cc      	b.n	8002bc2 <__aeabi_f2d+0x1e>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	2600      	movs	r6, #0
 8002c2c:	e7c9      	b.n	8002bc2 <__aeabi_f2d+0x1e>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	002a      	movs	r2, r5
 8002c32:	3b0b      	subs	r3, #11
 8002c34:	409a      	lsls	r2, r3
 8002c36:	2500      	movs	r5, #0
 8002c38:	e7e3      	b.n	8002c02 <__aeabi_f2d+0x5e>
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	800fffff 	.word	0x800fffff
 8002c40:	00000389 	.word	0x00000389
 8002c44:	000007ff 	.word	0x000007ff

08002c48 <__aeabi_d2f>:
 8002c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4a:	004c      	lsls	r4, r1, #1
 8002c4c:	0d64      	lsrs	r4, r4, #21
 8002c4e:	030b      	lsls	r3, r1, #12
 8002c50:	1c62      	adds	r2, r4, #1
 8002c52:	0a5b      	lsrs	r3, r3, #9
 8002c54:	0f46      	lsrs	r6, r0, #29
 8002c56:	0552      	lsls	r2, r2, #21
 8002c58:	0fc9      	lsrs	r1, r1, #31
 8002c5a:	431e      	orrs	r6, r3
 8002c5c:	00c5      	lsls	r5, r0, #3
 8002c5e:	0d52      	lsrs	r2, r2, #21
 8002c60:	2a01      	cmp	r2, #1
 8002c62:	dd29      	ble.n	8002cb8 <__aeabi_d2f+0x70>
 8002c64:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <__aeabi_d2f+0xfc>)
 8002c66:	18e7      	adds	r7, r4, r3
 8002c68:	2ffe      	cmp	r7, #254	; 0xfe
 8002c6a:	dc1c      	bgt.n	8002ca6 <__aeabi_d2f+0x5e>
 8002c6c:	2f00      	cmp	r7, #0
 8002c6e:	dd3b      	ble.n	8002ce8 <__aeabi_d2f+0xa0>
 8002c70:	0180      	lsls	r0, r0, #6
 8002c72:	1e43      	subs	r3, r0, #1
 8002c74:	4198      	sbcs	r0, r3
 8002c76:	2207      	movs	r2, #7
 8002c78:	00f3      	lsls	r3, r6, #3
 8002c7a:	0f6d      	lsrs	r5, r5, #29
 8002c7c:	4303      	orrs	r3, r0
 8002c7e:	432b      	orrs	r3, r5
 8002c80:	401a      	ands	r2, r3
 8002c82:	2a00      	cmp	r2, #0
 8002c84:	d004      	beq.n	8002c90 <__aeabi_d2f+0x48>
 8002c86:	220f      	movs	r2, #15
 8002c88:	401a      	ands	r2, r3
 8002c8a:	2a04      	cmp	r2, #4
 8002c8c:	d000      	beq.n	8002c90 <__aeabi_d2f+0x48>
 8002c8e:	3304      	adds	r3, #4
 8002c90:	2280      	movs	r2, #128	; 0x80
 8002c92:	04d2      	lsls	r2, r2, #19
 8002c94:	401a      	ands	r2, r3
 8002c96:	d024      	beq.n	8002ce2 <__aeabi_d2f+0x9a>
 8002c98:	3701      	adds	r7, #1
 8002c9a:	b2fa      	uxtb	r2, r7
 8002c9c:	2fff      	cmp	r7, #255	; 0xff
 8002c9e:	d002      	beq.n	8002ca6 <__aeabi_d2f+0x5e>
 8002ca0:	019b      	lsls	r3, r3, #6
 8002ca2:	0a58      	lsrs	r0, r3, #9
 8002ca4:	e001      	b.n	8002caa <__aeabi_d2f+0x62>
 8002ca6:	22ff      	movs	r2, #255	; 0xff
 8002ca8:	2000      	movs	r0, #0
 8002caa:	0240      	lsls	r0, r0, #9
 8002cac:	05d2      	lsls	r2, r2, #23
 8002cae:	0a40      	lsrs	r0, r0, #9
 8002cb0:	07c9      	lsls	r1, r1, #31
 8002cb2:	4310      	orrs	r0, r2
 8002cb4:	4308      	orrs	r0, r1
 8002cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb8:	4335      	orrs	r5, r6
 8002cba:	2c00      	cmp	r4, #0
 8002cbc:	d104      	bne.n	8002cc8 <__aeabi_d2f+0x80>
 8002cbe:	2d00      	cmp	r5, #0
 8002cc0:	d10a      	bne.n	8002cd8 <__aeabi_d2f+0x90>
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	e7f0      	b.n	8002caa <__aeabi_d2f+0x62>
 8002cc8:	2d00      	cmp	r5, #0
 8002cca:	d0ec      	beq.n	8002ca6 <__aeabi_d2f+0x5e>
 8002ccc:	2080      	movs	r0, #128	; 0x80
 8002cce:	03c0      	lsls	r0, r0, #15
 8002cd0:	4330      	orrs	r0, r6
 8002cd2:	22ff      	movs	r2, #255	; 0xff
 8002cd4:	e7e9      	b.n	8002caa <__aeabi_d2f+0x62>
 8002cd6:	2400      	movs	r4, #0
 8002cd8:	2300      	movs	r3, #0
 8002cda:	025b      	lsls	r3, r3, #9
 8002cdc:	0a58      	lsrs	r0, r3, #9
 8002cde:	b2e2      	uxtb	r2, r4
 8002ce0:	e7e3      	b.n	8002caa <__aeabi_d2f+0x62>
 8002ce2:	08db      	lsrs	r3, r3, #3
 8002ce4:	003c      	movs	r4, r7
 8002ce6:	e7f8      	b.n	8002cda <__aeabi_d2f+0x92>
 8002ce8:	003b      	movs	r3, r7
 8002cea:	3317      	adds	r3, #23
 8002cec:	dbf3      	blt.n	8002cd6 <__aeabi_d2f+0x8e>
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	4333      	orrs	r3, r6
 8002cf4:	261e      	movs	r6, #30
 8002cf6:	1bf6      	subs	r6, r6, r7
 8002cf8:	2e1f      	cmp	r6, #31
 8002cfa:	dd14      	ble.n	8002d26 <__aeabi_d2f+0xde>
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4252      	negs	r2, r2
 8002d00:	1bd7      	subs	r7, r2, r7
 8002d02:	001a      	movs	r2, r3
 8002d04:	40fa      	lsrs	r2, r7
 8002d06:	0017      	movs	r7, r2
 8002d08:	2e20      	cmp	r6, #32
 8002d0a:	d004      	beq.n	8002d16 <__aeabi_d2f+0xce>
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <__aeabi_d2f+0x100>)
 8002d0e:	4694      	mov	ip, r2
 8002d10:	4464      	add	r4, ip
 8002d12:	40a3      	lsls	r3, r4
 8002d14:	431d      	orrs	r5, r3
 8002d16:	002b      	movs	r3, r5
 8002d18:	1e5d      	subs	r5, r3, #1
 8002d1a:	41ab      	sbcs	r3, r5
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	433b      	orrs	r3, r7
 8002d20:	401a      	ands	r2, r3
 8002d22:	2700      	movs	r7, #0
 8002d24:	e7ad      	b.n	8002c82 <__aeabi_d2f+0x3a>
 8002d26:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <__aeabi_d2f+0x104>)
 8002d28:	0028      	movs	r0, r5
 8002d2a:	18a2      	adds	r2, r4, r2
 8002d2c:	4095      	lsls	r5, r2
 8002d2e:	4093      	lsls	r3, r2
 8002d30:	1e6c      	subs	r4, r5, #1
 8002d32:	41a5      	sbcs	r5, r4
 8002d34:	40f0      	lsrs	r0, r6
 8002d36:	2207      	movs	r2, #7
 8002d38:	432b      	orrs	r3, r5
 8002d3a:	4303      	orrs	r3, r0
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	2700      	movs	r7, #0
 8002d40:	e79f      	b.n	8002c82 <__aeabi_d2f+0x3a>
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	fffffc80 	.word	0xfffffc80
 8002d48:	fffffca2 	.word	0xfffffca2
 8002d4c:	fffffc82 	.word	0xfffffc82

08002d50 <__aeabi_cfrcmple>:
 8002d50:	4684      	mov	ip, r0
 8002d52:	1c08      	adds	r0, r1, #0
 8002d54:	4661      	mov	r1, ip
 8002d56:	e7ff      	b.n	8002d58 <__aeabi_cfcmpeq>

08002d58 <__aeabi_cfcmpeq>:
 8002d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002d5a:	f000 f8d3 	bl	8002f04 <__lesf2>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d401      	bmi.n	8002d66 <__aeabi_cfcmpeq+0xe>
 8002d62:	2100      	movs	r1, #0
 8002d64:	42c8      	cmn	r0, r1
 8002d66:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002d68 <__aeabi_fcmpeq>:
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	f000 f855 	bl	8002e18 <__eqsf2>
 8002d6e:	4240      	negs	r0, r0
 8002d70:	3001      	adds	r0, #1
 8002d72:	bd10      	pop	{r4, pc}

08002d74 <__aeabi_fcmplt>:
 8002d74:	b510      	push	{r4, lr}
 8002d76:	f000 f8c5 	bl	8002f04 <__lesf2>
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	db01      	blt.n	8002d82 <__aeabi_fcmplt+0xe>
 8002d7e:	2000      	movs	r0, #0
 8002d80:	bd10      	pop	{r4, pc}
 8002d82:	2001      	movs	r0, #1
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)

08002d88 <__aeabi_fcmple>:
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	f000 f8bb 	bl	8002f04 <__lesf2>
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	dd01      	ble.n	8002d96 <__aeabi_fcmple+0xe>
 8002d92:	2000      	movs	r0, #0
 8002d94:	bd10      	pop	{r4, pc}
 8002d96:	2001      	movs	r0, #1
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)

08002d9c <__aeabi_fcmpgt>:
 8002d9c:	b510      	push	{r4, lr}
 8002d9e:	f000 f863 	bl	8002e68 <__gesf2>
 8002da2:	2800      	cmp	r0, #0
 8002da4:	dc01      	bgt.n	8002daa <__aeabi_fcmpgt+0xe>
 8002da6:	2000      	movs	r0, #0
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	2001      	movs	r0, #1
 8002dac:	bd10      	pop	{r4, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)

08002db0 <__aeabi_fcmpge>:
 8002db0:	b510      	push	{r4, lr}
 8002db2:	f000 f859 	bl	8002e68 <__gesf2>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	da01      	bge.n	8002dbe <__aeabi_fcmpge+0xe>
 8002dba:	2000      	movs	r0, #0
 8002dbc:	bd10      	pop	{r4, pc}
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	bd10      	pop	{r4, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)

08002dc4 <__clzsi2>:
 8002dc4:	211c      	movs	r1, #28
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	4298      	cmp	r0, r3
 8002dcc:	d301      	bcc.n	8002dd2 <__clzsi2+0xe>
 8002dce:	0c00      	lsrs	r0, r0, #16
 8002dd0:	3910      	subs	r1, #16
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	4298      	cmp	r0, r3
 8002dd6:	d301      	bcc.n	8002ddc <__clzsi2+0x18>
 8002dd8:	0a00      	lsrs	r0, r0, #8
 8002dda:	3908      	subs	r1, #8
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	4298      	cmp	r0, r3
 8002de0:	d301      	bcc.n	8002de6 <__clzsi2+0x22>
 8002de2:	0900      	lsrs	r0, r0, #4
 8002de4:	3904      	subs	r1, #4
 8002de6:	a202      	add	r2, pc, #8	; (adr r2, 8002df0 <__clzsi2+0x2c>)
 8002de8:	5c10      	ldrb	r0, [r2, r0]
 8002dea:	1840      	adds	r0, r0, r1
 8002dec:	4770      	bx	lr
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	02020304 	.word	0x02020304
 8002df4:	01010101 	.word	0x01010101
	...

08002e00 <__clzdi2>:
 8002e00:	b510      	push	{r4, lr}
 8002e02:	2900      	cmp	r1, #0
 8002e04:	d103      	bne.n	8002e0e <__clzdi2+0xe>
 8002e06:	f7ff ffdd 	bl	8002dc4 <__clzsi2>
 8002e0a:	3020      	adds	r0, #32
 8002e0c:	e002      	b.n	8002e14 <__clzdi2+0x14>
 8002e0e:	1c08      	adds	r0, r1, #0
 8002e10:	f7ff ffd8 	bl	8002dc4 <__clzsi2>
 8002e14:	bd10      	pop	{r4, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)

08002e18 <__eqsf2>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	0042      	lsls	r2, r0, #1
 8002e1c:	024e      	lsls	r6, r1, #9
 8002e1e:	004c      	lsls	r4, r1, #1
 8002e20:	0245      	lsls	r5, r0, #9
 8002e22:	0a6d      	lsrs	r5, r5, #9
 8002e24:	0e12      	lsrs	r2, r2, #24
 8002e26:	0fc3      	lsrs	r3, r0, #31
 8002e28:	0a76      	lsrs	r6, r6, #9
 8002e2a:	0e24      	lsrs	r4, r4, #24
 8002e2c:	0fc9      	lsrs	r1, r1, #31
 8002e2e:	2aff      	cmp	r2, #255	; 0xff
 8002e30:	d00f      	beq.n	8002e52 <__eqsf2+0x3a>
 8002e32:	2cff      	cmp	r4, #255	; 0xff
 8002e34:	d011      	beq.n	8002e5a <__eqsf2+0x42>
 8002e36:	2001      	movs	r0, #1
 8002e38:	42a2      	cmp	r2, r4
 8002e3a:	d000      	beq.n	8002e3e <__eqsf2+0x26>
 8002e3c:	bd70      	pop	{r4, r5, r6, pc}
 8002e3e:	42b5      	cmp	r5, r6
 8002e40:	d1fc      	bne.n	8002e3c <__eqsf2+0x24>
 8002e42:	428b      	cmp	r3, r1
 8002e44:	d00d      	beq.n	8002e62 <__eqsf2+0x4a>
 8002e46:	2a00      	cmp	r2, #0
 8002e48:	d1f8      	bne.n	8002e3c <__eqsf2+0x24>
 8002e4a:	0028      	movs	r0, r5
 8002e4c:	1e45      	subs	r5, r0, #1
 8002e4e:	41a8      	sbcs	r0, r5
 8002e50:	e7f4      	b.n	8002e3c <__eqsf2+0x24>
 8002e52:	2001      	movs	r0, #1
 8002e54:	2d00      	cmp	r5, #0
 8002e56:	d1f1      	bne.n	8002e3c <__eqsf2+0x24>
 8002e58:	e7eb      	b.n	8002e32 <__eqsf2+0x1a>
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	2e00      	cmp	r6, #0
 8002e5e:	d1ed      	bne.n	8002e3c <__eqsf2+0x24>
 8002e60:	e7e9      	b.n	8002e36 <__eqsf2+0x1e>
 8002e62:	2000      	movs	r0, #0
 8002e64:	e7ea      	b.n	8002e3c <__eqsf2+0x24>
 8002e66:	46c0      	nop			; (mov r8, r8)

08002e68 <__gesf2>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	004a      	lsls	r2, r1, #1
 8002e6c:	024e      	lsls	r6, r1, #9
 8002e6e:	0245      	lsls	r5, r0, #9
 8002e70:	0044      	lsls	r4, r0, #1
 8002e72:	0a6d      	lsrs	r5, r5, #9
 8002e74:	0e24      	lsrs	r4, r4, #24
 8002e76:	0fc3      	lsrs	r3, r0, #31
 8002e78:	0a76      	lsrs	r6, r6, #9
 8002e7a:	0e12      	lsrs	r2, r2, #24
 8002e7c:	0fc9      	lsrs	r1, r1, #31
 8002e7e:	2cff      	cmp	r4, #255	; 0xff
 8002e80:	d015      	beq.n	8002eae <__gesf2+0x46>
 8002e82:	2aff      	cmp	r2, #255	; 0xff
 8002e84:	d00e      	beq.n	8002ea4 <__gesf2+0x3c>
 8002e86:	2c00      	cmp	r4, #0
 8002e88:	d115      	bne.n	8002eb6 <__gesf2+0x4e>
 8002e8a:	2a00      	cmp	r2, #0
 8002e8c:	d101      	bne.n	8002e92 <__gesf2+0x2a>
 8002e8e:	2e00      	cmp	r6, #0
 8002e90:	d01c      	beq.n	8002ecc <__gesf2+0x64>
 8002e92:	2d00      	cmp	r5, #0
 8002e94:	d014      	beq.n	8002ec0 <__gesf2+0x58>
 8002e96:	428b      	cmp	r3, r1
 8002e98:	d027      	beq.n	8002eea <__gesf2+0x82>
 8002e9a:	2002      	movs	r0, #2
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	4018      	ands	r0, r3
 8002ea0:	3801      	subs	r0, #1
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	2e00      	cmp	r6, #0
 8002ea6:	d0ee      	beq.n	8002e86 <__gesf2+0x1e>
 8002ea8:	2002      	movs	r0, #2
 8002eaa:	4240      	negs	r0, r0
 8002eac:	e7f9      	b.n	8002ea2 <__gesf2+0x3a>
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	d1fa      	bne.n	8002ea8 <__gesf2+0x40>
 8002eb2:	2aff      	cmp	r2, #255	; 0xff
 8002eb4:	d00e      	beq.n	8002ed4 <__gesf2+0x6c>
 8002eb6:	2a00      	cmp	r2, #0
 8002eb8:	d10e      	bne.n	8002ed8 <__gesf2+0x70>
 8002eba:	2e00      	cmp	r6, #0
 8002ebc:	d0ed      	beq.n	8002e9a <__gesf2+0x32>
 8002ebe:	e00b      	b.n	8002ed8 <__gesf2+0x70>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	3901      	subs	r1, #1
 8002ec4:	4399      	bics	r1, r3
 8002ec6:	0008      	movs	r0, r1
 8002ec8:	3001      	adds	r0, #1
 8002eca:	e7ea      	b.n	8002ea2 <__gesf2+0x3a>
 8002ecc:	2000      	movs	r0, #0
 8002ece:	2d00      	cmp	r5, #0
 8002ed0:	d0e7      	beq.n	8002ea2 <__gesf2+0x3a>
 8002ed2:	e7e2      	b.n	8002e9a <__gesf2+0x32>
 8002ed4:	2e00      	cmp	r6, #0
 8002ed6:	d1e7      	bne.n	8002ea8 <__gesf2+0x40>
 8002ed8:	428b      	cmp	r3, r1
 8002eda:	d1de      	bne.n	8002e9a <__gesf2+0x32>
 8002edc:	4294      	cmp	r4, r2
 8002ede:	dd05      	ble.n	8002eec <__gesf2+0x84>
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	4008      	ands	r0, r1
 8002ee6:	3801      	subs	r0, #1
 8002ee8:	e7db      	b.n	8002ea2 <__gesf2+0x3a>
 8002eea:	2400      	movs	r4, #0
 8002eec:	42a2      	cmp	r2, r4
 8002eee:	dc04      	bgt.n	8002efa <__gesf2+0x92>
 8002ef0:	42b5      	cmp	r5, r6
 8002ef2:	d8d2      	bhi.n	8002e9a <__gesf2+0x32>
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	42b5      	cmp	r5, r6
 8002ef8:	d2d3      	bcs.n	8002ea2 <__gesf2+0x3a>
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	2301      	movs	r3, #1
 8002efe:	4398      	bics	r0, r3
 8002f00:	3001      	adds	r0, #1
 8002f02:	e7ce      	b.n	8002ea2 <__gesf2+0x3a>

08002f04 <__lesf2>:
 8002f04:	b530      	push	{r4, r5, lr}
 8002f06:	0042      	lsls	r2, r0, #1
 8002f08:	0244      	lsls	r4, r0, #9
 8002f0a:	024d      	lsls	r5, r1, #9
 8002f0c:	0fc3      	lsrs	r3, r0, #31
 8002f0e:	0048      	lsls	r0, r1, #1
 8002f10:	0a64      	lsrs	r4, r4, #9
 8002f12:	0e12      	lsrs	r2, r2, #24
 8002f14:	0a6d      	lsrs	r5, r5, #9
 8002f16:	0e00      	lsrs	r0, r0, #24
 8002f18:	0fc9      	lsrs	r1, r1, #31
 8002f1a:	2aff      	cmp	r2, #255	; 0xff
 8002f1c:	d012      	beq.n	8002f44 <__lesf2+0x40>
 8002f1e:	28ff      	cmp	r0, #255	; 0xff
 8002f20:	d00c      	beq.n	8002f3c <__lesf2+0x38>
 8002f22:	2a00      	cmp	r2, #0
 8002f24:	d112      	bne.n	8002f4c <__lesf2+0x48>
 8002f26:	2800      	cmp	r0, #0
 8002f28:	d119      	bne.n	8002f5e <__lesf2+0x5a>
 8002f2a:	2d00      	cmp	r5, #0
 8002f2c:	d117      	bne.n	8002f5e <__lesf2+0x5a>
 8002f2e:	2c00      	cmp	r4, #0
 8002f30:	d02b      	beq.n	8002f8a <__lesf2+0x86>
 8002f32:	2002      	movs	r0, #2
 8002f34:	3b01      	subs	r3, #1
 8002f36:	4018      	ands	r0, r3
 8002f38:	3801      	subs	r0, #1
 8002f3a:	e026      	b.n	8002f8a <__lesf2+0x86>
 8002f3c:	2d00      	cmp	r5, #0
 8002f3e:	d0f0      	beq.n	8002f22 <__lesf2+0x1e>
 8002f40:	2002      	movs	r0, #2
 8002f42:	e022      	b.n	8002f8a <__lesf2+0x86>
 8002f44:	2c00      	cmp	r4, #0
 8002f46:	d1fb      	bne.n	8002f40 <__lesf2+0x3c>
 8002f48:	28ff      	cmp	r0, #255	; 0xff
 8002f4a:	d01f      	beq.n	8002f8c <__lesf2+0x88>
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	d11f      	bne.n	8002f90 <__lesf2+0x8c>
 8002f50:	2d00      	cmp	r5, #0
 8002f52:	d11d      	bne.n	8002f90 <__lesf2+0x8c>
 8002f54:	2002      	movs	r0, #2
 8002f56:	3b01      	subs	r3, #1
 8002f58:	4018      	ands	r0, r3
 8002f5a:	3801      	subs	r0, #1
 8002f5c:	e015      	b.n	8002f8a <__lesf2+0x86>
 8002f5e:	2c00      	cmp	r4, #0
 8002f60:	d00e      	beq.n	8002f80 <__lesf2+0x7c>
 8002f62:	428b      	cmp	r3, r1
 8002f64:	d1e5      	bne.n	8002f32 <__lesf2+0x2e>
 8002f66:	2200      	movs	r2, #0
 8002f68:	4290      	cmp	r0, r2
 8002f6a:	dc04      	bgt.n	8002f76 <__lesf2+0x72>
 8002f6c:	42ac      	cmp	r4, r5
 8002f6e:	d8e0      	bhi.n	8002f32 <__lesf2+0x2e>
 8002f70:	2000      	movs	r0, #0
 8002f72:	42ac      	cmp	r4, r5
 8002f74:	d209      	bcs.n	8002f8a <__lesf2+0x86>
 8002f76:	1e58      	subs	r0, r3, #1
 8002f78:	2301      	movs	r3, #1
 8002f7a:	4398      	bics	r0, r3
 8002f7c:	3001      	adds	r0, #1
 8002f7e:	e004      	b.n	8002f8a <__lesf2+0x86>
 8002f80:	2301      	movs	r3, #1
 8002f82:	3901      	subs	r1, #1
 8002f84:	4399      	bics	r1, r3
 8002f86:	0008      	movs	r0, r1
 8002f88:	3001      	adds	r0, #1
 8002f8a:	bd30      	pop	{r4, r5, pc}
 8002f8c:	2d00      	cmp	r5, #0
 8002f8e:	d1d7      	bne.n	8002f40 <__lesf2+0x3c>
 8002f90:	428b      	cmp	r3, r1
 8002f92:	d1ce      	bne.n	8002f32 <__lesf2+0x2e>
 8002f94:	4282      	cmp	r2, r0
 8002f96:	dde7      	ble.n	8002f68 <__lesf2+0x64>
 8002f98:	2102      	movs	r1, #2
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	4008      	ands	r0, r1
 8002f9e:	3801      	subs	r0, #1
 8002fa0:	e7f3      	b.n	8002f8a <__lesf2+0x86>
 8002fa2:	46c0      	nop			; (mov r8, r8)
	...

08002fb0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8002fb0:	b530      	push	{r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb2:	b672      	cpsid	i
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <chCoreAllocAlignedWithOffset+0x30>)
 8002fb6:	1e4c      	subs	r4, r1, #1
 8002fb8:	681d      	ldr	r5, [r3, #0]
  size = MEM_ALIGN_NEXT(size, align);
 8002fba:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002fbc:	18aa      	adds	r2, r5, r2
  size = MEM_ALIGN_NEXT(size, align);
 8002fbe:	1900      	adds	r0, r0, r4
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002fc0:	1912      	adds	r2, r2, r4
 8002fc2:	400a      	ands	r2, r1
  size = MEM_ALIGN_NEXT(size, align);
 8002fc4:	4001      	ands	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8002fc6:	6858      	ldr	r0, [r3, #4]
  next = p + size;
 8002fc8:	1851      	adds	r1, r2, r1
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8002fca:	4281      	cmp	r1, r0
 8002fcc:	d805      	bhi.n	8002fda <chCoreAllocAlignedWithOffset+0x2a>
 8002fce:	428d      	cmp	r5, r1
 8002fd0:	d803      	bhi.n	8002fda <chCoreAllocAlignedWithOffset+0x2a>
  ch_memcore.nextmem = next;
 8002fd2:	6019      	str	r1, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fd4:	b662      	cpsie	i
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 8002fd6:	0010      	movs	r0, r2
 8002fd8:	bd30      	pop	{r4, r5, pc}
    return NULL;
 8002fda:	2200      	movs	r2, #0
 8002fdc:	e7fa      	b.n	8002fd4 <chCoreAllocAlignedWithOffset+0x24>
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	20000a80 	.word	0x20000a80
	...

08002ff0 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	4a02      	ldr	r2, [pc, #8]	; (8002ffc <notify1+0xc>)
 8002ff4:	6813      	ldr	r3, [r2, #0]
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	6013      	str	r3, [r2, #0]
}
 8002ffa:	4770      	bx	lr
 8002ffc:	40013800 	.word	0x40013800

08003000 <_port_irq_epilogue.part.0>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003000:	b672      	cpsid	i
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003002:	f3ef 8309 	mrs	r3, PSP
    /* The extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8003006:	3b20      	subs	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003008:	f383 8809 	msr	PSP, r3

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	0452      	lsls	r2, r2, #17
 8003010:	61da      	str	r2, [r3, #28]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8003012:	4a06      	ldr	r2, [pc, #24]	; (800302c <_port_irq_epilogue.part.0+0x2c>)
 8003014:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8003016:	6992      	ldr	r2, [r2, #24]

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8003018:	6889      	ldr	r1, [r1, #8]
 800301a:	6892      	ldr	r2, [r2, #8]
 800301c:	4291      	cmp	r1, r2
 800301e:	d802      	bhi.n	8003026 <_port_irq_epilogue.part.0+0x26>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8003020:	4a03      	ldr	r2, [pc, #12]	; (8003030 <_port_irq_epilogue.part.0+0x30>)
 8003022:	619a      	str	r2, [r3, #24]
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
  }
}
 8003024:	4770      	bx	lr
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8003026:	4a03      	ldr	r2, [pc, #12]	; (8003034 <_port_irq_epilogue.part.0+0x34>)
 8003028:	619a      	str	r2, [r3, #24]
 800302a:	e7fb      	b.n	8003024 <_port_irq_epilogue.part.0+0x24>
 800302c:	200008ec 	.word	0x200008ec
 8003030:	080001c8 	.word	0x080001c8
 8003034:	080001c5 	.word	0x080001c5
	...

08003040 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8003040:	b530      	push	{r4, r5, lr}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8003042:	4c0a      	ldr	r4, [pc, #40]	; (800306c <chCoreAllocAlignedI+0x2c>)
  size = MEM_ALIGN_NEXT(size, align);
 8003044:	424b      	negs	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8003046:	6825      	ldr	r5, [r4, #0]
 8003048:	1e6a      	subs	r2, r5, #1
 800304a:	1852      	adds	r2, r2, r1
  size = MEM_ALIGN_NEXT(size, align);
 800304c:	3901      	subs	r1, #1
 800304e:	1809      	adds	r1, r1, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8003050:	401a      	ands	r2, r3
  size = MEM_ALIGN_NEXT(size, align);
 8003052:	4019      	ands	r1, r3
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8003054:	6863      	ldr	r3, [r4, #4]
  next = p + size;
 8003056:	1851      	adds	r1, r2, r1
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8003058:	4299      	cmp	r1, r3
 800305a:	d804      	bhi.n	8003066 <chCoreAllocAlignedI+0x26>
 800305c:	428d      	cmp	r5, r1
 800305e:	d802      	bhi.n	8003066 <chCoreAllocAlignedI+0x26>
  ch_memcore.nextmem = next;
 8003060:	6021      	str	r1, [r4, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8003062:	0010      	movs	r0, r2
 8003064:	bd30      	pop	{r4, r5, pc}
    return NULL;
 8003066:	2200      	movs	r2, #0
 8003068:	e7fb      	b.n	8003062 <chCoreAllocAlignedI+0x22>
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	20000a80 	.word	0x20000a80

08003070 <wakeup>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003070:	b672      	cpsid	i
  switch (tp->state) {
 8003072:	2320      	movs	r3, #32
 8003074:	5cc3      	ldrb	r3, [r0, r3]
 8003076:	2b07      	cmp	r3, #7
 8003078:	d80c      	bhi.n	8003094 <wakeup+0x24>
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <wakeup+0x54>)
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	58d3      	ldr	r3, [r2, r3]
 8003080:	469f      	mov	pc, r3
    chSemFastSignalI(tp->u.wtsemp);
 8003082:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8003084:	6893      	ldr	r3, [r2, #8]
 8003086:	3301      	adds	r3, #1
 8003088:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800308a:	6802      	ldr	r2, [r0, #0]
 800308c:	6843      	ldr	r3, [r0, #4]
 800308e:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8003090:	6802      	ldr	r2, [r0, #0]
 8003092:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 8003094:	2301      	movs	r3, #1
  tp->state = CH_STATE_READY;
 8003096:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8003098:	425b      	negs	r3, r3
 800309a:	6243      	str	r3, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800309c:	3321      	adds	r3, #33	; 0x21
 800309e:	54c2      	strb	r2, [r0, r3]
  } while (cp->prio >= tp->prio);
 80030a0:	6882      	ldr	r2, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <wakeup+0x58>)
    cp = cp->queue.next;
 80030a4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80030a6:	6899      	ldr	r1, [r3, #8]
 80030a8:	4291      	cmp	r1, r2
 80030aa:	d2fb      	bcs.n	80030a4 <wakeup+0x34>
  tp->queue.prev             = cp->queue.prev;
 80030ac:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 80030ae:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 80030b0:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 80030b2:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80030b4:	6058      	str	r0, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80030b6:	b662      	cpsie	i
}
 80030b8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80030ba:	2200      	movs	r2, #0
 80030bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e7e8      	b.n	8003094 <wakeup+0x24>
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	08005160 	.word	0x08005160
 80030c8:	200008ec 	.word	0x200008ec
 80030cc:	00000000 	.word	0x00000000

080030d0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 80030d0:	2320      	movs	r3, #32
 80030d2:	2200      	movs	r2, #0
 80030d4:	54c2      	strb	r2, [r0, r3]
  } while (cp->prio >= tp->prio);
 80030d6:	6882      	ldr	r2, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <chSchReadyI+0x20>)
    cp = cp->queue.next;
 80030da:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80030dc:	6899      	ldr	r1, [r3, #8]
 80030de:	4291      	cmp	r1, r2
 80030e0:	d2fb      	bcs.n	80030da <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 80030e2:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 80030e4:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 80030e6:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 80030e8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80030ea:	6058      	str	r0, [r3, #4]
}
 80030ec:	4770      	bx	lr
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	200008ec 	.word	0x200008ec
	...

08003100 <chEvtBroadcastFlagsI.constprop.13>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003102:	46c6      	mov	lr, r8
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8003104:	4d18      	ldr	r5, [pc, #96]	; (8003168 <chEvtBroadcastFlagsI.constprop.13+0x68>)
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003106:	b500      	push	{lr}
  elp = esp->next;
 8003108:	686c      	ldr	r4, [r5, #4]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800310a:	3504      	adds	r5, #4
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800310c:	0006      	movs	r6, r0
  while (elp != (event_listener_t *)esp) {
 800310e:	42ac      	cmp	r4, r5
 8003110:	d022      	beq.n	8003158 <chEvtBroadcastFlagsI.constprop.13+0x58>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8003112:	2300      	movs	r3, #0
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003114:	2720      	movs	r7, #32
    tp->u.rdymsg = MSG_OK;
 8003116:	4698      	mov	r8, r3
 8003118:	e004      	b.n	8003124 <chEvtBroadcastFlagsI.constprop.13+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800311a:	2a0b      	cmp	r2, #11
 800311c:	d01f      	beq.n	800315e <chEvtBroadcastFlagsI.constprop.13+0x5e>
    elp = elp->next;
 800311e:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8003120:	42ac      	cmp	r4, r5
 8003122:	d019      	beq.n	8003158 <chEvtBroadcastFlagsI.constprop.13+0x58>
    elp->flags |= flags;
 8003124:	68e3      	ldr	r3, [r4, #12]
 8003126:	4333      	orrs	r3, r6
 8003128:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 800312a:	2e00      	cmp	r6, #0
 800312c:	d002      	beq.n	8003134 <chEvtBroadcastFlagsI.constprop.13+0x34>
 800312e:	6922      	ldr	r2, [r4, #16]
 8003130:	421a      	tst	r2, r3
 8003132:	d0f4      	beq.n	800311e <chEvtBroadcastFlagsI.constprop.13+0x1e>
      chEvtSignalI(elp->listener, elp->events);
 8003134:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
 8003136:	68a3      	ldr	r3, [r4, #8]
 8003138:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800313a:	4313      	orrs	r3, r2
 800313c:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800313e:	5dc2      	ldrb	r2, [r0, r7]
 8003140:	2a0a      	cmp	r2, #10
 8003142:	d1ea      	bne.n	800311a <chEvtBroadcastFlagsI.constprop.13+0x1a>
 8003144:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003146:	421a      	tst	r2, r3
 8003148:	d0e9      	beq.n	800311e <chEvtBroadcastFlagsI.constprop.13+0x1e>
    tp->u.rdymsg = MSG_OK;
 800314a:	4643      	mov	r3, r8
 800314c:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800314e:	f7ff ffbf 	bl	80030d0 <chSchReadyI>
    elp = elp->next;
 8003152:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8003154:	42ac      	cmp	r4, r5
 8003156:	d1e5      	bne.n	8003124 <chEvtBroadcastFlagsI.constprop.13+0x24>
}
 8003158:	bc04      	pop	{r2}
 800315a:	4690      	mov	r8, r2
 800315c:	bdf0      	pop	{r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800315e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003160:	4013      	ands	r3, r2
      ((tp->state == CH_STATE_WTANDEVT) &&
 8003162:	429a      	cmp	r2, r3
 8003164:	d1db      	bne.n	800311e <chEvtBroadcastFlagsI.constprop.13+0x1e>
 8003166:	e7f0      	b.n	800314a <chEvtBroadcastFlagsI.constprop.13+0x4a>
 8003168:	20000864 	.word	0x20000864
 800316c:	00000000 	.word	0x00000000

08003170 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8003170:	e7fe      	b.n	8003170 <_idle_thread>
 8003172:	46c0      	nop			; (mov r8, r8)
	...

08003180 <_pal_lld_setgroupmode>:
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8003180:	2303      	movs	r3, #3
                           iomode_t mode) {
 8003182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003184:	4657      	mov	r7, sl
 8003186:	4645      	mov	r5, r8
 8003188:	46de      	mov	lr, fp
 800318a:	464e      	mov	r6, r9
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800318c:	4013      	ands	r3, r2
 800318e:	4699      	mov	r9, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 8003190:	2301      	movs	r3, #1
                           iomode_t mode) {
 8003192:	b5e0      	push	{r5, r6, r7, lr}
    if ((mask & 1) != 0) {
 8003194:	4698      	mov	r8, r3
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8003196:	3306      	adds	r3, #6
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8003198:	0752      	lsls	r2, r2, #29
      altrmask = altr << ((bit & 7) * 4);
 800319a:	469b      	mov	fp, r3
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 800319c:	3b04      	subs	r3, #4
                           iomode_t mode) {
 800319e:	b083      	sub	sp, #12
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 80031a0:	0fd2      	lsrs	r2, r2, #31
  uint32_t bit     = 0;
 80031a2:	2700      	movs	r7, #0
      m2 = 3 << (bit * 2);
 80031a4:	469a      	mov	sl, r3
      m4 = 15 << ((bit & 7) * 4);
 80031a6:	464d      	mov	r5, r9
 80031a8:	e00f      	b.n	80031ca <_pal_lld_setgroupmode+0x4a>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80031aa:	6806      	ldr	r6, [r0, #0]
 80031ac:	4033      	ands	r3, r6
 80031ae:	432b      	orrs	r3, r5
 80031b0:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 80031b2:	2f07      	cmp	r7, #7
 80031b4:	d83f      	bhi.n	8003236 <_pal_lld_setgroupmode+0xb6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80031b6:	6a03      	ldr	r3, [r0, #32]
 80031b8:	9e01      	ldr	r6, [sp, #4]
 80031ba:	401c      	ands	r4, r3
 80031bc:	4326      	orrs	r6, r4
 80031be:	6206      	str	r6, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
 80031c0:	0849      	lsrs	r1, r1, #1
    if (!mask)
 80031c2:	d031      	beq.n	8003228 <_pal_lld_setgroupmode+0xa8>
      return;
    otyper <<= 1;
 80031c4:	0052      	lsls	r2, r2, #1
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 80031c6:	00ad      	lsls	r5, r5, #2
    bit++;
 80031c8:	3701      	adds	r7, #1
    if ((mask & 1) != 0) {
 80031ca:	4643      	mov	r3, r8
 80031cc:	420b      	tst	r3, r1
 80031ce:	d0f7      	beq.n	80031c0 <_pal_lld_setgroupmode+0x40>
      altrmask = altr << ((bit & 7) * 4);
 80031d0:	465c      	mov	r4, fp
 80031d2:	4646      	mov	r6, r8
 80031d4:	403c      	ands	r4, r7
 80031d6:	00a4      	lsls	r4, r4, #2
 80031d8:	40a6      	lsls	r6, r4
 80031da:	9601      	str	r6, [sp, #4]
      m1 = 1 << bit;
 80031dc:	4646      	mov	r6, r8
 80031de:	40be      	lsls	r6, r7
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80031e0:	6843      	ldr	r3, [r0, #4]
 80031e2:	43b3      	bics	r3, r6
      m2 = 3 << (bit * 2);
 80031e4:	4656      	mov	r6, sl
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80031e6:	4313      	orrs	r3, r2
 80031e8:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80031ea:	6883      	ldr	r3, [r0, #8]
 80031ec:	469c      	mov	ip, r3
      m2 = 3 << (bit * 2);
 80031ee:	007b      	lsls	r3, r7, #1
 80031f0:	409e      	lsls	r6, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80031f2:	43f3      	mvns	r3, r6
 80031f4:	4666      	mov	r6, ip
 80031f6:	401e      	ands	r6, r3
 80031f8:	6086      	str	r6, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80031fa:	68c6      	ldr	r6, [r0, #12]
 80031fc:	401e      	ands	r6, r3
 80031fe:	60c6      	str	r6, [r0, #12]
      m4 = 15 << ((bit & 7) * 4);
 8003200:	260f      	movs	r6, #15
 8003202:	40a6      	lsls	r6, r4
 8003204:	43f4      	mvns	r4, r6
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8003206:	464e      	mov	r6, r9
 8003208:	2e02      	cmp	r6, #2
 800320a:	d1ce      	bne.n	80031aa <_pal_lld_setgroupmode+0x2a>
        if (bit < 8)
 800320c:	2f07      	cmp	r7, #7
 800320e:	d818      	bhi.n	8003242 <_pal_lld_setgroupmode+0xc2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8003210:	6a06      	ldr	r6, [r0, #32]
 8003212:	4034      	ands	r4, r6
 8003214:	9e01      	ldr	r6, [sp, #4]
 8003216:	4326      	orrs	r6, r4
 8003218:	6206      	str	r6, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 800321a:	6804      	ldr	r4, [r0, #0]
    mask >>= 1;
 800321c:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 800321e:	4023      	ands	r3, r4
 8003220:	432b      	orrs	r3, r5
 8003222:	6003      	str	r3, [r0, #0]
    if (!mask)
 8003224:	2900      	cmp	r1, #0
 8003226:	d1cd      	bne.n	80031c4 <_pal_lld_setgroupmode+0x44>
  }
}
 8003228:	b003      	add	sp, #12
 800322a:	bc3c      	pop	{r2, r3, r4, r5}
 800322c:	4690      	mov	r8, r2
 800322e:	4699      	mov	r9, r3
 8003230:	46a2      	mov	sl, r4
 8003232:	46ab      	mov	fp, r5
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8003236:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003238:	9e01      	ldr	r6, [sp, #4]
 800323a:	401c      	ands	r4, r3
 800323c:	4326      	orrs	r6, r4
 800323e:	6246      	str	r6, [r0, #36]	; 0x24
 8003240:	e7be      	b.n	80031c0 <_pal_lld_setgroupmode+0x40>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8003242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003244:	4034      	ands	r4, r6
 8003246:	9e01      	ldr	r6, [sp, #4]
 8003248:	4326      	orrs	r6, r4
 800324a:	6246      	str	r6, [r0, #36]	; 0x24
 800324c:	e7e5      	b.n	800321a <_pal_lld_setgroupmode+0x9a>
 800324e:	46c0      	nop			; (mov r8, r8)

08003250 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8003250:	2000      	movs	r0, #0
 8003252:	4770      	bx	lr
	...

08003260 <dmaStreamAllocate.constprop.22>:
 * @retval false        no error, stream taken.
 * @retval true         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8003260:	b5f0      	push	{r4, r5, r6, r7, lr}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma.streams_mask & (1U << dmastp->selfindex)) != 0U)
 8003262:	2401      	movs	r4, #1
 8003264:	0026      	movs	r6, r4
 8003266:	7c42      	ldrb	r2, [r0, #17]
 8003268:	4d12      	ldr	r5, [pc, #72]	; (80032b4 <dmaStreamAllocate.constprop.22+0x54>)
 800326a:	4096      	lsls	r6, r2
 800326c:	0037      	movs	r7, r6
 800326e:	682b      	ldr	r3, [r5, #0]
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8003270:	0001      	movs	r1, r0
  if ((dma.streams_mask & (1U << dmastp->selfindex)) != 0U)
 8003272:	401f      	ands	r7, r3
    return true;
 8003274:	2001      	movs	r0, #1
  if ((dma.streams_mask & (1U << dmastp->selfindex)) != 0U)
 8003276:	2f00      	cmp	r7, #0
 8003278:	d115      	bne.n	80032a6 <dmaStreamAllocate.constprop.22+0x46>

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800327a:	480f      	ldr	r0, [pc, #60]	; (80032b8 <dmaStreamAllocate.constprop.22+0x58>)
 800327c:	00d2      	lsls	r2, r2, #3
 800327e:	5017      	str	r7, [r2, r0]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8003280:	1882      	adds	r2, r0, r2
 8003282:	480e      	ldr	r0, [pc, #56]	; (80032bc <dmaStreamAllocate.constprop.22+0x5c>)
 8003284:	6050      	str	r0, [r2, #4]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8003286:	06da      	lsls	r2, r3, #27
 8003288:	d00e      	beq.n	80032a8 <dmaStreamAllocate.constprop.22+0x48>
    rccEnableDMA2(true);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800328a:	240f      	movs	r4, #15
 800328c:	684a      	ldr	r2, [r1, #4]
    }
    dma.isr_mask |= (1U << dmastp->selfindex);
  }

  /* Marks the stream as allocated.*/
  dma.streams_mask |= (1U << dmastp->selfindex);
 800328e:	4333      	orrs	r3, r6
  dmaStreamDisable(dmastp);
 8003290:	6810      	ldr	r0, [r2, #0]
 8003292:	43a0      	bics	r0, r4
 8003294:	6010      	str	r0, [r2, #0]
 8003296:	7c0c      	ldrb	r4, [r1, #16]
 8003298:	6808      	ldr	r0, [r1, #0]
 800329a:	210e      	movs	r1, #14
 800329c:	40a1      	lsls	r1, r4
 800329e:	6041      	str	r1, [r0, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80032a0:	2000      	movs	r0, #0
  dma.streams_mask |= (1U << dmastp->selfindex);
 80032a2:	602b      	str	r3, [r5, #0]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80032a4:	6010      	str	r0, [r2, #0]

  return false;
}
 80032a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rccEnableDMA1(true);
 80032a8:	4a05      	ldr	r2, [pc, #20]	; (80032c0 <dmaStreamAllocate.constprop.22+0x60>)
 80032aa:	6950      	ldr	r0, [r2, #20]
 80032ac:	4304      	orrs	r4, r0
 80032ae:	6154      	str	r4, [r2, #20]
 80032b0:	e7eb      	b.n	800328a <dmaStreamAllocate.constprop.22+0x2a>
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	20000aa4 	.word	0x20000aa4
 80032b8:	200008c4 	.word	0x200008c4
 80032bc:	20000830 	.word	0x20000830
 80032c0:	40021000 	.word	0x40021000
	...

080032d0 <chSchWakeupS.constprop.7>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80032d0:	b570      	push	{r4, r5, r6, lr}
  ntp->u.rdymsg = msg;
 80032d2:	2500      	movs	r5, #0
  thread_t *otp = currp;
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <chSchWakeupS.constprop.7+0x50>)
  if (ntp->prio <= otp->prio) {
 80032d6:	6882      	ldr	r2, [r0, #8]
  thread_t *otp = currp;
 80032d8:	6999      	ldr	r1, [r3, #24]
  ntp->u.rdymsg = msg;
 80032da:	6245      	str	r5, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80032dc:	688c      	ldr	r4, [r1, #8]
 80032de:	42a2      	cmp	r2, r4
 80032e0:	d80b      	bhi.n	80032fa <chSchWakeupS.constprop.7+0x2a>
  tp->state = CH_STATE_READY;
 80032e2:	2120      	movs	r1, #32
 80032e4:	5445      	strb	r5, [r0, r1]
    cp = cp->queue.next;
 80032e6:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	428a      	cmp	r2, r1
 80032ec:	d9fb      	bls.n	80032e6 <chSchWakeupS.constprop.7+0x16>
  tp->queue.prev             = cp->queue.prev;
 80032ee:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 80032f0:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 80032f2:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 80032f4:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80032f6:	6058      	str	r0, [r3, #4]
}
 80032f8:	bd70      	pop	{r4, r5, r6, pc}
  tp->state = CH_STATE_READY;
 80032fa:	2220      	movs	r2, #32
 80032fc:	548d      	strb	r5, [r1, r2]
  cp = (thread_t *)&ch.rlist.queue;
 80032fe:	001a      	movs	r2, r3
    cp = cp->queue.next;
 8003300:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8003302:	6895      	ldr	r5, [r2, #8]
 8003304:	42ac      	cmp	r4, r5
 8003306:	d9fb      	bls.n	8003300 <chSchWakeupS.constprop.7+0x30>
  tp->queue.prev             = cp->queue.prev;
 8003308:	6854      	ldr	r4, [r2, #4]
  tp->queue.next             = cp;
 800330a:	600a      	str	r2, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 800330c:	604c      	str	r4, [r1, #4]
  tp->queue.prev->queue.next = tp;
 800330e:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 8003310:	6051      	str	r1, [r2, #4]
    currp = ntp;
 8003312:	6198      	str	r0, [r3, #24]
    ntp->state = CH_STATE_CURRENT;
 8003314:	2201      	movs	r2, #1
 8003316:	2320      	movs	r3, #32
 8003318:	54c2      	strb	r2, [r0, r3]
    chSysSwitch(ntp, otp);
 800331a:	f7fc ff3d 	bl	8000198 <_port_switch>
 800331e:	e7eb      	b.n	80032f8 <chSchWakeupS.constprop.7+0x28>
 8003320:	200008ec 	.word	0x200008ec
	...

08003330 <chSchGoSleepS>:
  otp->state = newstate;
 8003330:	2220      	movs	r2, #32
  thread_t *otp = currp;
 8003332:	4b07      	ldr	r3, [pc, #28]	; (8003350 <chSchGoSleepS+0x20>)
void chSchGoSleepS(tstate_t newstate) {
 8003334:	b510      	push	{r4, lr}
  thread_t *otp = currp;
 8003336:	6999      	ldr	r1, [r3, #24]
  otp->state = newstate;
 8003338:	5488      	strb	r0, [r1, r2]
  thread_t *tp = tqp->next;
 800333a:	6818      	ldr	r0, [r3, #0]
  tqp->next             = tp->queue.next;
 800333c:	6804      	ldr	r4, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800333e:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
 8003340:	601c      	str	r4, [r3, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003342:	6198      	str	r0, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 8003344:	2301      	movs	r3, #1
 8003346:	5483      	strb	r3, [r0, r2]
  chSysSwitch(currp, otp);
 8003348:	f7fc ff26 	bl	8000198 <_port_switch>
}
 800334c:	bd10      	pop	{r4, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	200008ec 	.word	0x200008ec
	...

08003360 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8003360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003362:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8003364:	1c4b      	adds	r3, r1, #1
 8003366:	d05e      	beq.n	8003426 <chSchGoSleepTimeoutS+0xc6>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8003368:	4c42      	ldr	r4, [pc, #264]	; (8003474 <chSchGoSleepTimeoutS+0x114>)
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 800336a:	ad01      	add	r5, sp, #4
 800336c:	69a3      	ldr	r3, [r4, #24]
 800336e:	612b      	str	r3, [r5, #16]
  vtp->func = vtfunc;
 8003370:	4b41      	ldr	r3, [pc, #260]	; (8003478 <chSchGoSleepTimeoutS+0x118>)
 8003372:	60eb      	str	r3, [r5, #12]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	05db      	lsls	r3, r3, #23
 8003378:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800337a:	2902      	cmp	r1, #2
 800337c:	d337      	bcc.n	80033ee <chSchGoSleepTimeoutS+0x8e>
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800337e:	0022      	movs	r2, r4
 8003380:	69e3      	ldr	r3, [r4, #28]
 8003382:	321c      	adds	r2, #28
 8003384:	4293      	cmp	r3, r2
 8003386:	d038      	beq.n	80033fa <chSchGoSleepTimeoutS+0x9a>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8003388:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800338a:	689a      	ldr	r2, [r3, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800338c:	1bf6      	subs	r6, r6, r7
 800338e:	1871      	adds	r1, r6, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8003390:	428e      	cmp	r6, r1
 8003392:	d941      	bls.n	8003418 <chSchGoSleepTimeoutS+0xb8>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 8003394:	681b      	ldr	r3, [r3, #0]
      delta -= p->delta;
 8003396:	1a89      	subs	r1, r1, r2
 8003398:	689a      	ldr	r2, [r3, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 800339a:	4291      	cmp	r1, r2
 800339c:	d8fa      	bhi.n	8003394 <chSchGoSleepTimeoutS+0x34>
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 800339e:	685a      	ldr	r2, [r3, #4]
  vtp->next = p;
 80033a0:	9301      	str	r3, [sp, #4]
  vtp->prev = vtp->next->prev;
 80033a2:	606a      	str	r2, [r5, #4]
  vtp->prev->next = vtp;
 80033a4:	6015      	str	r5, [r2, #0]
  p->prev = vtp;
 80033a6:	605d      	str	r5, [r3, #4]
  vtp->delta = delta;
 80033a8:	60a9      	str	r1, [r5, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	1a51      	subs	r1, r2, r1
 80033ae:	6099      	str	r1, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 80033b0:	2301      	movs	r3, #1
 80033b2:	425b      	negs	r3, r3
 80033b4:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 80033b6:	f7ff ffbb 	bl	8003330 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80033ba:	9b04      	ldr	r3, [sp, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d012      	beq.n	80033e6 <chSchGoSleepTimeoutS+0x86>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80033c0:	69e2      	ldr	r2, [r4, #28]
 80033c2:	9b01      	ldr	r3, [sp, #4]
 80033c4:	42aa      	cmp	r2, r5
 80033c6:	d032      	beq.n	800342e <chSchGoSleepTimeoutS+0xce>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80033c8:	686a      	ldr	r2, [r5, #4]
 80033ca:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 80033cc:	9b01      	ldr	r3, [sp, #4]
 80033ce:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 80033d0:	2200      	movs	r2, #0
 80033d2:	60ea      	str	r2, [r5, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80033d4:	0022      	movs	r2, r4
 80033d6:	321c      	adds	r2, #28
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <chSchGoSleepTimeoutS+0x86>
      vtp->next->delta += vtp->delta;
 80033dc:	6899      	ldr	r1, [r3, #8]
 80033de:	68aa      	ldr	r2, [r5, #8]
 80033e0:	468c      	mov	ip, r1
 80033e2:	4462      	add	r2, ip
 80033e4:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 80033e6:	69a3      	ldr	r3, [r4, #24]
 80033e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 80033ea:	b007      	add	sp, #28
 80033ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80033ee:	0022      	movs	r2, r4
 80033f0:	69e3      	ldr	r3, [r4, #28]
 80033f2:	321c      	adds	r2, #28
 80033f4:	2102      	movs	r1, #2
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d1c6      	bne.n	8003388 <chSchGoSleepTimeoutS+0x28>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 80033fa:	9301      	str	r3, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80033fc:	606b      	str	r3, [r5, #4]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80033fe:	2380      	movs	r3, #128	; 0x80
  STM32_ST_TIM->SR     = 0;
 8003400:	2200      	movs	r2, #0
      vtp->delta = delay;
 8003402:	60a9      	str	r1, [r5, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003404:	05db      	lsls	r3, r3, #23
  return systime + (systime_t)interval;
 8003406:	1871      	adds	r1, r6, r1
      ch.vtlist.lasttime = now;
 8003408:	62a6      	str	r6, [r4, #40]	; 0x28
      ch.vtlist.next = vtp;
 800340a:	61e5      	str	r5, [r4, #28]
      ch.vtlist.prev = vtp;
 800340c:	6225      	str	r5, [r4, #32]
 800340e:	6359      	str	r1, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8003410:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003412:	3202      	adds	r2, #2
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	e7ce      	b.n	80033b6 <chSchGoSleepTimeoutS+0x56>
    else if (delta < p->delta) {
 8003418:	4291      	cmp	r1, r2
 800341a:	d2be      	bcs.n	800339a <chSchGoSleepTimeoutS+0x3a>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800341c:	2680      	movs	r6, #128	; 0x80
 800341e:	187f      	adds	r7, r7, r1
 8003420:	05f6      	lsls	r6, r6, #23
 8003422:	6377      	str	r7, [r6, #52]	; 0x34
 8003424:	e7b9      	b.n	800339a <chSchGoSleepTimeoutS+0x3a>
    chSchGoSleepS(newstate);
 8003426:	f7ff ff83 	bl	8003330 <chSchGoSleepS>
 800342a:	4c12      	ldr	r4, [pc, #72]	; (8003474 <chSchGoSleepTimeoutS+0x114>)
 800342c:	e7db      	b.n	80033e6 <chSchGoSleepTimeoutS+0x86>
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 800342e:	0022      	movs	r2, r4
  vtp->func = NULL;
 8003430:	2100      	movs	r1, #0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8003432:	321c      	adds	r2, #28
  ch.vtlist.next = vtp->next;
 8003434:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8003436:	605a      	str	r2, [r3, #4]
  vtp->func = NULL;
 8003438:	60e9      	str	r1, [r5, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800343a:	4293      	cmp	r3, r2
 800343c:	d015      	beq.n	800346a <chSchGoSleepTimeoutS+0x10a>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 800343e:	6899      	ldr	r1, [r3, #8]
 8003440:	68aa      	ldr	r2, [r5, #8]
 8003442:	468c      	mov	ip, r1
 8003444:	4462      	add	r2, ip
 8003446:	609a      	str	r2, [r3, #8]
  return (systime_t)STM32_ST_TIM->CNT;
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	05db      	lsls	r3, r3, #23
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 800344c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8003450:	1a5b      	subs	r3, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8003452:	429a      	cmp	r2, r3
 8003454:	d9c7      	bls.n	80033e6 <chSchGoSleepTimeoutS+0x86>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8003456:	1ad0      	subs	r0, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8003458:	2801      	cmp	r0, #1
 800345a:	d904      	bls.n	8003466 <chSchGoSleepTimeoutS+0x106>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800345c:	2380      	movs	r3, #128	; 0x80
  return systime + (systime_t)interval;
 800345e:	188a      	adds	r2, r1, r2
 8003460:	05db      	lsls	r3, r3, #23
 8003462:	635a      	str	r2, [r3, #52]	; 0x34
 8003464:	e7bf      	b.n	80033e6 <chSchGoSleepTimeoutS+0x86>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8003466:	1c9a      	adds	r2, r3, #2
 8003468:	e7f8      	b.n	800345c <chSchGoSleepTimeoutS+0xfc>
  STM32_ST_TIM->DIER = 0;
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	60d9      	str	r1, [r3, #12]
 8003470:	e7b9      	b.n	80033e6 <chSchGoSleepTimeoutS+0x86>
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	200008ec 	.word	0x200008ec
 8003478:	08003071 	.word	0x08003071
 800347c:	00000000 	.word	0x00000000

08003480 <i2cMasterTransmitTimeout.constprop.17>:
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 *
 * @api
 */
msg_t i2cMasterTransmitTimeout(I2CDriver *i2cp,
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8003482:	b672      	cpsid	i
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8003484:	2500      	movs	r5, #0
 8003486:	4c3b      	ldr	r4, [pc, #236]	; (8003574 <i2cMasterTransmitTimeout.constprop.17+0xf4>)
 8003488:	60a5      	str	r5, [r4, #8]
  i2cp->state = I2C_ACTIVE_TX;
 800348a:	3503      	adds	r5, #3
 800348c:	7025      	strb	r5, [r4, #0]
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      sysinterval_t timeout) {
  msg_t msg;
  I2C_TypeDef *dp = i2cp->i2c;
 800348e:	6b25      	ldr	r5, [r4, #48]	; 0x30
  __ASM volatile ("cpsie i" : : : "memory");
 8003490:	b662      	cpsie	i
  /* Releases the lock from high level driver.*/
  osalSysUnlock();

#if STM32_I2C_USE_DMA == TRUE
  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8003492:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003494:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003496:	6876      	ldr	r6, [r6, #4]
 8003498:	6037      	str	r7, [r6, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 800349a:	60f0      	str	r0, [r6, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 800349c:	6071      	str	r1, [r6, #4]

  /* RX DMA setup, note, rxbytes can be zero but we write the value anyway.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800349e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80034a0:	6a20      	ldr	r0, [r4, #32]
 80034a2:	6849      	ldr	r1, [r1, #4]
 80034a4:	6008      	str	r0, [r1, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 80034a6:	60ca      	str	r2, [r1, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 80034a8:	2280      	movs	r2, #128	; 0x80
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 80034aa:	604b      	str	r3, [r1, #4]
 80034ac:	05d2      	lsls	r2, r2, #23
 80034ae:	6a56      	ldr	r6, [r2, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80034b0:	b672      	cpsid	i
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if ((dp->ISR & I2C_ISR_BUSY) == 0)
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	69ab      	ldr	r3, [r5, #24]
 80034b6:	0209      	lsls	r1, r1, #8
 80034b8:	420b      	tst	r3, r1
 80034ba:	d00f      	beq.n	80034dc <i2cMasterTransmitTimeout.constprop.17+0x5c>
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 80034bc:	20f4      	movs	r0, #244	; 0xf4
 80034be:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80034c0:	30ff      	adds	r0, #255	; 0xff
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((time - start) < (end - start));
 80034c2:	1b9b      	subs	r3, r3, r6
 80034c4:	4283      	cmp	r3, r0
 80034c6:	d904      	bls.n	80034d2 <i2cMasterTransmitTimeout.constprop.17+0x52>
 80034c8:	e040      	b.n	800354c <i2cMasterTransmitTimeout.constprop.17+0xcc>
 80034ca:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80034cc:	1b9b      	subs	r3, r3, r6
 80034ce:	4283      	cmp	r3, r0
 80034d0:	d83c      	bhi.n	800354c <i2cMasterTransmitTimeout.constprop.17+0xcc>
  __ASM volatile ("cpsie i" : : : "memory");
 80034d2:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 80034d4:	b672      	cpsid	i
    if ((dp->ISR & I2C_ISR_BUSY) == 0)
 80034d6:	69ab      	ldr	r3, [r5, #24]
 80034d8:	420b      	tst	r3, r1
 80034da:	d1f6      	bne.n	80034ca <i2cMasterTransmitTimeout.constprop.17+0x4a>
  if ((i2cp->config->cr2 & I2C_CR2_ADD10) == 0U)
 80034dc:	6863      	ldr	r3, [r4, #4]
 80034de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80034e0:	689e      	ldr	r6, [r3, #8]
 80034e2:	0533      	lsls	r3, r6, #20
 80034e4:	d538      	bpl.n	8003558 <i2cMasterTransmitTimeout.constprop.17+0xd8>
    dp->CR2 = (uint32_t)addr;
 80034e6:	236a      	movs	r3, #106	; 0x6a
 80034e8:	6043      	str	r3, [r0, #4]
  n = i2c_lld_get_txbytes(i2cp);
 80034ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	684a      	ldr	r2, [r1, #4]
  if (n > 255U) {
 80034f0:	2aff      	cmp	r2, #255	; 0xff
 80034f2:	d838      	bhi.n	8003566 <i2cMasterTransmitTimeout.constprop.17+0xe6>
    reload = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	469c      	mov	ip, r3
 80034f8:	0412      	lsls	r2, r2, #16
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 80034fa:	6843      	ldr	r3, [r0, #4]
 80034fc:	4f1e      	ldr	r7, [pc, #120]	; (8003578 <i2cMasterTransmitTimeout.constprop.17+0xf8>)
 80034fe:	403b      	ands	r3, r7
            (n << 16U) | reload;
 8003500:	4333      	orrs	r3, r6
 8003502:	4313      	orrs	r3, r2
 8003504:	4662      	mov	r2, ip
 8003506:	4313      	orrs	r3, r2
  /* Preparing the transfer.*/
  i2c_lld_setup_tx_transfer(i2cp);

#if STM32_I2C_USE_DMA == TRUE
  /* Enabling TX DMA.*/
  dmaStreamEnable(i2cp->dmatx);
 8003508:	2201      	movs	r2, #1
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 800350a:	6043      	str	r3, [r0, #4]
  dmaStreamEnable(i2cp->dmatx);
 800350c:	680b      	ldr	r3, [r1, #0]
  }

  *trp = tp;
  tp->u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800350e:	2003      	movs	r0, #3
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]

  /* Transfer complete interrupt enabled.*/
  dp->CR1 |= I2C_CR1_TCIE;
 8003514:	682b      	ldr	r3, [r5, #0]
 8003516:	323f      	adds	r2, #63	; 0x3f
 8003518:	4313      	orrs	r3, r2
 800351a:	602b      	str	r3, [r5, #0]
  /* Transfer complete and TX interrupts enabled.*/
  dp->CR1 |= I2C_CR1_TCIE | I2C_CR1_TXIE;
#endif

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_START;
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	686a      	ldr	r2, [r5, #4]
 8003520:	019b      	lsls	r3, r3, #6
 8003522:	4313      	orrs	r3, r2
  tp->u.wttrp = trp;
 8003524:	0022      	movs	r2, r4
 8003526:	606b      	str	r3, [r5, #4]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8003528:	4b14      	ldr	r3, [pc, #80]	; (800357c <i2cMasterTransmitTimeout.constprop.17+0xfc>)
 800352a:	321c      	adds	r2, #28
 800352c:	699b      	ldr	r3, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800352e:	4914      	ldr	r1, [pc, #80]	; (8003580 <i2cMasterTransmitTimeout.constprop.17+0x100>)
  *trp = tp;
 8003530:	61e3      	str	r3, [r4, #28]
  tp->u.wttrp = trp;
 8003532:	625a      	str	r2, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8003534:	f7ff ff14 	bl	8003360 <chSchGoSleepTimeoutS>
  /* Waits for the operation completion or a timeout.*/
  msg = osalThreadSuspendTimeoutS(&i2cp->thread, timeout);

  /* In case of a software timeout a STOP is sent as an extreme attempt
     to release the bus.*/
  if (msg == MSG_TIMEOUT) {
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d002      	beq.n	8003542 <i2cMasterTransmitTimeout.constprop.17+0xc2>
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 800353c:	2302      	movs	r3, #2
 800353e:	7023      	strb	r3, [r4, #0]
 8003540:	e008      	b.n	8003554 <i2cMasterTransmitTimeout.constprop.17+0xd4>
    dp->CR2 |= I2C_CR2_STOP;
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	686a      	ldr	r2, [r5, #4]
 8003546:	01db      	lsls	r3, r3, #7
 8003548:	4313      	orrs	r3, r2
 800354a:	606b      	str	r3, [r5, #4]
    i2cp->state = I2C_LOCKED;
 800354c:	2305      	movs	r3, #5
 800354e:	2001      	movs	r0, #1
 8003550:	7023      	strb	r3, [r4, #0]
 8003552:	4240      	negs	r0, r0
  __ASM volatile ("cpsie i" : : : "memory");
 8003554:	b662      	cpsie	i
  }
  osalSysUnlock();
  return rdymsg;
}
 8003556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dp->CR2 = (uint32_t)addr << 1U;
 8003558:	23d4      	movs	r3, #212	; 0xd4
 800355a:	6043      	str	r3, [r0, #4]
  n = i2c_lld_get_txbytes(i2cp);
 800355c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	684a      	ldr	r2, [r1, #4]
  if (n > 255U) {
 8003562:	2aff      	cmp	r2, #255	; 0xff
 8003564:	d9c6      	bls.n	80034f4 <i2cMasterTransmitTimeout.constprop.17+0x74>
    reload = I2C_CR2_RELOAD;
 8003566:	2380      	movs	r3, #128	; 0x80
  if (n > 255U) {
 8003568:	22ff      	movs	r2, #255	; 0xff
    reload = I2C_CR2_RELOAD;
 800356a:	045b      	lsls	r3, r3, #17
  if (n > 255U) {
 800356c:	0412      	lsls	r2, r2, #16
    reload = I2C_CR2_RELOAD;
 800356e:	469c      	mov	ip, r3
 8003570:	e7c3      	b.n	80034fa <i2cMasterTransmitTimeout.constprop.17+0x7a>
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	20000830 	.word	0x20000830
 8003578:	fe00ffff 	.word	0xfe00ffff
 800357c:	200008ec 	.word	0x200008ec
 8003580:	00002710 	.word	0x00002710
	...

08003590 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8003590:	b510      	push	{r4, lr}

  if (TIME_IMMEDIATE == timeout) {
 8003592:	2900      	cmp	r1, #0
 8003594:	d00a      	beq.n	80035ac <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8003596:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <chThdEnqueueTimeoutS+0x24>)
  tp->queue.prev             = tqp->prev;
 8003598:	6842      	ldr	r2, [r0, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
  tp->queue.next             = (thread_t *)tqp;
 800359c:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = tqp->prev;
 800359e:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80035a0:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 80035a2:	6043      	str	r3, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80035a4:	2004      	movs	r0, #4
 80035a6:	f7ff fedb 	bl	8003360 <chSchGoSleepTimeoutS>
}
 80035aa:	bd10      	pop	{r4, pc}
    return MSG_TIMEOUT;
 80035ac:	2001      	movs	r0, #1
 80035ae:	4240      	negs	r0, r0
 80035b0:	e7fb      	b.n	80035aa <chThdEnqueueTimeoutS+0x1a>
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	200008ec 	.word	0x200008ec
	...

080035c0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	0004      	movs	r4, r0
 80035c4:	000e      	movs	r6, r1
 80035c6:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
 80035c8:	b672      	cpsid	i
 80035ca:	e005      	b.n	80035d8 <oqPutTimeout+0x18>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 80035cc:	0029      	movs	r1, r5
 80035ce:	0020      	movs	r0, r4
 80035d0:	f7ff ffde 	bl	8003590 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 80035d4:	2800      	cmp	r0, #0
 80035d6:	db17      	blt.n	8003608 <oqPutTimeout+0x48>
  while (oqIsFullI(oqp)) {
 80035d8:	68a3      	ldr	r3, [r4, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f6      	beq.n	80035cc <oqPutTimeout+0xc>
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 80035de:	68a3      	ldr	r3, [r4, #8]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80035e4:	6963      	ldr	r3, [r4, #20]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	6162      	str	r2, [r4, #20]
 80035ea:	701e      	strb	r6, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80035ec:	6963      	ldr	r3, [r4, #20]
 80035ee:	6922      	ldr	r2, [r4, #16]
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d301      	bcc.n	80035f8 <oqPutTimeout+0x38>
    oqp->q_wrptr = oqp->q_buffer;
 80035f4:	68e3      	ldr	r3, [r4, #12]
 80035f6:	6163      	str	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80035f8:	69e3      	ldr	r3, [r4, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 80035fe:	0020      	movs	r0, r4
 8003600:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
 8003602:	b662      	cpsie	i
 8003604:	2000      	movs	r0, #0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	b662      	cpsie	i
 800360a:	e7fc      	b.n	8003606 <oqPutTimeout+0x46>
 800360c:	0000      	movs	r0, r0
	...

08003610 <_putt>:
static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8003610:	b510      	push	{r4, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003612:	3030      	adds	r0, #48	; 0x30
 8003614:	f7ff ffd4 	bl	80035c0 <oqPutTimeout>
}
 8003618:	bd10      	pop	{r4, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	0000      	movs	r0, r0
	...

08003620 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003620:	2201      	movs	r2, #1
static msg_t _put(void *ip, uint8_t b) {
 8003622:	b510      	push	{r4, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003624:	3030      	adds	r0, #48	; 0x30
 8003626:	4252      	negs	r2, r2
 8003628:	f7ff ffca 	bl	80035c0 <oqPutTimeout>
}
 800362c:	bd10      	pop	{r4, pc}
 800362e:	46c0      	nop			; (mov r8, r8)

08003630 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	0004      	movs	r4, r0
 8003634:	000d      	movs	r5, r1
  __ASM volatile ("cpsid i" : : : "memory");
 8003636:	b672      	cpsid	i
 8003638:	e005      	b.n	8003646 <iqGetTimeout+0x16>
 800363a:	0029      	movs	r1, r5
 800363c:	0020      	movs	r0, r4
 800363e:	f7ff ffa7 	bl	8003590 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8003642:	2800      	cmp	r0, #0
 8003644:	db16      	blt.n	8003674 <iqGetTimeout+0x44>
  while (iqIsEmptyI(iqp)) {
 8003646:	68a3      	ldr	r3, [r4, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f6      	beq.n	800363a <iqGetTimeout+0xa>
  iqp->q_counter--;
 800364c:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800364e:	69a2      	ldr	r2, [r4, #24]
  iqp->q_counter--;
 8003650:	3b01      	subs	r3, #1
 8003652:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8003654:	1c53      	adds	r3, r2, #1
 8003656:	61a3      	str	r3, [r4, #24]
 8003658:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 800365a:	6922      	ldr	r2, [r4, #16]
 800365c:	4293      	cmp	r3, r2
 800365e:	d301      	bcc.n	8003664 <iqGetTimeout+0x34>
    iqp->q_rdptr = iqp->q_buffer;
 8003660:	68e3      	ldr	r3, [r4, #12]
 8003662:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8003664:	69e3      	ldr	r3, [r4, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <iqGetTimeout+0x3e>
    iqp->q_notify(iqp);
 800366a:	0020      	movs	r0, r4
 800366c:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
 800366e:	b662      	cpsie	i
  return (msg_t)b;
 8003670:	0028      	movs	r0, r5
}
 8003672:	bd70      	pop	{r4, r5, r6, pc}
 8003674:	b662      	cpsie	i
 8003676:	e7fc      	b.n	8003672 <iqGetTimeout+0x42>
	...

08003680 <_gett>:
static msg_t _gett(void *ip, sysinterval_t timeout) {
 8003680:	b510      	push	{r4, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8003682:	300c      	adds	r0, #12
 8003684:	f7ff ffd4 	bl	8003630 <iqGetTimeout>
}
 8003688:	bd10      	pop	{r4, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	0000      	movs	r0, r0
	...

08003690 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003690:	2101      	movs	r1, #1
static msg_t _get(void *ip) {
 8003692:	b510      	push	{r4, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003694:	300c      	adds	r0, #12
 8003696:	4249      	negs	r1, r1
 8003698:	f7ff ffca 	bl	8003630 <iqGetTimeout>
}
 800369c:	bd10      	pop	{r4, pc}
 800369e:	46c0      	nop			; (mov r8, r8)

080036a0 <ThreadIMU>:
/*
 * IMU thread
 */
static THD_WORKING_AREA(waThreadIMU,128);
static THD_FUNCTION(ThreadIMU,arg)
{
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	46de      	mov	lr, fp
 80036a4:	464e      	mov	r6, r9
 80036a6:	4645      	mov	r5, r8
 80036a8:	4657      	mov	r7, sl
 80036aa:	b5e0      	push	{r5, r6, r7, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80036ac:	4b8b      	ldr	r3, [pc, #556]	; (80038dc <ThreadIMU+0x23c>)
 80036ae:	4a8c      	ldr	r2, [pc, #560]	; (80038e0 <ThreadIMU+0x240>)
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	b087      	sub	sp, #28
 80036b4:	619a      	str	r2, [r3, #24]
  msg_t msg;
  uint8_t CTRL1_XL_SETUP = CTRL1_XL_ODR_104Hz \
                         | CTRL1_XL_FS_2g     \
                         | CTRL1_XL_BW_200Hz;

  uint8_t cmd[] = {CTRL1_XL, CTRL1_XL_SETUP};
 80036b6:	4b8b      	ldr	r3, [pc, #556]	; (80038e4 <ThreadIMU+0x244>)
 80036b8:	ac05      	add	r4, sp, #20
 80036ba:	8023      	strh	r3, [r4, #0]
}

msg_t writeRegister(uint8_t *cmd, size_t cmdLen)
{
  msg_t msg;
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, cmdLen, NULL, 0, 10000);
 80036bc:	2200      	movs	r2, #0
 80036be:	2300      	movs	r3, #0
 80036c0:	2102      	movs	r1, #2
 80036c2:	0020      	movs	r0, r4
 80036c4:	f7ff fedc 	bl	8003480 <i2cMasterTransmitTimeout.constprop.17>
 80036c8:	ad03      	add	r5, sp, #12
 80036ca:	ae04      	add	r6, sp, #16
  return msg;
}

uint16_t readAccelX(void)
{
  uint8_t lowData[] = {0};
 80036cc:	2300      	movs	r3, #0
 80036ce:	4699      	mov	r9, r3
 80036d0:	702b      	strb	r3, [r5, #0]
  uint8_t highData[] = {0};
 80036d2:	7033      	strb	r3, [r6, #0]
  uint16_t accelX;

  uint8_t cmd[] = {OUTX_L_XL};
 80036d4:	2328      	movs	r3, #40	; 0x28
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, 1, data, dataLen, 10000);
 80036d6:	002a      	movs	r2, r5
  uint8_t cmd[] = {OUTX_L_XL};
 80036d8:	7023      	strb	r3, [r4, #0]
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, 1, data, dataLen, 10000);
 80036da:	2101      	movs	r1, #1
 80036dc:	3b27      	subs	r3, #39	; 0x27
 80036de:	0020      	movs	r0, r4
 80036e0:	f7ff fece 	bl	8003480 <i2cMasterTransmitTimeout.constprop.17>
  readRegister(cmd, lowData, sizeof(lowData));

  cmd[0] = OUTX_H_XL;
 80036e4:	2329      	movs	r3, #41	; 0x29
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, 1, data, dataLen, 10000);
 80036e6:	0032      	movs	r2, r6
  cmd[0] = OUTX_H_XL;
 80036e8:	7023      	strb	r3, [r4, #0]
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, 1, data, dataLen, 10000);
 80036ea:	2101      	movs	r1, #1
 80036ec:	3b28      	subs	r3, #40	; 0x28
 80036ee:	0020      	movs	r0, r4
 80036f0:	f7ff fec6 	bl	8003480 <i2cMasterTransmitTimeout.constprop.17>
  readRegister(cmd, highData, sizeof(highData));

  accelX = highData[0]<<8 | lowData[0];
 80036f4:	7832      	ldrb	r2, [r6, #0]
 80036f6:	782b      	ldrb	r3, [r5, #0]
 80036f8:	0212      	lsls	r2, r2, #8
 80036fa:	4313      	orrs	r3, r2
 80036fc:	b21b      	sxth	r3, r3
 80036fe:	4698      	mov	r8, r3
 8003700:	b29b      	uxth	r3, r3
 8003702:	469b      	mov	fp, r3
}


uint16_t readAccelY(void)
{
  uint8_t lowData[] = {0};
 8003704:	464b      	mov	r3, r9
 8003706:	702b      	strb	r3, [r5, #0]
  uint8_t highData[] = {0};
 8003708:	7033      	strb	r3, [r6, #0]
  uint16_t accelY;

  uint8_t cmd[] = {OUTY_L_XL};
 800370a:	232a      	movs	r3, #42	; 0x2a
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, 1, data, dataLen, 10000);
 800370c:	002a      	movs	r2, r5
  uint8_t cmd[] = {OUTY_L_XL};
 800370e:	7023      	strb	r3, [r4, #0]
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, 1, data, dataLen, 10000);
 8003710:	2101      	movs	r1, #1
 8003712:	3b29      	subs	r3, #41	; 0x29
 8003714:	0020      	movs	r0, r4
 8003716:	f7ff feb3 	bl	8003480 <i2cMasterTransmitTimeout.constprop.17>
  readRegister(cmd, lowData, sizeof(lowData));

  cmd[0] = OUTY_H_XL;
 800371a:	232b      	movs	r3, #43	; 0x2b
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, 1, data, dataLen, 10000);
 800371c:	0032      	movs	r2, r6
  cmd[0] = OUTY_H_XL;
 800371e:	7023      	strb	r3, [r4, #0]
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, 1, data, dataLen, 10000);
 8003720:	2101      	movs	r1, #1
 8003722:	3b2a      	subs	r3, #42	; 0x2a
 8003724:	0020      	movs	r0, r4
 8003726:	f7ff feab 	bl	8003480 <i2cMasterTransmitTimeout.constprop.17>
  readRegister(cmd, highData, sizeof(highData));

  accelY = highData[0]<<8 | lowData[0];
 800372a:	7833      	ldrb	r3, [r6, #0]
 800372c:	782f      	ldrb	r7, [r5, #0]
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	431f      	orrs	r7, r3
 8003732:	b23f      	sxth	r7, r7
 8003734:	b2bb      	uxth	r3, r7
 8003736:	469a      	mov	sl, r3
}


uint16_t readAccelZ(void)
{
  uint8_t lowData[] = {0};
 8003738:	464b      	mov	r3, r9
 800373a:	702b      	strb	r3, [r5, #0]
  uint8_t highData[] = {0};
 800373c:	7033      	strb	r3, [r6, #0]
  uint16_t accelZ;

  uint8_t cmd[] = {OUTZ_L_XL};
 800373e:	232c      	movs	r3, #44	; 0x2c
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, 1, data, dataLen, 10000);
 8003740:	002a      	movs	r2, r5
  uint8_t cmd[] = {OUTZ_L_XL};
 8003742:	7023      	strb	r3, [r4, #0]
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, 1, data, dataLen, 10000);
 8003744:	2101      	movs	r1, #1
 8003746:	3b2b      	subs	r3, #43	; 0x2b
 8003748:	0020      	movs	r0, r4
 800374a:	f7ff fe99 	bl	8003480 <i2cMasterTransmitTimeout.constprop.17>
  readRegister(cmd, lowData, sizeof(lowData));

  cmd[0] = OUTZ_H_XL;
 800374e:	232d      	movs	r3, #45	; 0x2d
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, 1, data, dataLen, 10000);
 8003750:	0032      	movs	r2, r6
  cmd[0] = OUTZ_H_XL;
 8003752:	7023      	strb	r3, [r4, #0]
  msg = i2cMasterTransmitTimeout(&I2CD1, I2C_ADDR, cmd, 1, data, dataLen, 10000);
 8003754:	2101      	movs	r1, #1
 8003756:	3b2c      	subs	r3, #44	; 0x2c
 8003758:	0020      	movs	r0, r4
 800375a:	f7ff fe91 	bl	8003480 <i2cMasterTransmitTimeout.constprop.17>
  readRegister(cmd, highData, sizeof(highData));

  accelZ = highData[0]<<8 | lowData[0];
 800375e:	7832      	ldrb	r2, [r6, #0]
 8003760:	782b      	ldrb	r3, [r5, #0]
 8003762:	0212      	lsls	r2, r2, #8
 8003764:	4313      	orrs	r3, r2
 8003766:	b21b      	sxth	r3, r3
 8003768:	b29a      	uxth	r2, r3
 800376a:	4691      	mov	r9, r2
    accelYCounts = readAccelY();
    accelZCounts = readAccelZ();

    // Convert from 2s complement
      //If first bit is 1, invert all bits, add 1, multiply by -1
    if (accelXCounts & 1<<15)
 800376c:	4642      	mov	r2, r8
 800376e:	2a00      	cmp	r2, #0
 8003770:	da03      	bge.n	800377a <ThreadIMU+0xda>
      accelXCounts = ~accelXCounts + 1;
 8003772:	465a      	mov	r2, fp
 8003774:	4252      	negs	r2, r2
 8003776:	b292      	uxth	r2, r2
 8003778:	4693      	mov	fp, r2
    if (accelYCounts & 1<<15)
 800377a:	2f00      	cmp	r7, #0
 800377c:	da03      	bge.n	8003786 <ThreadIMU+0xe6>
      accelYCounts = ~accelYCounts + 1;
 800377e:	4652      	mov	r2, sl
 8003780:	4252      	negs	r2, r2
 8003782:	b292      	uxth	r2, r2
 8003784:	4692      	mov	sl, r2
    if (accelZCounts & 1<<15)
 8003786:	2b00      	cmp	r3, #0
 8003788:	da03      	bge.n	8003792 <ThreadIMU+0xf2>
      accelZCounts = ~accelZCounts + 1;
 800378a:	464b      	mov	r3, r9
 800378c:	425b      	negs	r3, r3
 800378e:	b29b      	uxth	r3, r3
 8003790:	4699      	mov	r9, r3

    // Math to get g value
      // Count value should be in the range 0->32767 (taking absolute value of accelZCounts)
      // Divide 32768 by accelerometer sensitivity value (e.g. 2, 4, 8, 16)
      // Divide count value by sensitivity quotient
    Gx = accelXCounts/(32768.0/2);
 8003792:	4658      	mov	r0, fp
 8003794:	f7ff f9cc 	bl	8002b30 <__aeabi_i2d>
 8003798:	2200      	movs	r2, #0
 800379a:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <ThreadIMU+0x248>)
 800379c:	f7fe fbf2 	bl	8001f84 <__aeabi_dmul>
 80037a0:	f7ff fa52 	bl	8002c48 <__aeabi_d2f>
 80037a4:	1c07      	adds	r7, r0, #0
    Gy = accelYCounts/(32768.0/2);
 80037a6:	4650      	mov	r0, sl
 80037a8:	f7ff f9c2 	bl	8002b30 <__aeabi_i2d>
 80037ac:	2200      	movs	r2, #0
 80037ae:	4b4e      	ldr	r3, [pc, #312]	; (80038e8 <ThreadIMU+0x248>)
 80037b0:	f7fe fbe8 	bl	8001f84 <__aeabi_dmul>
 80037b4:	f7ff fa48 	bl	8002c48 <__aeabi_d2f>
 80037b8:	4682      	mov	sl, r0
    Gz = accelZCounts/(32768.0/2);
 80037ba:	4648      	mov	r0, r9
 80037bc:	f7ff f9b8 	bl	8002b30 <__aeabi_i2d>
 80037c0:	2200      	movs	r2, #0
 80037c2:	4b49      	ldr	r3, [pc, #292]	; (80038e8 <ThreadIMU+0x248>)
 80037c4:	f7fe fbde 	bl	8001f84 <__aeabi_dmul>
 80037c8:	f7ff fa3e 	bl	8002c48 <__aeabi_d2f>

    pitch = (atan2(Gy,(sqrt(Gx*Gx+Gy*Gy)))*180)/M_PI; // Will be in the range [-90,90]
 80037cc:	1c39      	adds	r1, r7, #0
    Gz = accelZCounts/(32768.0/2);
 80037ce:	4680      	mov	r8, r0
    pitch = (atan2(Gy,(sqrt(Gx*Gx+Gy*Gy)))*180)/M_PI; // Will be in the range [-90,90]
 80037d0:	1c38      	adds	r0, r7, #0
 80037d2:	f7fd f99b 	bl	8000b0c <__aeabi_fmul>
 80037d6:	4651      	mov	r1, sl
 80037d8:	4681      	mov	r9, r0
 80037da:	4650      	mov	r0, sl
 80037dc:	f7fd f996 	bl	8000b0c <__aeabi_fmul>
 80037e0:	1c01      	adds	r1, r0, #0
 80037e2:	4648      	mov	r0, r9
 80037e4:	f7fc fee6 	bl	80005b4 <__aeabi_fadd>
 80037e8:	f7ff f9dc 	bl	8002ba4 <__aeabi_f2d>
 80037ec:	f001 f83e 	bl	800486c <sqrt>
 80037f0:	9000      	str	r0, [sp, #0]
 80037f2:	9101      	str	r1, [sp, #4]
 80037f4:	4650      	mov	r0, sl
 80037f6:	f7ff f9d5 	bl	8002ba4 <__aeabi_f2d>
 80037fa:	9a00      	ldr	r2, [sp, #0]
 80037fc:	9b01      	ldr	r3, [sp, #4]
 80037fe:	f001 f831 	bl	8004864 <atan2>
 8003802:	2200      	movs	r2, #0
 8003804:	4b39      	ldr	r3, [pc, #228]	; (80038ec <ThreadIMU+0x24c>)
 8003806:	f7fe fbbd 	bl	8001f84 <__aeabi_dmul>
 800380a:	4a39      	ldr	r2, [pc, #228]	; (80038f0 <ThreadIMU+0x250>)
 800380c:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <ThreadIMU+0x254>)
 800380e:	f7fd ffaf 	bl	8001770 <__aeabi_ddiv>
 8003812:	f7ff fa19 	bl	8002c48 <__aeabi_d2f>
 8003816:	4681      	mov	r9, r0
    roll = (atan2(-Gx,Gz)*180)/M_PI; // Will be in the range [-180,180]
 8003818:	4640      	mov	r0, r8
 800381a:	f7ff f9c3 	bl	8002ba4 <__aeabi_f2d>
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	061b      	lsls	r3, r3, #24
 8003822:	9000      	str	r0, [sp, #0]
 8003824:	9101      	str	r1, [sp, #4]
 8003826:	18f8      	adds	r0, r7, r3
 8003828:	f7ff f9bc 	bl	8002ba4 <__aeabi_f2d>
 800382c:	9a00      	ldr	r2, [sp, #0]
 800382e:	9b01      	ldr	r3, [sp, #4]
 8003830:	f001 f818 	bl	8004864 <atan2>
 8003834:	2200      	movs	r2, #0
 8003836:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <ThreadIMU+0x24c>)
 8003838:	f7fe fba4 	bl	8001f84 <__aeabi_dmul>
 800383c:	4a2c      	ldr	r2, [pc, #176]	; (80038f0 <ThreadIMU+0x250>)
 800383e:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <ThreadIMU+0x254>)
 8003840:	f7fd ff96 	bl	8001770 <__aeabi_ddiv>
 8003844:	f7ff fa00 	bl	8002c48 <__aeabi_d2f>

    pitch /= 90; // Normalize to [-1,1]
 8003848:	492b      	ldr	r1, [pc, #172]	; (80038f8 <ThreadIMU+0x258>)
    roll = (atan2(-Gx,Gz)*180)/M_PI; // Will be in the range [-180,180]
 800384a:	4682      	mov	sl, r0
    pitch /= 90; // Normalize to [-1,1]
 800384c:	4648      	mov	r0, r9
 800384e:	f7fd f84b 	bl	80008e8 <__aeabi_fdiv>
    roll /= 180; // Normalize to [-1,1]
 8003852:	492a      	ldr	r1, [pc, #168]	; (80038fc <ThreadIMU+0x25c>)
    pitch /= 90; // Normalize to [-1,1]
 8003854:	1c07      	adds	r7, r0, #0
    roll /= 180; // Normalize to [-1,1]
 8003856:	4650      	mov	r0, sl
 8003858:	f7fd f846 	bl	80008e8 <__aeabi_fdiv>

    radius = sqrt(pitch*pitch+roll*roll);
 800385c:	1c39      	adds	r1, r7, #0
    roll /= 180; // Normalize to [-1,1]
 800385e:	4681      	mov	r9, r0
    radius = sqrt(pitch*pitch+roll*roll);
 8003860:	1c38      	adds	r0, r7, #0
 8003862:	f7fd f953 	bl	8000b0c <__aeabi_fmul>
 8003866:	4649      	mov	r1, r9
 8003868:	4682      	mov	sl, r0
 800386a:	4648      	mov	r0, r9
 800386c:	f7fd f94e 	bl	8000b0c <__aeabi_fmul>
 8003870:	1c01      	adds	r1, r0, #0
 8003872:	4650      	mov	r0, sl
 8003874:	f7fc fe9e 	bl	80005b4 <__aeabi_fadd>
 8003878:	f7ff f994 	bl	8002ba4 <__aeabi_f2d>
 800387c:	f000 fff6 	bl	800486c <sqrt>
    if (radius > 1)
      radius = 1; // Working with the unit circle so max radius is 1

    theta = atan2(pitch,roll);
 8003880:	4648      	mov	r0, r9
 8003882:	f7ff f98f 	bl	8002ba4 <__aeabi_f2d>
 8003886:	9000      	str	r0, [sp, #0]
 8003888:	9101      	str	r1, [sp, #4]
 800388a:	1c38      	adds	r0, r7, #0
 800388c:	f7ff f98a 	bl	8002ba4 <__aeabi_f2d>
 8003890:	9a00      	ldr	r2, [sp, #0]
 8003892:	9b01      	ldr	r3, [sp, #4]
 8003894:	f000 ffe6 	bl	8004864 <atan2>
    // Convert g value to thread wait time
    waitTime = Gz*200;


    // Toggle LED
    palTogglePad(GPIOC, GPIOC_LED4);
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	4a19      	ldr	r2, [pc, #100]	; (8003900 <ThreadIMU+0x260>)
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	6951      	ldr	r1, [r2, #20]
 80038a0:	404b      	eors	r3, r1
 80038a2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80038a4:	b672      	cpsid	i
    waitTime = Gz*200;
 80038a6:	4917      	ldr	r1, [pc, #92]	; (8003904 <ThreadIMU+0x264>)
 80038a8:	4640      	mov	r0, r8
 80038aa:	f7fd f92f 	bl	8000b0c <__aeabi_fmul>
 80038ae:	f7fc fda7 	bl	8000400 <__aeabi_f2uiz>


    // Thread sleep
    //chprintf((BaseSequentialStream *)&SD1, "W:%3.3u", waitTime);

    chThdSleepMilliseconds(waitTime);
 80038b2:	4a15      	ldr	r2, [pc, #84]	; (8003908 <ThreadIMU+0x268>)
 80038b4:	2300      	movs	r3, #0
 80038b6:	b280      	uxth	r0, r0
 80038b8:	2100      	movs	r1, #0
 80038ba:	f7fc fd77 	bl	80003ac <__aeabi_lmul>
 80038be:	2300      	movs	r3, #0
 80038c0:	4a12      	ldr	r2, [pc, #72]	; (800390c <ThreadIMU+0x26c>)
 80038c2:	1880      	adds	r0, r0, r2
 80038c4:	4159      	adcs	r1, r3
 80038c6:	22fa      	movs	r2, #250	; 0xfa
 80038c8:	2300      	movs	r3, #0
 80038ca:	0092      	lsls	r2, r2, #2
 80038cc:	f7fc fd4e 	bl	800036c <__aeabi_uldivmod>
 80038d0:	0001      	movs	r1, r0
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80038d2:	2008      	movs	r0, #8
 80038d4:	f7ff fd44 	bl	8003360 <chSchGoSleepTimeoutS>
  __ASM volatile ("cpsie i" : : : "memory");
 80038d8:	b662      	cpsie	i
 80038da:	e6f7      	b.n	80036cc <ThreadIMU+0x2c>
 80038dc:	200008ec 	.word	0x200008ec
 80038e0:	08005180 	.word	0x08005180
 80038e4:	00004110 	.word	0x00004110
 80038e8:	3f100000 	.word	0x3f100000
 80038ec:	40668000 	.word	0x40668000
 80038f0:	54442d18 	.word	0x54442d18
 80038f4:	400921fb 	.word	0x400921fb
 80038f8:	42b40000 	.word	0x42b40000
 80038fc:	43340000 	.word	0x43340000
 8003900:	48000800 	.word	0x48000800
 8003904:	43480000 	.word	0x43480000
 8003908:	00002710 	.word	0x00002710
 800390c:	000003e7 	.word	0x000003e7

08003910 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8003910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003912:	4657      	mov	r7, sl
 8003914:	4645      	mov	r5, r8
 8003916:	46de      	mov	lr, fp
 8003918:	464e      	mov	r6, r9
 800391a:	b5e0      	push	{r5, r6, r7, lr}
 800391c:	b083      	sub	sp, #12
 800391e:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8003920:	69c3      	ldr	r3, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 8003922:	0004      	movs	r4, r0
 8003924:	4688      	mov	r8, r1
 8003926:	0017      	movs	r7, r2
  qnotify_t nfy = oqp->q_notify;
 8003928:	469a      	mov	sl, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800392a:	b672      	cpsid	i
  size_t wr = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	4699      	mov	r9, r3

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
 8003930:	2a00      	cmp	r2, #0
 8003932:	d10b      	bne.n	800394c <oqWriteTimeout+0x3c>
 8003934:	e026      	b.n	8003984 <oqWriteTimeout+0x74>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8003936:	4653      	mov	r3, sl
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <oqWriteTimeout+0x30>
        nfy(oqp);
 800393c:	0020      	movs	r0, r4
 800393e:	47d0      	blx	sl
  __ASM volatile ("cpsie i" : : : "memory");
 8003940:	b662      	cpsie	i
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
 8003942:	44a9      	add	r9, r5
      bp += done;
 8003944:	44a8      	add	r8, r5
  __ASM volatile ("cpsid i" : : : "memory");
 8003946:	b672      	cpsid	i
  while (wr < n) {
 8003948:	454f      	cmp	r7, r9
 800394a:	d91b      	bls.n	8003984 <oqWriteTimeout+0x74>
  if (n > oqGetEmptyI(oqp)) {
 800394c:	68a3      	ldr	r3, [r4, #8]
 800394e:	003d      	movs	r5, r7
 8003950:	429f      	cmp	r7, r3
 8003952:	d900      	bls.n	8003956 <oqWriteTimeout+0x46>
    n = oqGetEmptyI(oqp);
 8003954:	68a5      	ldr	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8003956:	6960      	ldr	r0, [r4, #20]
 8003958:	6923      	ldr	r3, [r4, #16]
 800395a:	1a1e      	subs	r6, r3, r0
  if (n < s1) {
 800395c:	42ae      	cmp	r6, r5
 800395e:	d82a      	bhi.n	80039b6 <oqWriteTimeout+0xa6>
  else if (n > s1) {
 8003960:	d319      	bcc.n	8003996 <oqWriteTimeout+0x86>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8003962:	002a      	movs	r2, r5
 8003964:	4641      	mov	r1, r8
 8003966:	f001 fb15 	bl	8004f94 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 800396a:	68e3      	ldr	r3, [r4, #12]
 800396c:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 800396e:	68a3      	ldr	r3, [r4, #8]
 8003970:	1b5b      	subs	r3, r3, r5
 8003972:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8003974:	2d00      	cmp	r5, #0
 8003976:	d1de      	bne.n	8003936 <oqWriteTimeout+0x26>
 8003978:	9901      	ldr	r1, [sp, #4]
 800397a:	0020      	movs	r0, r4
 800397c:	f7ff fe08 	bl	8003590 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8003980:	2800      	cmp	r0, #0
 8003982:	d0e1      	beq.n	8003948 <oqWriteTimeout+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 8003984:	b662      	cpsie	i
    }
  }

  osalSysUnlock();
  return wr;
}
 8003986:	4648      	mov	r0, r9
 8003988:	b003      	add	sp, #12
 800398a:	bc3c      	pop	{r2, r3, r4, r5}
 800398c:	4690      	mov	r8, r2
 800398e:	4699      	mov	r9, r3
 8003990:	46a2      	mov	sl, r4
 8003992:	46ab      	mov	fp, r5
 8003994:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003996:	0032      	movs	r2, r6
 8003998:	4641      	mov	r1, r8
 800399a:	f001 fafb 	bl	8004f94 <memcpy>
    bp += s1;
 800399e:	0031      	movs	r1, r6
    s2 = n - s1;
 80039a0:	1bab      	subs	r3, r5, r6
 80039a2:	469b      	mov	fp, r3
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80039a4:	001a      	movs	r2, r3
    bp += s1;
 80039a6:	4441      	add	r1, r8
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80039a8:	68e0      	ldr	r0, [r4, #12]
 80039aa:	f001 faf3 	bl	8004f94 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 80039ae:	68e3      	ldr	r3, [r4, #12]
 80039b0:	445b      	add	r3, fp
 80039b2:	6163      	str	r3, [r4, #20]
 80039b4:	e7db      	b.n	800396e <oqWriteTimeout+0x5e>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80039b6:	002a      	movs	r2, r5
 80039b8:	4641      	mov	r1, r8
 80039ba:	f001 faeb 	bl	8004f94 <memcpy>
    oqp->q_wrptr += n;
 80039be:	6963      	ldr	r3, [r4, #20]
 80039c0:	195b      	adds	r3, r3, r5
 80039c2:	6163      	str	r3, [r4, #20]
 80039c4:	e7d3      	b.n	800396e <oqWriteTimeout+0x5e>
 80039c6:	46c0      	nop			; (mov r8, r8)
	...

080039d0 <_writet>:
                      sysinterval_t timeout) {
 80039d0:	b510      	push	{r4, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80039d2:	3030      	adds	r0, #48	; 0x30
 80039d4:	f7ff ff9c 	bl	8003910 <oqWriteTimeout>
}
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	0000      	movs	r0, r0
	...

080039e0 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80039e0:	2301      	movs	r3, #1
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 80039e2:	b510      	push	{r4, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80039e4:	3030      	adds	r0, #48	; 0x30
 80039e6:	425b      	negs	r3, r3
 80039e8:	f7ff ff92 	bl	8003910 <oqWriteTimeout>
}
 80039ec:	bd10      	pop	{r4, pc}
 80039ee:	46c0      	nop			; (mov r8, r8)

080039f0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 80039f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039f2:	4657      	mov	r7, sl
 80039f4:	4645      	mov	r5, r8
 80039f6:	46de      	mov	lr, fp
 80039f8:	464e      	mov	r6, r9
 80039fa:	b5e0      	push	{r5, r6, r7, lr}
 80039fc:	b083      	sub	sp, #12
 80039fe:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = iqp->q_notify;
 8003a00:	69c3      	ldr	r3, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 8003a02:	0004      	movs	r4, r0
 8003a04:	4688      	mov	r8, r1
 8003a06:	0017      	movs	r7, r2
  qnotify_t nfy = iqp->q_notify;
 8003a08:	469a      	mov	sl, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8003a0a:	b672      	cpsid	i
  size_t rd = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	4699      	mov	r9, r3
  while (rd < n) {
 8003a10:	2a00      	cmp	r2, #0
 8003a12:	d10b      	bne.n	8003a2c <iqReadTimeout+0x3c>
 8003a14:	e026      	b.n	8003a64 <iqReadTimeout+0x74>
      if (nfy != NULL) {
 8003a16:	4653      	mov	r3, sl
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <iqReadTimeout+0x30>
        nfy(iqp);
 8003a1c:	0020      	movs	r0, r4
 8003a1e:	47d0      	blx	sl
  __ASM volatile ("cpsie i" : : : "memory");
 8003a20:	b662      	cpsie	i
      rd += done;
 8003a22:	44a9      	add	r9, r5
      bp += done;
 8003a24:	44a8      	add	r8, r5
  __ASM volatile ("cpsid i" : : : "memory");
 8003a26:	b672      	cpsid	i
  while (rd < n) {
 8003a28:	454f      	cmp	r7, r9
 8003a2a:	d91b      	bls.n	8003a64 <iqReadTimeout+0x74>
  if (n > iqGetFullI(iqp)) {
 8003a2c:	68a3      	ldr	r3, [r4, #8]
 8003a2e:	003d      	movs	r5, r7
 8003a30:	429f      	cmp	r7, r3
 8003a32:	d900      	bls.n	8003a36 <iqReadTimeout+0x46>
    n = iqGetFullI(iqp);
 8003a34:	68a5      	ldr	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003a36:	69a1      	ldr	r1, [r4, #24]
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	1a5e      	subs	r6, r3, r1
  if (n < s1) {
 8003a3c:	42ae      	cmp	r6, r5
 8003a3e:	d82a      	bhi.n	8003a96 <iqReadTimeout+0xa6>
  else if (n > s1) {
 8003a40:	d319      	bcc.n	8003a76 <iqReadTimeout+0x86>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003a42:	002a      	movs	r2, r5
 8003a44:	4640      	mov	r0, r8
 8003a46:	f001 faa5 	bl	8004f94 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8003a4a:	68e3      	ldr	r3, [r4, #12]
 8003a4c:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8003a4e:	68a3      	ldr	r3, [r4, #8]
 8003a50:	1b5b      	subs	r3, r3, r5
 8003a52:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8003a54:	2d00      	cmp	r5, #0
 8003a56:	d1de      	bne.n	8003a16 <iqReadTimeout+0x26>
 8003a58:	9901      	ldr	r1, [sp, #4]
 8003a5a:	0020      	movs	r0, r4
 8003a5c:	f7ff fd98 	bl	8003590 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8003a60:	2800      	cmp	r0, #0
 8003a62:	d0e1      	beq.n	8003a28 <iqReadTimeout+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 8003a64:	b662      	cpsie	i
}
 8003a66:	4648      	mov	r0, r9
 8003a68:	b003      	add	sp, #12
 8003a6a:	bc3c      	pop	{r2, r3, r4, r5}
 8003a6c:	4690      	mov	r8, r2
 8003a6e:	4699      	mov	r9, r3
 8003a70:	46a2      	mov	sl, r4
 8003a72:	46ab      	mov	fp, r5
 8003a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003a76:	0032      	movs	r2, r6
 8003a78:	4640      	mov	r0, r8
 8003a7a:	f001 fa8b 	bl	8004f94 <memcpy>
    bp += s1;
 8003a7e:	0030      	movs	r0, r6
    s2 = n - s1;
 8003a80:	1bab      	subs	r3, r5, r6
 8003a82:	469b      	mov	fp, r3
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8003a84:	001a      	movs	r2, r3
    bp += s1;
 8003a86:	4440      	add	r0, r8
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8003a88:	68e1      	ldr	r1, [r4, #12]
 8003a8a:	f001 fa83 	bl	8004f94 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8003a8e:	68e3      	ldr	r3, [r4, #12]
 8003a90:	445b      	add	r3, fp
 8003a92:	61a3      	str	r3, [r4, #24]
 8003a94:	e7db      	b.n	8003a4e <iqReadTimeout+0x5e>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003a96:	002a      	movs	r2, r5
 8003a98:	4640      	mov	r0, r8
 8003a9a:	f001 fa7b 	bl	8004f94 <memcpy>
    iqp->q_rdptr += n;
 8003a9e:	69a3      	ldr	r3, [r4, #24]
 8003aa0:	195b      	adds	r3, r3, r5
 8003aa2:	61a3      	str	r3, [r4, #24]
 8003aa4:	e7d3      	b.n	8003a4e <iqReadTimeout+0x5e>
 8003aa6:	46c0      	nop			; (mov r8, r8)
	...

08003ab0 <_readt>:
                     sysinterval_t timeout) {
 8003ab0:	b510      	push	{r4, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003ab2:	300c      	adds	r0, #12
 8003ab4:	f7ff ff9c 	bl	80039f0 <iqReadTimeout>
}
 8003ab8:	bd10      	pop	{r4, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	0000      	movs	r0, r0
	...

08003ac0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003ac0:	2301      	movs	r3, #1
static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8003ac2:	b510      	push	{r4, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003ac4:	300c      	adds	r0, #12
 8003ac6:	425b      	negs	r3, r3
 8003ac8:	f7ff ff92 	bl	80039f0 <iqReadTimeout>
}
 8003acc:	bd10      	pop	{r4, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)

08003ad0 <main>:


/*
 * Application entry point.
 */
int main(void) {
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	46de      	mov	lr, fp
 8003ad4:	4657      	mov	r7, sl
 8003ad6:	464e      	mov	r6, r9
 8003ad8:	4645      	mov	r5, r8
void hal_lld_init(void) {

  /* Reset of all peripherals.
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB(~STM32_GPIO_EN_MASK);
 8003ada:	4bf7      	ldr	r3, [pc, #988]	; (8003eb8 <main+0x3e8>)
 8003adc:	4af7      	ldr	r2, [pc, #988]	; (8003ebc <main+0x3ec>)
 8003ade:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003ae0:	b5e0      	push	{r5, r6, r7, lr}
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8003aea:	6919      	ldr	r1, [r3, #16]
 8003aec:	2101      	movs	r1, #1
 8003aee:	4249      	negs	r1, r1
 8003af0:	6119      	str	r1, [r3, #16]
 8003af2:	611a      	str	r2, [r3, #16]
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 8003af4:	68d8      	ldr	r0, [r3, #12]
 8003af6:	49f2      	ldr	r1, [pc, #968]	; (8003ec0 <main+0x3f0>)
 8003af8:	4301      	orrs	r1, r0
 8003afa:	60d9      	str	r1, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8003afc:	2180      	movs	r1, #128	; 0x80
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 8003afe:	60da      	str	r2, [r3, #12]
  rccEnablePWRInterface(true);
 8003b00:	69d8      	ldr	r0, [r3, #28]
 8003b02:	0549      	lsls	r1, r1, #21
 8003b04:	4301      	orrs	r1, r0
 8003b06:	61d9      	str	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	48ee      	ldr	r0, [pc, #952]	; (8003ec4 <main+0x3f4>)
 8003b0c:	0049      	lsls	r1, r1, #1
 8003b0e:	6804      	ldr	r4, [r0, #0]
 8003b10:	4321      	orrs	r1, r4
 8003b12:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 8003b14:	20c0      	movs	r0, #192	; 0xc0
 8003b16:	6a19      	ldr	r1, [r3, #32]
 8003b18:	0080      	lsls	r0, r0, #2
 8003b1a:	4001      	ands	r1, r0
 8003b1c:	3801      	subs	r0, #1
 8003b1e:	38ff      	subs	r0, #255	; 0xff
 8003b20:	4281      	cmp	r1, r0
 8003b22:	d003      	beq.n	8003b2c <main+0x5c>
    RCC->BDCR = RCC_BDCR_BDRST;
 8003b24:	2180      	movs	r1, #128	; 0x80
 8003b26:	0249      	lsls	r1, r1, #9
 8003b28:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 8003b2a:	621a      	str	r2, [r3, #32]
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	4be2      	ldr	r3, [pc, #904]	; (8003eb8 <main+0x3e8>)
 8003b30:	0212      	lsls	r2, r2, #8
 8003b32:	6a19      	ldr	r1, [r3, #32]
 8003b34:	4211      	tst	r1, r2
 8003b36:	d107      	bne.n	8003b48 <main+0x78>
    RCC->BDCR |= STM32_RTCSEL;
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	6a18      	ldr	r0, [r3, #32]
 8003b3c:	0089      	lsls	r1, r1, #2
 8003b3e:	4301      	orrs	r1, r0
 8003b40:	6219      	str	r1, [r3, #32]
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8003b42:	6a19      	ldr	r1, [r3, #32]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	621a      	str	r2, [r3, #32]
  dma.streams_mask = 0U;
 8003b48:	2500      	movs	r5, #0
 8003b4a:	4bdf      	ldr	r3, [pc, #892]	; (8003ec8 <main+0x3f8>)
    _stm32_dma_streams[i].channel->CCR = 0U;
 8003b4c:	4adf      	ldr	r2, [pc, #892]	; (8003ecc <main+0x3fc>)
  dma.streams_mask = 0U;
 8003b4e:	601d      	str	r5, [r3, #0]
  dma.isr_mask = 0U;
 8003b50:	605d      	str	r5, [r3, #4]
    _stm32_dma_streams[i].channel->CCR = 0U;
 8003b52:	4bdf      	ldr	r3, [pc, #892]	; (8003ed0 <main+0x400>)
  DMA1->IFCR = 0xFFFFFFFFU;
 8003b54:	2101      	movs	r1, #1
    _stm32_dma_streams[i].channel->CCR = 0U;
 8003b56:	601d      	str	r5, [r3, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8003b58:	4bde      	ldr	r3, [pc, #888]	; (8003ed4 <main+0x404>)
  DMA1->IFCR = 0xFFFFFFFFU;
 8003b5a:	4249      	negs	r1, r1
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8003b5c:	601d      	str	r5, [r3, #0]
    _stm32_dma_streams[i].channel->CCR = 0U;
 8003b5e:	6015      	str	r5, [r2, #0]
 8003b60:	4add      	ldr	r2, [pc, #884]	; (8003ed8 <main+0x408>)
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8003b62:	609d      	str	r5, [r3, #8]
    _stm32_dma_streams[i].channel->CCR = 0U;
 8003b64:	6015      	str	r5, [r2, #0]
 8003b66:	4add      	ldr	r2, [pc, #884]	; (8003edc <main+0x40c>)
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8003b68:	611d      	str	r5, [r3, #16]
    _stm32_dma_streams[i].channel->CCR = 0U;
 8003b6a:	6015      	str	r5, [r2, #0]
 8003b6c:	4adc      	ldr	r2, [pc, #880]	; (8003ee0 <main+0x410>)
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8003b6e:	619d      	str	r5, [r3, #24]
    _stm32_dma_streams[i].channel->CCR = 0U;
 8003b70:	6015      	str	r5, [r2, #0]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8003b72:	22c1      	movs	r2, #193	; 0xc1
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8003b74:	621d      	str	r5, [r3, #32]
  DMA1->IFCR = 0xFFFFFFFFU;
 8003b76:	4bdb      	ldr	r3, [pc, #876]	; (8003ee4 <main+0x414>)
 8003b78:	0092      	lsls	r2, r2, #2
 8003b7a:	6059      	str	r1, [r3, #4]
 8003b7c:	4bda      	ldr	r3, [pc, #872]	; (8003ee8 <main+0x418>)
 8003b7e:	48db      	ldr	r0, [pc, #876]	; (8003eec <main+0x41c>)
 8003b80:	4698      	mov	r8, r3
 8003b82:	589b      	ldr	r3, [r3, r2]
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003b84:	24c0      	movs	r4, #192	; 0xc0
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8003b86:	4018      	ands	r0, r3
 8003b88:	23c0      	movs	r3, #192	; 0xc0
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	4303      	orrs	r3, r0
 8003b8e:	4640      	mov	r0, r8
 8003b90:	5083      	str	r3, [r0, r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003b92:	2320      	movs	r3, #32
 8003b94:	0064      	lsls	r4, r4, #1
 8003b96:	5103      	str	r3, [r0, r4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003b98:	6003      	str	r3, [r0, #0]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8003b9a:	5880      	ldr	r0, [r0, r2]
 8003b9c:	4bd4      	ldr	r3, [pc, #848]	; (8003ef0 <main+0x420>)
 8003b9e:	4646      	mov	r6, r8
 8003ba0:	469a      	mov	sl, r3
 8003ba2:	4018      	ands	r0, r3
 8003ba4:	23c0      	movs	r3, #192	; 0xc0
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	4303      	orrs	r3, r0
 8003baa:	4640      	mov	r0, r8
 8003bac:	5083      	str	r3, [r0, r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003bae:	2340      	movs	r3, #64	; 0x40
 8003bb0:	5103      	str	r3, [r0, r4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003bb2:	6003      	str	r3, [r0, #0]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8003bb4:	5883      	ldr	r3, [r0, r2]
 8003bb6:	20c0      	movs	r0, #192	; 0xc0
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	0600      	lsls	r0, r0, #24
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	4303      	orrs	r3, r0
 8003bc0:	50b3      	str	r3, [r6, r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003bc2:	2280      	movs	r2, #128	; 0x80
  i2cp->state  = I2C_STOP;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	4fcb      	ldr	r7, [pc, #812]	; (8003ef4 <main+0x424>)
 8003bc8:	5132      	str	r2, [r6, r4]
 8003bca:	4699      	mov	r9, r3
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003bcc:	6032      	str	r2, [r6, #0]
 8003bce:	703b      	strb	r3, [r7, #0]
  tqp->next = (thread_t *)tqp;
 8003bd0:	003b      	movs	r3, r7
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	60fb      	str	r3, [r7, #12]
  tqp->prev = (thread_t *)tqp;
 8003bd6:	613b      	str	r3, [r7, #16]
  I2CD1.i2c    = I2C1;
 8003bd8:	4bc7      	ldr	r3, [pc, #796]	; (8003ef8 <main+0x428>)
  i2cp->config = NULL;
 8003bda:	607d      	str	r5, [r7, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8003bdc:	617d      	str	r5, [r7, #20]
 8003bde:	633b      	str	r3, [r7, #48]	; 0x30
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8003be0:	4bc6      	ldr	r3, [pc, #792]	; (8003efc <main+0x42c>)
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {

  sdp->vmt = &vmt;
 8003be2:	4ec7      	ldr	r6, [pc, #796]	; (8003f00 <main+0x430>)
 8003be4:	0018      	movs	r0, r3
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8003be6:	3314      	adds	r3, #20
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bea:	0033      	movs	r3, r6
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8003bec:	3028      	adds	r0, #40	; 0x28
 8003bee:	62b8      	str	r0, [r7, #40]	; 0x28
 8003bf0:	48c4      	ldr	r0, [pc, #784]	; (8003f04 <main+0x434>)
  iqp->q_counter = 0;
 8003bf2:	6175      	str	r5, [r6, #20]
 8003bf4:	c301      	stmia	r3!, {r0}
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8003bf6:	6073      	str	r3, [r6, #4]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	7233      	strb	r3, [r6, #8]
  tqp->next = (thread_t *)tqp;
 8003bfc:	0033      	movs	r3, r6
 8003bfe:	330c      	adds	r3, #12
 8003c00:	60f3      	str	r3, [r6, #12]
  tqp->prev = (thread_t *)tqp;
 8003c02:	6133      	str	r3, [r6, #16]
  iqp->q_buffer  = bp;
 8003c04:	4bc0      	ldr	r3, [pc, #768]	; (8003f08 <main+0x438>)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8003c06:	20c6      	movs	r0, #198	; 0xc6
 8003c08:	61b3      	str	r3, [r6, #24]
  iqp->q_rdptr   = bp;
 8003c0a:	6273      	str	r3, [r6, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8003c0c:	6233      	str	r3, [r6, #32]
  iqp->q_top     = bp + size;
 8003c0e:	3310      	adds	r3, #16
 8003c10:	61f3      	str	r3, [r6, #28]
  tqp->next = (thread_t *)tqp;
 8003c12:	0033      	movs	r3, r6
 8003c14:	3330      	adds	r3, #48	; 0x30
 8003c16:	6333      	str	r3, [r6, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8003c18:	6373      	str	r3, [r6, #52]	; 0x34
  oqp->q_counter = size;
 8003c1a:	2310      	movs	r3, #16
 8003c1c:	63b3      	str	r3, [r6, #56]	; 0x38
  oqp->q_buffer  = bp;
 8003c1e:	4bbb      	ldr	r3, [pc, #748]	; (8003f0c <main+0x43c>)
  I2CD1.thread = NULL;
 8003c20:	61fd      	str	r5, [r7, #28]
 8003c22:	63f3      	str	r3, [r6, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8003c24:	64b3      	str	r3, [r6, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8003c26:	6473      	str	r3, [r6, #68]	; 0x44
  oqp->q_top     = bp + size;
 8003c28:	3310      	adds	r3, #16
 8003c2a:	6433      	str	r3, [r6, #64]	; 0x40
  oqp->q_notify  = onfy;
 8003c2c:	4bb8      	ldr	r3, [pc, #736]	; (8003f10 <main+0x440>)
  iqp->q_notify  = infy;
 8003c2e:	62b5      	str	r5, [r6, #40]	; 0x28
  oqp->q_notify  = onfy;
 8003c30:	64f3      	str	r3, [r6, #76]	; 0x4c

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1);
  iqObjectInit(&SD1.iqueue, sd_in_buf1, sizeof sd_in_buf1, NULL, &SD1);
  oqObjectInit(&SD1.oqueue, sd_out_buf1, sizeof sd_out_buf1, notify1, &SD1);
  SD1.usart = USART1;
 8003c32:	4bb8      	ldr	r3, [pc, #736]	; (8003f14 <main+0x444>)
  iqp->q_link    = link;
 8003c34:	62f6      	str	r6, [r6, #44]	; 0x2c
 8003c36:	6573      	str	r3, [r6, #84]	; 0x54
  SD1.clock = STM32_USART1CLK;
 8003c38:	4bb7      	ldr	r3, [pc, #732]	; (8003f18 <main+0x448>)
  oqp->q_link    = link;
 8003c3a:	6536      	str	r6, [r6, #80]	; 0x50
 8003c3c:	65b3      	str	r3, [r6, #88]	; 0x58
 8003c3e:	4643      	mov	r3, r8
 8003c40:	22c0      	movs	r2, #192	; 0xc0
 8003c42:	0080      	lsls	r0, r0, #2
 8003c44:	581b      	ldr	r3, [r3, r0]
 8003c46:	0612      	lsls	r2, r2, #24
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	4642      	mov	r2, r8
 8003c50:	5013      	str	r3, [r2, r0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	051b      	lsls	r3, r3, #20
 8003c56:	5113      	str	r3, [r2, r4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003c58:	6013      	str	r3, [r2, #0]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8003c5a:	4b97      	ldr	r3, [pc, #604]	; (8003eb8 <main+0x3e8>)
 8003c5c:	464a      	mov	r2, r9
 8003c5e:	469b      	mov	fp, r3
 8003c60:	69db      	ldr	r3, [r3, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003c62:	48ae      	ldr	r0, [pc, #696]	; (8003f1c <main+0x44c>)
  ST_ENABLE_CLOCK();
 8003c64:	4313      	orrs	r3, r2
 8003c66:	465a      	mov	r2, fp
 8003c68:	61d3      	str	r3, [r2, #28]
  ST_ENABLE_STOP();
 8003c6a:	464a      	mov	r2, r9
 8003c6c:	6883      	ldr	r3, [r0, #8]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8003c6e:	348d      	adds	r4, #141	; 0x8d
 8003c70:	4313      	orrs	r3, r2
 8003c72:	6083      	str	r3, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	48aa      	ldr	r0, [pc, #680]	; (8003f20 <main+0x450>)
 8003c78:	05db      	lsls	r3, r3, #23
 8003c7a:	6298      	str	r0, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003c7c:	62d9      	str	r1, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8003c7e:	619d      	str	r5, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8003c80:	635d      	str	r5, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8003c82:	60dd      	str	r5, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8003c84:	605d      	str	r5, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003c86:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	4643      	mov	r3, r8
 8003c8c:	2080      	movs	r0, #128	; 0x80
 8003c8e:	4642      	mov	r2, r8
 8003c90:	34ff      	adds	r4, #255	; 0xff
 8003c92:	591b      	ldr	r3, [r3, r4]
 8003c94:	0600      	lsls	r0, r0, #24
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	4303      	orrs	r3, r0
 8003c9c:	5113      	str	r3, [r2, r4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	3c8d      	subs	r4, #141	; 0x8d
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	3cff      	subs	r4, #255	; 0xff
 8003ca6:	5113      	str	r3, [r2, r4]
  tqp->next = (thread_t *)tqp;
 8003ca8:	4c9e      	ldr	r4, [pc, #632]	; (8003f24 <main+0x454>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003caa:	6013      	str	r3, [r2, #0]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8003cac:	0023      	movs	r3, r4
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8003cae:	2224      	movs	r2, #36	; 0x24
 8003cb0:	331c      	adds	r3, #28
 8003cb2:	61e3      	str	r3, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8003cb4:	6223      	str	r3, [r4, #32]
  ch.vtlist.delta = (sysinterval_t)-1;
 8003cb6:	6261      	str	r1, [r4, #36]	; 0x24
  ch_memcore.nextmem = __heap_base__;
 8003cb8:	4b9b      	ldr	r3, [pc, #620]	; (8003f28 <main+0x458>)
 8003cba:	499c      	ldr	r1, [pc, #624]	; (8003f2c <main+0x45c>)
 8003cbc:	6024      	str	r4, [r4, #0]
 8003cbe:	6019      	str	r1, [r3, #0]
  ch_memcore.endmem  = __heap_end__;
 8003cc0:	499b      	ldr	r1, [pc, #620]	; (8003f30 <main+0x460>)
  tqp->prev = (thread_t *)tqp;
 8003cc2:	6064      	str	r4, [r4, #4]
  ch.rlist.prio = NOPRIO;
 8003cc4:	60a5      	str	r5, [r4, #8]
  ch.vtlist.lasttime = (systime_t)0;
 8003cc6:	62a5      	str	r5, [r4, #40]	; 0x28
 8003cc8:	6059      	str	r1, [r3, #4]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003cca:	4b9a      	ldr	r3, [pc, #616]	; (8003f34 <main+0x464>)
 8003ccc:	499a      	ldr	r1, [pc, #616]	; (8003f38 <main+0x468>)
 8003cce:	4694      	mov	ip, r2
 8003cd0:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	310c      	adds	r1, #12
  H_NEXT(&default_heap.header) = NULL;
 8003cd6:	605d      	str	r5, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 8003cd8:	609d      	str	r5, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8003cda:	6119      	str	r1, [r3, #16]
 8003cdc:	615d      	str	r5, [r3, #20]
  tqp->next = (thread_t *)tqp;
 8003cde:	60d9      	str	r1, [r3, #12]
 8003ce0:	4b96      	ldr	r3, [pc, #600]	; (8003f3c <main+0x46c>)

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
 8003ce2:	2004      	movs	r0, #4
 8003ce4:	449c      	add	ip, r3
 8003ce6:	4662      	mov	r2, ip
 8003ce8:	0019      	movs	r1, r3
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24
 8003cec:	2228      	movs	r2, #40	; 0x28
 8003cee:	3110      	adds	r1, #16
 8003cf0:	6119      	str	r1, [r3, #16]
  mp->object_size = size;
 8003cf2:	2114      	movs	r1, #20
 8003cf4:	4694      	mov	ip, r2
 8003cf6:	6199      	str	r1, [r3, #24]
  mp->provider = provider;
 8003cf8:	4991      	ldr	r1, [pc, #580]	; (8003f40 <main+0x470>)
 8003cfa:	449c      	add	ip, r3
 8003cfc:	6219      	str	r1, [r3, #32]
 8003cfe:	6399      	str	r1, [r3, #56]	; 0x38
 8003d00:	0019      	movs	r1, r3
 8003d02:	4662      	mov	r2, ip
 8003d04:	313c      	adds	r1, #60	; 0x3c
 8003d06:	63d9      	str	r1, [r3, #60]	; 0x3c
 8003d08:	0019      	movs	r1, r3
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28
  mp->object_size = size;
 8003d0c:	221c      	movs	r2, #28
 8003d0e:	3140      	adds	r1, #64	; 0x40
 8003d10:	6419      	str	r1, [r3, #64]	; 0x40
  tlp->next = (thread_t *)tlp;
 8003d12:	0021      	movs	r1, r4
 8003d14:	609d      	str	r5, [r3, #8]
  mp->next = NULL;
 8003d16:	615d      	str	r5, [r3, #20]
  mp->align = align;
 8003d18:	61d8      	str	r0, [r3, #28]
  mp->next = NULL;
 8003d1a:	62dd      	str	r5, [r3, #44]	; 0x2c
  mp->object_size = size;
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30
  mp->align = align;
 8003d1e:	6358      	str	r0, [r3, #52]	; 0x34
  tqp->next = (thread_t *)tqp;
 8003d20:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003d22:	605b      	str	r3, [r3, #4]
  tp->name      = name;
 8003d24:	4b87      	ldr	r3, [pc, #540]	; (8003f44 <main+0x474>)
  tp->prio      = prio;
 8003d26:	3264      	adds	r2, #100	; 0x64
  tp->name      = name;
 8003d28:	64a3      	str	r3, [r4, #72]	; 0x48
  REG_INSERT(tp);
 8003d2a:	0023      	movs	r3, r4
  tlp->next = (thread_t *)tlp;
 8003d2c:	3158      	adds	r1, #88	; 0x58
  tp->prio      = prio;
 8003d2e:	63a2      	str	r2, [r4, #56]	; 0x38
  tp->realprio  = prio;
 8003d30:	66e2      	str	r2, [r4, #108]	; 0x6c
  tp->mtxlist   = NULL;
 8003d32:	66a5      	str	r5, [r4, #104]	; 0x68
  tp->epending  = (eventmask_t)0;
 8003d34:	6665      	str	r5, [r4, #100]	; 0x64
  REG_INSERT(tp);
 8003d36:	6424      	str	r4, [r4, #64]	; 0x40
 8003d38:	65a1      	str	r1, [r4, #88]	; 0x58
  tqp->next = (thread_t *)tqp;
 8003d3a:	0021      	movs	r1, r4
 8003d3c:	3330      	adds	r3, #48	; 0x30
 8003d3e:	6123      	str	r3, [r4, #16]
 8003d40:	6163      	str	r3, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8003d42:	61a3      	str	r3, [r4, #24]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8003d44:	464a      	mov	r2, r9
 8003d46:	2350      	movs	r3, #80	; 0x50
 8003d48:	315c      	adds	r1, #92	; 0x5c
 8003d4a:	65e1      	str	r1, [r4, #92]	; 0x5c
  tqp->prev = (thread_t *)tqp;
 8003d4c:	6621      	str	r1, [r4, #96]	; 0x60
 8003d4e:	2101      	movs	r1, #1
 8003d50:	52e2      	strh	r2, [r4, r3]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d52:	4652      	mov	r2, sl
 8003d54:	487c      	ldr	r0, [pc, #496]	; (8003f48 <main+0x478>)
  tp->flags     = CH_FLAG_MODE_STATIC;
 8003d56:	3302      	adds	r3, #2
 8003d58:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003d5a:	54e1      	strb	r1, [r4, r3]
 8003d5c:	6a03      	ldr	r3, [r0, #32]
  REG_INSERT(tp);
 8003d5e:	6464      	str	r4, [r4, #68]	; 0x44
 8003d60:	4013      	ands	r3, r2
 8003d62:	6203      	str	r3, [r0, #32]
 8003d64:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8003d66:	b672      	cpsid	i
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003d68:	226c      	movs	r2, #108	; 0x6c
 8003d6a:	4694      	mov	ip, r2
  tp->wabase = tdp->wbase;
 8003d6c:	4b77      	ldr	r3, [pc, #476]	; (8003f4c <main+0x47c>)
 8003d6e:	20ac      	movs	r0, #172	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003d70:	449c      	add	ip, r3
 8003d72:	4662      	mov	r2, ip
  tp->wabase = tdp->wbase;
 8003d74:	501b      	str	r3, [r3, r0]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003d76:	3810      	subs	r0, #16
 8003d78:	501a      	str	r2, [r3, r0]
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	4874      	ldr	r0, [pc, #464]	; (8003f50 <main+0x480>)
 8003d7e:	509d      	str	r5, [r3, r2]
 8003d80:	67d8      	str	r0, [r3, #124]	; 0x7c
 8003d82:	4874      	ldr	r0, [pc, #464]	; (8003f54 <main+0x484>)
 8003d84:	320c      	adds	r2, #12
 8003d86:	5098      	str	r0, [r3, r2]
  tp->prio      = prio;
 8003d88:	4648      	mov	r0, r9
 8003d8a:	320c      	adds	r2, #12
 8003d8c:	5098      	str	r0, [r3, r2]
  tp->realprio  = prio;
 8003d8e:	3234      	adds	r2, #52	; 0x34
 8003d90:	5098      	str	r0, [r3, r2]
  tp->mtxlist   = NULL;
 8003d92:	3a04      	subs	r2, #4
 8003d94:	509d      	str	r5, [r3, r2]
  tp->epending  = (eventmask_t)0;
 8003d96:	3a04      	subs	r2, #4
 8003d98:	509d      	str	r5, [r3, r2]
  tp->state     = CH_STATE_WTSTART;
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	3a14      	subs	r2, #20
 8003d9e:	5298      	strh	r0, [r3, r2]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8003da0:	3202      	adds	r2, #2
 8003da2:	5499      	strb	r1, [r3, r2]
  tp->name      = name;
 8003da4:	496c      	ldr	r1, [pc, #432]	; (8003f58 <main+0x488>)
 8003da6:	3a0a      	subs	r2, #10
 8003da8:	5099      	str	r1, [r3, r2]
  REG_INSERT(tp);
 8003daa:	0018      	movs	r0, r3
 8003dac:	21a4      	movs	r1, #164	; 0xa4
 8003dae:	3a08      	subs	r2, #8
 8003db0:	509c      	str	r4, [r3, r2]
 8003db2:	6962      	ldr	r2, [r4, #20]
 8003db4:	3090      	adds	r0, #144	; 0x90
 8003db6:	505a      	str	r2, [r3, r1]
  tlp->next = (thread_t *)tlp;
 8003db8:	0019      	movs	r1, r3
 8003dba:	6110      	str	r0, [r2, #16]
 8003dbc:	22b8      	movs	r2, #184	; 0xb8
 8003dbe:	31b8      	adds	r1, #184	; 0xb8
 8003dc0:	5099      	str	r1, [r3, r2]
  tqp->next = (thread_t *)tqp;
 8003dc2:	001a      	movs	r2, r3
 8003dc4:	21bc      	movs	r1, #188	; 0xbc
 8003dc6:	32bc      	adds	r2, #188	; 0xbc
 8003dc8:	505a      	str	r2, [r3, r1]
  tqp->prev = (thread_t *)tqp;
 8003dca:	3104      	adds	r1, #4
 8003dcc:	505a      	str	r2, [r3, r1]
 8003dce:	6160      	str	r0, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 8003dd0:	f7ff fa7e 	bl	80032d0 <chSchWakeupS.constprop.7>
  __ASM volatile ("cpsie i" : : : "memory");
 8003dd4:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8003dd6:	b672      	cpsid	i
  i2cp->config = config;
 8003dd8:	4b60      	ldr	r3, [pc, #384]	; (8003f5c <main+0x48c>)
  dp->CR1 &= ~I2C_CR1_PE;
 8003dda:	464a      	mov	r2, r9
 8003ddc:	607b      	str	r3, [r7, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	469a      	mov	sl, r3
  dp->CR1 &= ~I2C_CR1_PE;
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4393      	bics	r3, r2
 8003de6:	4652      	mov	r2, sl
 8003de8:	6013      	str	r3, [r2, #0]
  if (i2cp->state == I2C_STOP) {
 8003dea:	783b      	ldrb	r3, [r7, #0]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d100      	bne.n	8003df2 <main+0x322>
 8003df0:	e0f3      	b.n	8003fda <main+0x50a>
 8003df2:	4a5b      	ldr	r2, [pc, #364]	; (8003f60 <main+0x490>)
 8003df4:	4b5b      	ldr	r3, [pc, #364]	; (8003f64 <main+0x494>)
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->RXDR);
 8003df6:	4650      	mov	r0, sl
 8003df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dfa:	3024      	adds	r0, #36	; 0x24
 8003dfc:	6849      	ldr	r1, [r1, #4]
 8003dfe:	6088      	str	r0, [r1, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->TXDR);
 8003e00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e02:	3004      	adds	r0, #4
 8003e04:	6849      	ldr	r1, [r1, #4]
 8003e06:	6088      	str	r0, [r1, #8]
  dp->CR1 = i2cp->config->cr1 |
 8003e08:	4651      	mov	r1, sl
 8003e0a:	600b      	str	r3, [r1, #0]
  dp->TIMINGR = i2cp->config->timingr;
 8003e0c:	610a      	str	r2, [r1, #16]
  dp->CR1 |= I2C_CR1_PE;
 8003e0e:	2201      	movs	r2, #1
 8003e10:	680b      	ldr	r3, [r1, #0]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]
  i2cp->state = I2C_READY;
 8003e16:	2302      	movs	r3, #2
 8003e18:	703b      	strb	r3, [r7, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e1a:	b662      	cpsie	i

  /*
   * Activate the I2C driver 1 and set I2C1 pins to alternate mode 1
   */
  i2cStart(&I2CD1, &i2cconfig);
  palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(1) | PAL_STM32_OTYPE_OPENDRAIN); /* I2C1 SCL */
 8003e1c:	2286      	movs	r2, #134	; 0x86
 8003e1e:	2140      	movs	r1, #64	; 0x40
 8003e20:	4851      	ldr	r0, [pc, #324]	; (8003f68 <main+0x498>)
 8003e22:	f7ff f9ad 	bl	8003180 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(1) | PAL_STM32_OTYPE_OPENDRAIN); /* I2C1 SDA */
 8003e26:	2286      	movs	r2, #134	; 0x86
 8003e28:	2180      	movs	r1, #128	; 0x80
 8003e2a:	484f      	ldr	r0, [pc, #316]	; (8003f68 <main+0x498>)
 8003e2c:	f7ff f9a8 	bl	8003180 <_pal_lld_setgroupmode>
  __ASM volatile ("cpsid i" : : : "memory");
 8003e30:	b672      	cpsid	i
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8003e32:	7a33      	ldrb	r3, [r6, #8]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d100      	bne.n	8003e3a <main+0x36a>
 8003e38:	e104      	b.n	8004044 <main+0x574>
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8003e3a:	2196      	movs	r1, #150	; 0x96
 8003e3c:	6db0      	ldr	r0, [r6, #88]	; 0x58
 8003e3e:	0209      	lsls	r1, r1, #8
 8003e40:	f7fc f9ca 	bl	80001d8 <__udivsi3>
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003e44:	2340      	movs	r3, #64	; 0x40
  USART_TypeDef *u = sdp->usart;
 8003e46:	6d75      	ldr	r5, [r6, #84]	; 0x54
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003e48:	2701      	movs	r7, #1
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8003e4a:	60e8      	str	r0, [r5, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003e4c:	606b      	str	r3, [r5, #4]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003e4e:	232e      	movs	r3, #46	; 0x2e
 8003e50:	33ff      	adds	r3, #255	; 0xff
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003e52:	60af      	str	r7, [r5, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003e54:	602b      	str	r3, [r5, #0]
  u->ICR = 0xFFFFFFFFU;
 8003e56:	3b2f      	subs	r3, #47	; 0x2f
 8003e58:	3bff      	subs	r3, #255	; 0xff
 8003e5a:	622b      	str	r3, [r5, #32]
    sdp->rxmask = 0xFF;
 8003e5c:	225c      	movs	r2, #92	; 0x5c

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8003e5e:	2502      	movs	r5, #2
 8003e60:	54b3      	strb	r3, [r6, r2]
 8003e62:	7235      	strb	r5, [r6, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e64:	b662      	cpsie	i
  /*
   * Activates the serial driver 1 using the driver default configuration.
   * PA9 and PA10 are routed to USART1.
   */
  sdStart(&SD1, NULL);
  palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(1));  /* USART1 TX. */
 8003e66:	2180      	movs	r1, #128	; 0x80
 8003e68:	2090      	movs	r0, #144	; 0x90
 8003e6a:	3226      	adds	r2, #38	; 0x26
 8003e6c:	0089      	lsls	r1, r1, #2
 8003e6e:	05c0      	lsls	r0, r0, #23
 8003e70:	f7ff f986 	bl	8003180 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(1)); /* USART1 RX. */
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	2090      	movs	r0, #144	; 0x90
 8003e78:	2282      	movs	r2, #130	; 0x82
 8003e7a:	00c9      	lsls	r1, r1, #3
 8003e7c:	05c0      	lsls	r0, r0, #23
 8003e7e:	f7ff f97f 	bl	8003180 <_pal_lld_setgroupmode>
  __ASM volatile ("cpsid i" : : : "memory");
 8003e82:	b672      	cpsid	i
  tp->wabase = (stkalign_t *)wsp;
 8003e84:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <main+0x49c>)
 8003e86:	228e      	movs	r2, #142	; 0x8e
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003e88:	0019      	movs	r1, r3
  tp->wabase = (stkalign_t *)wsp;
 8003e8a:	0052      	lsls	r2, r2, #1
 8003e8c:	509b      	str	r3, [r3, r2]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003e8e:	31dc      	adds	r1, #220	; 0xdc
 8003e90:	3a10      	subs	r2, #16
 8003e92:	5099      	str	r1, [r3, r2]
 8003e94:	4936      	ldr	r1, [pc, #216]	; (8003f70 <main+0x4a0>)
 8003e96:	3a20      	subs	r2, #32
 8003e98:	5099      	str	r1, [r3, r2]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	21f0      	movs	r1, #240	; 0xf0
 8003e9e:	482d      	ldr	r0, [pc, #180]	; (8003f54 <main+0x484>)
 8003ea0:	505a      	str	r2, [r3, r1]
 8003ea2:	310c      	adds	r1, #12
 8003ea4:	5058      	str	r0, [r3, r1]
  tp->prio      = prio;
 8003ea6:	2084      	movs	r0, #132	; 0x84
 8003ea8:	397c      	subs	r1, #124	; 0x7c
 8003eaa:	0040      	lsls	r0, r0, #1
 8003eac:	5019      	str	r1, [r3, r0]
  tp->realprio  = prio;
 8003eae:	3034      	adds	r0, #52	; 0x34
 8003eb0:	5019      	str	r1, [r3, r0]
  tp->mtxlist   = NULL;
 8003eb2:	31b8      	adds	r1, #184	; 0xb8
 8003eb4:	e05e      	b.n	8003f74 <main+0x4a4>
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	ffa1ffff 	.word	0xffa1ffff
 8003ec0:	ffbfffff 	.word	0xffbfffff
 8003ec4:	40007000 	.word	0x40007000
 8003ec8:	20000aa4 	.word	0x20000aa4
 8003ecc:	4002001c 	.word	0x4002001c
 8003ed0:	40020008 	.word	0x40020008
 8003ed4:	200008c4 	.word	0x200008c4
 8003ed8:	40020030 	.word	0x40020030
 8003edc:	40020044 	.word	0x40020044
 8003ee0:	40020058 	.word	0x40020058
 8003ee4:	40020000 	.word	0x40020000
 8003ee8:	e000e100 	.word	0xe000e100
 8003eec:	ffff00ff 	.word	0xffff00ff
 8003ef0:	ff00ffff 	.word	0xff00ffff
 8003ef4:	20000830 	.word	0x20000830
 8003ef8:	40005400 	.word	0x40005400
 8003efc:	08005184 	.word	0x08005184
 8003f00:	20000864 	.word	0x20000864
 8003f04:	0800529c 	.word	0x0800529c
 8003f08:	20000aac 	.word	0x20000aac
 8003f0c:	20000abc 	.word	0x20000abc
 8003f10:	08002ff1 	.word	0x08002ff1
 8003f14:	40013800 	.word	0x40013800
 8003f18:	02dc6c00 	.word	0x02dc6c00
 8003f1c:	40015800 	.word	0x40015800
 8003f20:	000012bf 	.word	0x000012bf
 8003f24:	200008ec 	.word	0x200008ec
 8003f28:	20000a80 	.word	0x20000a80
 8003f2c:	20000c18 	.word	0x20000c18
 8003f30:	20002000 	.word	0x20002000
 8003f34:	20000a88 	.word	0x20000a88
 8003f38:	08002fb1 	.word	0x08002fb1
 8003f3c:	20000960 	.word	0x20000960
 8003f40:	08003041 	.word	0x08003041
 8003f44:	080051e8 	.word	0x080051e8
 8003f48:	e000ed00 	.word	0xe000ed00
 8003f4c:	200009a8 	.word	0x200009a8
 8003f50:	08003171 	.word	0x08003171
 8003f54:	080001b9 	.word	0x080001b9
 8003f58:	0800520c 	.word	0x0800520c
 8003f5c:	08005200 	.word	0x08005200
 8003f60:	f0420f15 	.word	0xf0420f15
 8003f64:	0000c090 	.word	0x0000c090
 8003f68:	48000400 	.word	0x48000400
 8003f6c:	20000ad0 	.word	0x20000ad0
 8003f70:	080036a1 	.word	0x080036a1
 8003f74:	505a      	str	r2, [r3, r1]
  tp->epending  = (eventmask_t)0;
 8003f76:	3904      	subs	r1, #4
 8003f78:	505a      	str	r2, [r3, r1]
  tp->state     = CH_STATE_WTSTART;
 8003f7a:	3221      	adds	r2, #33	; 0x21
 8003f7c:	32ff      	adds	r2, #255	; 0xff
 8003f7e:	529d      	strh	r5, [r3, r2]
  tp->name      = name;
 8003f80:	4934      	ldr	r1, [pc, #208]	; (8004054 <main+0x584>)
  tp->flags     = CH_FLAG_MODE_STATIC;
 8003f82:	3202      	adds	r2, #2
 8003f84:	549f      	strb	r7, [r3, r2]
  tp->name      = name;
 8003f86:	3a0a      	subs	r2, #10
 8003f88:	5099      	str	r1, [r3, r2]
  REG_INSERT(tp);
 8003f8a:	218a      	movs	r1, #138	; 0x8a
 8003f8c:	3a08      	subs	r2, #8
 8003f8e:	509c      	str	r4, [r3, r2]
 8003f90:	6962      	ldr	r2, [r4, #20]
 8003f92:	1c58      	adds	r0, r3, #1
 8003f94:	0049      	lsls	r1, r1, #1
 8003f96:	505a      	str	r2, [r3, r1]
 8003f98:	30ff      	adds	r0, #255	; 0xff
  tlp->next = (thread_t *)tlp;
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	6110      	str	r0, [r2, #16]
 8003f9e:	2294      	movs	r2, #148	; 0x94
 8003fa0:	3129      	adds	r1, #41	; 0x29
 8003fa2:	31ff      	adds	r1, #255	; 0xff
 8003fa4:	0052      	lsls	r2, r2, #1
 8003fa6:	5099      	str	r1, [r3, r2]
  tqp->next = (thread_t *)tqp;
 8003fa8:	001a      	movs	r2, r3
 8003faa:	2196      	movs	r1, #150	; 0x96
 8003fac:	322d      	adds	r2, #45	; 0x2d
 8003fae:	32ff      	adds	r2, #255	; 0xff
 8003fb0:	0049      	lsls	r1, r1, #1
 8003fb2:	505a      	str	r2, [r3, r1]
  tqp->prev = (thread_t *)tqp;
 8003fb4:	3104      	adds	r1, #4
 8003fb6:	505a      	str	r2, [r3, r1]
 8003fb8:	6160      	str	r0, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 8003fba:	f7ff f989 	bl	80032d0 <chSchWakeupS.constprop.7>
  __ASM volatile ("cpsie i" : : : "memory");
 8003fbe:	b662      	cpsie	i
    //{
      //msg = i2cMasterReceiveTimeout(&I2CD1, 0x52, data, sizeof(data), TIME_INFINITE);
      //if (msg != MSG_OK)
        //palTogglePad(GPIOC, GPIOC_LED3);
    //}
    palTogglePad(GPIOC, GPIOC_LED3);
 8003fc0:	4c25      	ldr	r4, [pc, #148]	; (8004058 <main+0x588>)
 8003fc2:	35ff      	adds	r5, #255	; 0xff
 8003fc4:	35ff      	adds	r5, #255	; 0xff
 8003fc6:	6963      	ldr	r3, [r4, #20]
 8003fc8:	406b      	eors	r3, r5
 8003fca:	6163      	str	r3, [r4, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fcc:	b672      	cpsid	i
 8003fce:	4923      	ldr	r1, [pc, #140]	; (800405c <main+0x58c>)
 8003fd0:	2008      	movs	r0, #8
 8003fd2:	f7ff f9c5 	bl	8003360 <chSchGoSleepTimeoutS>
  __ASM volatile ("cpsie i" : : : "memory");
 8003fd6:	b662      	cpsie	i
 8003fd8:	e7f5      	b.n	8003fc6 <main+0x4f6>
    i2cp->txdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_M2P;
 8003fda:	3399      	adds	r3, #153	; 0x99
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
    i2cp->rxdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_P2M;
 8003fde:	3b10      	subs	r3, #16
 8003fe0:	623b      	str	r3, [r7, #32]
      rccResetI2C1();
 8003fe2:	465b      	mov	r3, fp
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	4659      	mov	r1, fp
 8003fea:	039b      	lsls	r3, r3, #14
 8003fec:	431a      	orrs	r2, r3
 8003fee:	610a      	str	r2, [r1, #16]
 8003ff0:	610d      	str	r5, [r1, #16]
      rccEnableI2C1(true);
 8003ff2:	69ca      	ldr	r2, [r1, #28]
        b = dmaStreamAllocate(i2cp->dmarx,
 8003ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
      rccEnableI2C1(true);
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61cb      	str	r3, [r1, #28]
        b = dmaStreamAllocate(i2cp->dmarx,
 8003ffa:	f7ff f931 	bl	8003260 <dmaStreamAllocate.constprop.22>
        b = dmaStreamAllocate(i2cp->dmatx,
 8003ffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004000:	f7ff f92e 	bl	8003260 <dmaStreamAllocate.constprop.22>
        i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	6a3a      	ldr	r2, [r7, #32]
 8004008:	015b      	lsls	r3, r3, #5
 800400a:	431a      	orrs	r2, r3
 800400c:	623a      	str	r2, [r7, #32]
        i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 800400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8004010:	21c0      	movs	r1, #192	; 0xc0
 8004012:	4313      	orrs	r3, r2
 8004014:	22c5      	movs	r2, #197	; 0xc5
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	4643      	mov	r3, r8
 800401a:	0092      	lsls	r2, r2, #2
 800401c:	589b      	ldr	r3, [r3, r2]
 800401e:	0609      	lsls	r1, r1, #24
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	430b      	orrs	r3, r1
 8004026:	4641      	mov	r1, r8
 8004028:	508b      	str	r3, [r1, r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	21c0      	movs	r1, #192	; 0xc0
 800402e:	4642      	mov	r2, r8
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	0049      	lsls	r1, r1, #1
 8004034:	5053      	str	r3, [r2, r1]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <main+0x590>)
 800403c:	6851      	ldr	r1, [r2, #4]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	430b      	orrs	r3, r1
 8004042:	e6d8      	b.n	8003df6 <main+0x326>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	4a07      	ldr	r2, [pc, #28]	; (8004064 <main+0x594>)
 8004048:	01db      	lsls	r3, r3, #7
 800404a:	6991      	ldr	r1, [r2, #24]
 800404c:	430b      	orrs	r3, r1
 800404e:	6193      	str	r3, [r2, #24]
 8004050:	e6f3      	b.n	8003e3a <main+0x36a>
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	08005214 	.word	0x08005214
 8004058:	48000800 	.word	0x48000800
 800405c:	00002710 	.word	0x00002710
 8004060:	0000c090 	.word	0x0000c090
 8004064:	40021000 	.word	0x40021000
	...

08004070 <NMI_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004070:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8004074:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004076:	f383 8809 	msr	PSP, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800407a:	b662      	cpsie	i
}
 800407c:	4770      	bx	lr
 800407e:	46c0      	nop			; (mov r8, r8)

08004080 <chThdExit>:
void chThdExit(msg_t msg) {
 8004080:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8004082:	b672      	cpsid	i
  thread_t *tp = currp;
 8004084:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <chThdExit+0x44>)
 8004086:	699c      	ldr	r4, [r3, #24]
  while (list_notempty(&tp->waiting)) {
 8004088:	0025      	movs	r5, r4
  tp->u.exitcode = msg;
 800408a:	6260      	str	r0, [r4, #36]	; 0x24
  return (bool)(tlp->next != (thread_t *)tlp);
 800408c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800408e:	3528      	adds	r5, #40	; 0x28
 8004090:	42a8      	cmp	r0, r5
 8004092:	d006      	beq.n	80040a2 <chThdExit+0x22>
  tlp->next = tp->queue.next;
 8004094:	6803      	ldr	r3, [r0, #0]
 8004096:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8004098:	f7ff f81a 	bl	80030d0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800409c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800409e:	42a8      	cmp	r0, r5
 80040a0:	d1f8      	bne.n	8004094 <chThdExit+0x14>
  if ((tp->refs == (trefs_t)0) &&
 80040a2:	2322      	movs	r3, #34	; 0x22
 80040a4:	5ce3      	ldrb	r3, [r4, r3]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d108      	bne.n	80040bc <chThdExit+0x3c>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 80040aa:	3321      	adds	r3, #33	; 0x21
  if ((tp->refs == (trefs_t)0) &&
 80040ac:	5ce3      	ldrb	r3, [r4, r3]
 80040ae:	079b      	lsls	r3, r3, #30
 80040b0:	d104      	bne.n	80040bc <chThdExit+0x3c>
    REG_REMOVE(tp);
 80040b2:	6922      	ldr	r2, [r4, #16]
 80040b4:	6963      	ldr	r3, [r4, #20]
 80040b6:	611a      	str	r2, [r3, #16]
 80040b8:	6922      	ldr	r2, [r4, #16]
 80040ba:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 80040bc:	200f      	movs	r0, #15
 80040be:	f7ff f937 	bl	8003330 <chSchGoSleepS>
}
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	200008ec 	.word	0x200008ec
	...

080040d0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 80040d0:	4a0d      	ldr	r2, [pc, #52]	; (8004108 <chSchDoReschedule+0x38>)
void chSchDoReschedule(void) {
 80040d2:	b570      	push	{r4, r5, r6, lr}
  thread_t *tp = tqp->next;
 80040d4:	6810      	ldr	r0, [r2, #0]
  thread_t *otp = currp;
 80040d6:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 80040d8:	6803      	ldr	r3, [r0, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80040da:	2420      	movs	r4, #32
  tqp->next->queue.prev = (thread_t *)tqp;
 80040dc:	605a      	str	r2, [r3, #4]
  tqp->next             = tp->queue.next;
 80040de:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80040e0:	6190      	str	r0, [r2, #24]
  currp->state = CH_STATE_CURRENT;
 80040e2:	2201      	movs	r2, #1
  tp->state = CH_STATE_READY;
 80040e4:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 80040e6:	5502      	strb	r2, [r0, r4]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80040e8:	688a      	ldr	r2, [r1, #8]
  tp->state = CH_STATE_READY;
 80040ea:	550d      	strb	r5, [r1, r4]
 80040ec:	e000      	b.n	80040f0 <chSchDoReschedule+0x20>
 80040ee:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80040f0:	689c      	ldr	r4, [r3, #8]
 80040f2:	42a2      	cmp	r2, r4
 80040f4:	d3fb      	bcc.n	80040ee <chSchDoReschedule+0x1e>
  tp->queue.prev             = cp->queue.prev;
 80040f6:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 80040f8:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 80040fa:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 80040fc:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80040fe:	6059      	str	r1, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8004100:	f7fc f84a 	bl	8000198 <_port_switch>
}
 8004104:	bd70      	pop	{r4, r5, r6, pc}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	200008ec 	.word	0x200008ec
 800410c:	00000000 	.word	0x00000000

08004110 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
 8004110:	21bc      	movs	r1, #188	; 0xbc
 8004112:	4a47      	ldr	r2, [pc, #284]	; (8004230 <__early_init+0x120>)
 8004114:	03c9      	lsls	r1, r1, #15
 8004116:	6a93      	ldr	r3, [r2, #40]	; 0x28
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8004118:	b530      	push	{r4, r5, lr}
  rccResetAHB(STM32_GPIO_EN_MASK);
 800411a:	430b      	orrs	r3, r1
 800411c:	6293      	str	r3, [r2, #40]	; 0x28
 800411e:	2300      	movs	r3, #0
 8004120:	6293      	str	r3, [r2, #40]	; 0x28
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 8004122:	6950      	ldr	r0, [r2, #20]
  gpiop->MODER   = config->moder;
 8004124:	24a0      	movs	r4, #160	; 0xa0
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 8004126:	4301      	orrs	r1, r0
 8004128:	6151      	str	r1, [r2, #20]
  gpiop->OSPEEDR = config->ospeedr;
 800412a:	20fc      	movs	r0, #252	; 0xfc
  gpiop->OTYPER  = config->otyper;
 800412c:	2190      	movs	r1, #144	; 0x90
  gpiop->OSPEEDR = config->ospeedr;
 800412e:	0600      	lsls	r0, r0, #24
  gpiop->OTYPER  = config->otyper;
 8004130:	05c9      	lsls	r1, r1, #23
 8004132:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004134:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8004136:	483f      	ldr	r0, [pc, #252]	; (8004234 <__early_init+0x124>)
  gpiop->MODER   = config->moder;
 8004138:	05a4      	lsls	r4, r4, #22
  gpiop->PUPDR   = config->pupdr;
 800413a:	60c8      	str	r0, [r1, #12]
  gpiop->ODR     = config->odr;
 800413c:	483e      	ldr	r0, [pc, #248]	; (8004238 <__early_init+0x128>)
  gpiop->OSPEEDR = config->ospeedr;
 800413e:	4d3f      	ldr	r5, [pc, #252]	; (800423c <__early_init+0x12c>)
  gpiop->ODR     = config->odr;
 8004140:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004142:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004144:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004146:	600c      	str	r4, [r1, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8004148:	24fc      	movs	r4, #252	; 0xfc
  gpiop->OTYPER  = config->otyper;
 800414a:	493d      	ldr	r1, [pc, #244]	; (8004240 <__early_init+0x130>)
  gpiop->OSPEEDR = config->ospeedr;
 800414c:	00a4      	lsls	r4, r4, #2
  gpiop->OTYPER  = config->otyper;
 800414e:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004150:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8004152:	4c3c      	ldr	r4, [pc, #240]	; (8004244 <__early_init+0x134>)
 8004154:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8004156:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004158:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800415a:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800415c:	600b      	str	r3, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 800415e:	493a      	ldr	r1, [pc, #232]	; (8004248 <__early_init+0x138>)
 8004160:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004162:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8004164:	4d39      	ldr	r5, [pc, #228]	; (800424c <__early_init+0x13c>)
 8004166:	60cd      	str	r5, [r1, #12]
  gpiop->ODR     = config->odr;
 8004168:	4d39      	ldr	r5, [pc, #228]	; (8004250 <__early_init+0x140>)
 800416a:	614d      	str	r5, [r1, #20]
  gpiop->MODER   = config->moder;
 800416c:	25a0      	movs	r5, #160	; 0xa0
 800416e:	02ed      	lsls	r5, r5, #11
  gpiop->AFRL    = config->afrl;
 8004170:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004172:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004174:	600d      	str	r5, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8004176:	4937      	ldr	r1, [pc, #220]	; (8004254 <__early_init+0x144>)
 8004178:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800417a:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800417c:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 800417e:	6148      	str	r0, [r1, #20]
  gpiop->PUPDR   = config->pupdr;
 8004180:	4c35      	ldr	r4, [pc, #212]	; (8004258 <__early_init+0x148>)
  gpiop->AFRL    = config->afrl;
 8004182:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004184:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004186:	600b      	str	r3, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8004188:	4934      	ldr	r1, [pc, #208]	; (800425c <__early_init+0x14c>)
 800418a:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800418c:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800418e:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8004190:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004192:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004194:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004196:	600b      	str	r3, [r1, #0]
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004198:	2101      	movs	r1, #1
 800419a:	6813      	ldr	r3, [r2, #0]
 800419c:	430b      	orrs	r3, r1
 800419e:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80041a0:	0013      	movs	r3, r2
 80041a2:	3101      	adds	r1, #1
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	4211      	tst	r1, r2
 80041a8:	d0fc      	beq.n	80041a4 <__early_init+0x94>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80041aa:	2103      	movs	r1, #3
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	438a      	bics	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80041b2:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <__early_init+0x120>)
 80041b4:	3109      	adds	r1, #9
 80041b6:	6853      	ldr	r3, [r2, #4]
 80041b8:	400b      	ands	r3, r1
 80041ba:	d1fc      	bne.n	80041b6 <__early_init+0xa6>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80041bc:	21f9      	movs	r1, #249	; 0xf9
 80041be:	6810      	ldr	r0, [r2, #0]
 80041c0:	4001      	ands	r1, r0
 80041c2:	6011      	str	r1, [r2, #0]
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_HSI14_ENABLED
  /* HSI14 activation.*/
  RCC->CR2 |= RCC_CR2_HSI14ON;
 80041c4:	2101      	movs	r1, #1
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80041c6:	6053      	str	r3, [r2, #4]
  RCC->CR2 |= RCC_CR2_HSI14ON;
 80041c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80041ca:	430b      	orrs	r3, r1
 80041cc:	6353      	str	r3, [r2, #52]	; 0x34
  while (!(RCC->CR2 & RCC_CR2_HSI14RDY))
 80041ce:	4a18      	ldr	r2, [pc, #96]	; (8004230 <__early_init+0x120>)
 80041d0:	3101      	adds	r1, #1
 80041d2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80041d4:	4219      	tst	r1, r3
 80041d6:	d0fc      	beq.n	80041d2 <__early_init+0xc2>
    ;                                       /* Waits until HSI48 is stable. */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80041d8:	2101      	movs	r1, #1
 80041da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80041dc:	430b      	orrs	r3, r1
 80041de:	6253      	str	r3, [r2, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80041e0:	4a13      	ldr	r2, [pc, #76]	; (8004230 <__early_init+0x120>)
 80041e2:	3101      	adds	r1, #1
 80041e4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80041e6:	4219      	tst	r1, r3
 80041e8:	d0fc      	beq.n	80041e4 <__early_init+0xd4>
#endif

  /* Clock settings.*/
  /* CFGR2 must be configured first since CFGR value could change CFGR2 */
  RCC->CFGR2 = STM32_PREDIV;
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 80041ea:	21a0      	movs	r1, #160	; 0xa0
  RCC->CFGR2 = STM32_PREDIV;
 80041ec:	2300      	movs	r3, #0
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 80041ee:	0389      	lsls	r1, r1, #14
  RCC->CFGR2 = STM32_PREDIV;
 80041f0:	62d3      	str	r3, [r2, #44]	; 0x2c
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 80041f2:	6051      	str	r1, [r2, #4]
               STM32_PLLSRC   | STM32_PPRE   | STM32_HPRE |
               ((STM32_PREDIV & STM32_PLLXTPRE_MASK) << STM32_PLLXTPRE_OFFSET);
#if STM32_CECSW == STM32_CECSW_OFF
  RCC->CFGR3 = STM32_USBSW  | STM32_I2C1SW | STM32_USART1SW;
#else
  RCC->CFGR3 = STM32_USBSW  | STM32_CECSW  | STM32_I2C1SW | STM32_USART1SW;
 80041f4:	6313      	str	r3, [r2, #48]	; 0x30
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	6811      	ldr	r1, [r2, #0]
 80041fa:	045b      	lsls	r3, r3, #17
 80041fc:	430b      	orrs	r3, r1
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80041fe:	2180      	movs	r1, #128	; 0x80
  RCC->CR   |= RCC_CR_PLLON;
 8004200:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8004202:	4a0b      	ldr	r2, [pc, #44]	; (8004230 <__early_init+0x120>)
 8004204:	0489      	lsls	r1, r1, #18
 8004206:	6813      	ldr	r3, [r2, #0]
 8004208:	420b      	tst	r3, r1
 800420a:	d0fc      	beq.n	8004206 <__early_init+0xf6>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800420c:	2111      	movs	r1, #17
 800420e:	4b14      	ldr	r3, [pc, #80]	; (8004260 <__early_init+0x150>)
 8004210:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8004212:	6853      	ldr	r3, [r2, #4]
 8004214:	390f      	subs	r1, #15
 8004216:	430b      	orrs	r3, r1
 8004218:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800421a:	4a05      	ldr	r2, [pc, #20]	; (8004230 <__early_init+0x120>)
 800421c:	310a      	adds	r1, #10
 800421e:	6853      	ldr	r3, [r2, #4]
 8004220:	400b      	ands	r3, r1
 8004222:	2b08      	cmp	r3, #8
 8004224:	d1fb      	bne.n	800421e <__early_init+0x10e>
    ;                                       /* Waits selection complete.    */
#endif

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8004226:	2101      	movs	r1, #1
 8004228:	6993      	ldr	r3, [r2, #24]
 800422a:	430b      	orrs	r3, r1
 800422c:	6193      	str	r3, [r2, #24]

  stm32_gpio_init();
  stm32_clock_init();
}
 800422e:	bd30      	pop	{r4, r5, pc}
 8004230:	40021000 	.word	0x40021000
 8004234:	65555554 	.word	0x65555554
 8004238:	0000ffff 	.word	0x0000ffff
 800423c:	f00f0000 	.word	0xf00f0000
 8004240:	48000400 	.word	0x48000400
 8004244:	55555555 	.word	0x55555555
 8004248:	48000800 	.word	0x48000800
 800424c:	05505555 	.word	0x05505555
 8004250:	0000fcff 	.word	0x0000fcff
 8004254:	48000c00 	.word	0x48000c00
 8004258:	55555550 	.word	0x55555550
 800425c:	48001400 	.word	0x48001400
 8004260:	40022000 	.word	0x40022000
	...

08004270 <VectorAC>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	4647      	mov	r7, r8
 8004274:	46ce      	mov	lr, r9
  USART_TypeDef *u = sdp->usart;
 8004276:	4c58      	ldr	r4, [pc, #352]	; (80043d8 <VectorAC+0x168>)
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004278:	b580      	push	{r7, lr}
  USART_TypeDef *u = sdp->usart;
 800427a:	6d66      	ldr	r6, [r4, #84]	; 0x54
  OSAL_IRQ_PROLOGUE();
 800427c:	46f0      	mov	r8, lr
  uint32_t cr1 = u->CR1;
 800427e:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
 8004280:	69f5      	ldr	r5, [r6, #28]
  u->ICR = isr;
 8004282:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 8004284:	072b      	lsls	r3, r5, #28
 8004286:	d11d      	bne.n	80042c4 <VectorAC+0x54>
  if (isr & USART_ISR_LBDF) {
 8004288:	05eb      	lsls	r3, r5, #23
 800428a:	d431      	bmi.n	80042f0 <VectorAC+0x80>
  if (isr & USART_ISR_RXNE) {
 800428c:	06ab      	lsls	r3, r5, #26
 800428e:	d437      	bmi.n	8004300 <VectorAC+0x90>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	423b      	tst	r3, r7
 8004294:	d001      	beq.n	800429a <VectorAC+0x2a>
 8004296:	422b      	tst	r3, r5
 8004298:	d15a      	bne.n	8004350 <VectorAC+0xe0>
  if (isr & USART_ISR_TC) {
 800429a:	066b      	lsls	r3, r5, #25
 800429c:	d509      	bpl.n	80042b2 <VectorAC+0x42>
 800429e:	b672      	cpsid	i
    if (oqIsEmptyI(&sdp->oqueue))
 80042a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80042a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d100      	bne.n	80042aa <VectorAC+0x3a>
 80042a8:	e074      	b.n	8004394 <VectorAC+0x124>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80042aa:	2340      	movs	r3, #64	; 0x40
 80042ac:	439f      	bics	r7, r3
 80042ae:	6037      	str	r7, [r6, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042b0:	b662      	cpsie	i
  if (lr != (regarm_t)0xFFFFFFF1U) {
 80042b2:	4643      	mov	r3, r8
 80042b4:	330f      	adds	r3, #15
 80042b6:	d001      	beq.n	80042bc <VectorAC+0x4c>
 80042b8:	f7fe fea2 	bl	8003000 <_port_irq_epilogue.part.0>
}
 80042bc:	bc0c      	pop	{r2, r3}
 80042be:	4690      	mov	r8, r2
 80042c0:	4699      	mov	r9, r3
 80042c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (isr & USART_ISR_ORE)
 80042c4:	0728      	lsls	r0, r5, #28
    sts |= SD_OVERRUN_ERROR;
 80042c6:	0fc0      	lsrs	r0, r0, #31
 80042c8:	01c0      	lsls	r0, r0, #7
  if (isr & USART_ISR_PE)
 80042ca:	07eb      	lsls	r3, r5, #31
 80042cc:	d501      	bpl.n	80042d2 <VectorAC+0x62>
    sts |= SD_PARITY_ERROR;
 80042ce:	2320      	movs	r3, #32
 80042d0:	4318      	orrs	r0, r3
  if (isr & USART_ISR_FE)
 80042d2:	07ab      	lsls	r3, r5, #30
 80042d4:	d501      	bpl.n	80042da <VectorAC+0x6a>
    sts |= SD_FRAMING_ERROR;
 80042d6:	2340      	movs	r3, #64	; 0x40
 80042d8:	4318      	orrs	r0, r3
  if (isr & USART_ISR_NE)
 80042da:	076b      	lsls	r3, r5, #29
 80042dc:	d502      	bpl.n	80042e4 <VectorAC+0x74>
    sts |= SD_NOISE_ERROR;
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	4318      	orrs	r0, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80042e4:	b672      	cpsid	i
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80042e6:	f7fe ff0b 	bl	8003100 <chEvtBroadcastFlagsI.constprop.13>
  __ASM volatile ("cpsie i" : : : "memory");
 80042ea:	b662      	cpsie	i
  if (isr & USART_ISR_LBDF) {
 80042ec:	05eb      	lsls	r3, r5, #23
 80042ee:	d5cd      	bpl.n	800428c <VectorAC+0x1c>
  __ASM volatile ("cpsid i" : : : "memory");
 80042f0:	b672      	cpsid	i
 80042f2:	2080      	movs	r0, #128	; 0x80
 80042f4:	0080      	lsls	r0, r0, #2
 80042f6:	f7fe ff03 	bl	8003100 <chEvtBroadcastFlagsI.constprop.13>
  __ASM volatile ("cpsie i" : : : "memory");
 80042fa:	b662      	cpsie	i
  if (isr & USART_ISR_RXNE) {
 80042fc:	06ab      	lsls	r3, r5, #26
 80042fe:	d5c7      	bpl.n	8004290 <VectorAC+0x20>
  __ASM volatile ("cpsid i" : : : "memory");
 8004300:	b672      	cpsid	i
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 8004302:	235c      	movs	r3, #92	; 0x5c
 8004304:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 8004306:	5ce3      	ldrb	r3, [r4, r3]
 8004308:	401a      	ands	r2, r3
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800430a:	6963      	ldr	r3, [r4, #20]
 800430c:	4691      	mov	r9, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d048      	beq.n	80043a4 <VectorAC+0x134>
  if (!iqIsFullI(iqp)) {
 8004312:	6a23      	ldr	r3, [r4, #32]
 8004314:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004316:	4293      	cmp	r3, r2
 8004318:	d048      	beq.n	80043ac <VectorAC+0x13c>
    iqp->q_counter++;
 800431a:	6962      	ldr	r2, [r4, #20]
 800431c:	3201      	adds	r2, #1
 800431e:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	6222      	str	r2, [r4, #32]
 8004324:	464a      	mov	r2, r9
 8004326:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8004328:	6a23      	ldr	r3, [r4, #32]
 800432a:	69e2      	ldr	r2, [r4, #28]
 800432c:	4293      	cmp	r3, r2
 800432e:	d301      	bcc.n	8004334 <VectorAC+0xc4>
      iqp->q_wrptr = iqp->q_buffer;
 8004330:	69a3      	ldr	r3, [r4, #24]
 8004332:	6223      	str	r3, [r4, #32]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8004334:	0023      	movs	r3, r4
  return (bool)(tqp->next != (const thread_t *)tqp);
 8004336:	68e0      	ldr	r0, [r4, #12]
 8004338:	330c      	adds	r3, #12
 800433a:	4298      	cmp	r0, r3
 800433c:	d006      	beq.n	800434c <VectorAC+0xdc>
  tqp->next             = tp->queue.next;
 800433e:	6802      	ldr	r2, [r0, #0]
 8004340:	60e2      	str	r2, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004342:	6053      	str	r3, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8004344:	2300      	movs	r3, #0
 8004346:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8004348:	f7fe fec2 	bl	80030d0 <chSchReadyI>
  __ASM volatile ("cpsie i" : : : "memory");
 800434c:	b662      	cpsie	i
 800434e:	e79f      	b.n	8004290 <VectorAC+0x20>
  __ASM volatile ("cpsid i" : : : "memory");
 8004350:	b672      	cpsid	i
  if (!oqIsEmptyI(oqp)) {
 8004352:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004354:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004356:	429a      	cmp	r2, r3
 8004358:	d030      	beq.n	80043bc <VectorAC+0x14c>
    oqp->q_counter++;
 800435a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800435c:	3201      	adds	r2, #1
 800435e:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	64a2      	str	r2, [r4, #72]	; 0x48
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	4699      	mov	r9, r3
    if (oqp->q_rdptr >= oqp->q_top) {
 8004368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800436a:	429a      	cmp	r2, r3
 800436c:	d301      	bcc.n	8004372 <VectorAC+0x102>
      oqp->q_rdptr = oqp->q_buffer;
 800436e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004370:	64a3      	str	r3, [r4, #72]	; 0x48
 8004372:	0023      	movs	r3, r4
  return (bool)(tqp->next != (const thread_t *)tqp);
 8004374:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004376:	3330      	adds	r3, #48	; 0x30
 8004378:	4298      	cmp	r0, r3
 800437a:	d006      	beq.n	800438a <VectorAC+0x11a>
  tqp->next             = tp->queue.next;
 800437c:	6802      	ldr	r2, [r0, #0]
 800437e:	6322      	str	r2, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8004380:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = msg;
 8004382:	2300      	movs	r3, #0
 8004384:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8004386:	f7fe fea3 	bl	80030d0 <chSchReadyI>
      u->TDR = b;
 800438a:	464b      	mov	r3, r9
 800438c:	b29b      	uxth	r3, r3
 800438e:	8533      	strh	r3, [r6, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004390:	b662      	cpsie	i
 8004392:	e782      	b.n	800429a <VectorAC+0x2a>
    if (oqIsEmptyI(&sdp->oqueue))
 8004394:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004396:	2b00      	cmp	r3, #0
 8004398:	d100      	bne.n	800439c <VectorAC+0x12c>
 800439a:	e786      	b.n	80042aa <VectorAC+0x3a>
 800439c:	2010      	movs	r0, #16
 800439e:	f7fe feaf 	bl	8003100 <chEvtBroadcastFlagsI.constprop.13>
 80043a2:	e782      	b.n	80042aa <VectorAC+0x3a>
 80043a4:	2004      	movs	r0, #4
 80043a6:	f7fe feab 	bl	8003100 <chEvtBroadcastFlagsI.constprop.13>
 80043aa:	e7b2      	b.n	8004312 <VectorAC+0xa2>
  if (!iqIsFullI(iqp)) {
 80043ac:	6962      	ldr	r2, [r4, #20]
 80043ae:	2a00      	cmp	r2, #0
 80043b0:	d0b3      	beq.n	800431a <VectorAC+0xaa>
 80043b2:	2080      	movs	r0, #128	; 0x80
 80043b4:	00c0      	lsls	r0, r0, #3
 80043b6:	f7fe fea3 	bl	8003100 <chEvtBroadcastFlagsI.constprop.13>
 80043ba:	e7c7      	b.n	800434c <VectorAC+0xdc>
  if (!oqIsEmptyI(oqp)) {
 80043bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80043be:	2a00      	cmp	r2, #0
 80043c0:	d0cb      	beq.n	800435a <VectorAC+0xea>
 80043c2:	2008      	movs	r0, #8
 80043c4:	f7fe fe9c 	bl	8003100 <chEvtBroadcastFlagsI.constprop.13>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 80043c8:	23c0      	movs	r3, #192	; 0xc0
 80043ca:	003a      	movs	r2, r7
 80043cc:	439a      	bics	r2, r3
 80043ce:	0013      	movs	r3, r2
 80043d0:	2240      	movs	r2, #64	; 0x40
 80043d2:	4313      	orrs	r3, r2
 80043d4:	6033      	str	r3, [r6, #0]
 80043d6:	e7db      	b.n	8004390 <VectorAC+0x120>
 80043d8:	20000864 	.word	0x20000864
 80043dc:	00000000 	.word	0x00000000

080043e0 <Vector7C>:
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80043e0:	2180      	movs	r1, #128	; 0x80
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80043e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e4:	46ce      	mov	lr, r9
 80043e6:	4647      	mov	r7, r8
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80043e8:	05c9      	lsls	r1, r1, #23
 80043ea:	690b      	ldr	r3, [r1, #16]
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80043ec:	b580      	push	{r7, lr}
  OSAL_IRQ_PROLOGUE();
 80043ee:	46f1      	mov	r9, lr
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80043f0:	079b      	lsls	r3, r3, #30
 80043f2:	d408      	bmi.n	8004406 <Vector7C+0x26>
 80043f4:	464b      	mov	r3, r9
 80043f6:	330f      	adds	r3, #15
 80043f8:	d001      	beq.n	80043fe <Vector7C+0x1e>
 80043fa:	f7fe fe01 	bl	8003000 <_port_irq_epilogue.part.0>
}
 80043fe:	bc0c      	pop	{r2, r3}
 8004400:	4690      	mov	r8, r2
 8004402:	4699      	mov	r9, r3
 8004404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    STM32_ST_TIM->SR = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	610b      	str	r3, [r1, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800440a:	b672      	cpsid	i
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 800440c:	4c1b      	ldr	r4, [pc, #108]	; (800447c <Vector7C+0x9c>)
 800440e:	4688      	mov	r8, r1

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8004410:	0026      	movs	r6, r4
  vtp = ch.vtlist.next;
 8004412:	69e3      	ldr	r3, [r4, #28]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8004414:	361c      	adds	r6, #28
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	4641      	mov	r1, r8
 800441a:	6a48      	ldr	r0, [r1, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800441c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 800441e:	1a45      	subs	r5, r0, r1
    if (nowdelta < vtp->delta) {
 8004420:	4295      	cmp	r5, r2
 8004422:	d317      	bcc.n	8004454 <Vector7C+0x74>
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8004424:	2700      	movs	r7, #0
 8004426:	e008      	b.n	800443a <Vector7C+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
 8004428:	b662      	cpsie	i
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800442a:	6918      	ldr	r0, [r3, #16]
 800442c:	4788      	blx	r1
  __ASM volatile ("cpsid i" : : : "memory");
 800442e:	b672      	cpsid	i
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8004430:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	4295      	cmp	r5, r2
 8004436:	d3ef      	bcc.n	8004418 <Vector7C+0x38>
 8004438:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      ch.vtlist.lasttime += vtp->delta;
 800443a:	1889      	adds	r1, r1, r2
      nowdelta -= vtp->delta;
 800443c:	1aad      	subs	r5, r5, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800443e:	681a      	ldr	r2, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 8004440:	62a1      	str	r1, [r4, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8004442:	6056      	str	r6, [r2, #4]
      fn = vtp->func;
 8004444:	68d9      	ldr	r1, [r3, #12]
      ch.vtlist.next = vtp->next;
 8004446:	61e2      	str	r2, [r4, #28]
      vtp->func = NULL;
 8004448:	60df      	str	r7, [r3, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800444a:	42b2      	cmp	r2, r6
 800444c:	d1ec      	bne.n	8004428 <Vector7C+0x48>
  STM32_ST_TIM->DIER = 0;
 800444e:	4642      	mov	r2, r8
 8004450:	60d7      	str	r7, [r2, #12]
 8004452:	e7e9      	b.n	8004428 <Vector7C+0x48>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8004454:	0021      	movs	r1, r4
 8004456:	69e2      	ldr	r2, [r4, #28]
 8004458:	311c      	adds	r1, #28
 800445a:	428a      	cmp	r2, r1
 800445c:	d00a      	beq.n	8004474 <Vector7C+0x94>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 800445e:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 8004460:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8004462:	1b4d      	subs	r5, r1, r5
 8004464:	6095      	str	r5, [r2, #8]
  return systime + (systime_t)interval;
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d305      	bcc.n	8004478 <Vector7C+0x98>
 800446c:	1818      	adds	r0, r3, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	05db      	lsls	r3, r3, #23
 8004472:	6358      	str	r0, [r3, #52]	; 0x34
  __ASM volatile ("cpsie i" : : : "memory");
 8004474:	b662      	cpsie	i
 8004476:	e7bd      	b.n	80043f4 <Vector7C+0x14>
 8004478:	2302      	movs	r3, #2
 800447a:	e7f7      	b.n	800446c <Vector7C+0x8c>
 800447c:	200008ec 	.word	0x200008ec

08004480 <Vector9C>:
  if (isr & I2C_ERROR_MASK)
 8004480:	21fc      	movs	r1, #252	; 0xfc
OSAL_IRQ_HANDLER(STM32_I2C1_GLOBAL_HANDLER) {
 8004482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004484:	46c6      	mov	lr, r8
  uint32_t isr = I2CD1.i2c->ISR;
 8004486:	4a89      	ldr	r2, [pc, #548]	; (80046ac <Vector9C+0x22c>)
  if (isr & I2C_ERROR_MASK)
 8004488:	0189      	lsls	r1, r1, #6
  uint32_t isr = I2CD1.i2c->ISR;
 800448a:	6b10      	ldr	r0, [r2, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_I2C1_GLOBAL_HANDLER) {
 800448c:	b500      	push	{lr}
  uint32_t isr = I2CD1.i2c->ISR;
 800448e:	6983      	ldr	r3, [r0, #24]
  OSAL_IRQ_PROLOGUE();
 8004490:	4674      	mov	r4, lr
  I2CD1.i2c->ICR = isr;
 8004492:	61c3      	str	r3, [r0, #28]
  if (isr & I2C_ERROR_MASK)
 8004494:	4019      	ands	r1, r3
 8004496:	d127      	bne.n	80044e8 <Vector9C+0x68>
  else if (isr & I2C_INT_MASK)
 8004498:	25fe      	movs	r5, #254	; 0xfe
 800449a:	421d      	tst	r5, r3
 800449c:	d106      	bne.n	80044ac <Vector9C+0x2c>
 800449e:	340f      	adds	r4, #15
 80044a0:	d001      	beq.n	80044a6 <Vector9C+0x26>
 80044a2:	f7fe fdad 	bl	8003000 <_port_irq_epilogue.part.0>
}
 80044a6:	bc04      	pop	{r2}
 80044a8:	4690      	mov	r8, r2
 80044aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((isr & I2C_ISR_NACKF) != 0U) {
 80044ac:	06dd      	lsls	r5, r3, #27
 80044ae:	d456      	bmi.n	800455e <Vector9C+0xde>
  if ((isr & I2C_ISR_TCR) != 0U) {
 80044b0:	0619      	lsls	r1, r3, #24
 80044b2:	d400      	bmi.n	80044b6 <Vector9C+0x36>
 80044b4:	e088      	b.n	80045c8 <Vector9C+0x148>
    if (i2cp->state == I2C_ACTIVE_TX) {
 80044b6:	7813      	ldrb	r3, [r2, #0]
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d100      	bne.n	80044be <Vector9C+0x3e>
 80044bc:	e0ad      	b.n	800461a <Vector9C+0x19a>
  n = i2c_lld_get_rxbytes(i2cp);
 80044be:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	685d      	ldr	r5, [r3, #4]
  if (n > 255U) {
 80044c4:	2dff      	cmp	r5, #255	; 0xff
 80044c6:	d900      	bls.n	80044ca <Vector9C+0x4a>
 80044c8:	e0a2      	b.n	8004610 <Vector9C+0x190>
    reload = 0U;
 80044ca:	2600      	movs	r6, #0
 80044cc:	042d      	lsls	r5, r5, #16
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 80044ce:	2380      	movs	r3, #128	; 0x80
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 80044d0:	6852      	ldr	r2, [r2, #4]
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	6892      	ldr	r2, [r2, #8]
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 80044d6:	6841      	ldr	r1, [r0, #4]
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 80044d8:	4313      	orrs	r3, r2
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 80044da:	4a75      	ldr	r2, [pc, #468]	; (80046b0 <Vector9C+0x230>)
 80044dc:	400a      	ands	r2, r1
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 80044de:	4313      	orrs	r3, r2
 80044e0:	4333      	orrs	r3, r6
 80044e2:	432b      	orrs	r3, r5
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 80044e4:	6043      	str	r3, [r0, #4]
 80044e6:	e7da      	b.n	800449e <Vector9C+0x1e>
  dmaStreamDisable(i2cp->dmatx);
 80044e8:	270f      	movs	r7, #15
 80044ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044ec:	684d      	ldr	r5, [r1, #4]
 80044ee:	6828      	ldr	r0, [r5, #0]
 80044f0:	43b8      	bics	r0, r7
 80044f2:	6028      	str	r0, [r5, #0]
 80044f4:	7c0d      	ldrb	r5, [r1, #16]
 80044f6:	6808      	ldr	r0, [r1, #0]
 80044f8:	210e      	movs	r1, #14
 80044fa:	000e      	movs	r6, r1
 80044fc:	40ae      	lsls	r6, r5
 80044fe:	6046      	str	r6, [r0, #4]
  dmaStreamDisable(i2cp->dmarx);
 8004500:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004502:	6846      	ldr	r6, [r0, #4]
 8004504:	6835      	ldr	r5, [r6, #0]
 8004506:	43bd      	bics	r5, r7
 8004508:	6035      	str	r5, [r6, #0]
 800450a:	6805      	ldr	r5, [r0, #0]
 800450c:	7c00      	ldrb	r0, [r0, #16]
 800450e:	4081      	lsls	r1, r0
 8004510:	6069      	str	r1, [r5, #4]
 8004512:	6891      	ldr	r1, [r2, #8]
  if (isr & I2C_ISR_BERR)
 8004514:	05d8      	lsls	r0, r3, #23
 8004516:	d502      	bpl.n	800451e <Vector9C+0x9e>
    i2cp->errors |= I2C_BUS_ERROR;
 8004518:	2001      	movs	r0, #1
 800451a:	4301      	orrs	r1, r0
 800451c:	6091      	str	r1, [r2, #8]
  if (isr & I2C_ISR_ARLO)
 800451e:	0598      	lsls	r0, r3, #22
 8004520:	d502      	bpl.n	8004528 <Vector9C+0xa8>
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8004522:	2002      	movs	r0, #2
 8004524:	4301      	orrs	r1, r0
 8004526:	6091      	str	r1, [r2, #8]
 8004528:	2080      	movs	r0, #128	; 0x80
 800452a:	0140      	lsls	r0, r0, #5
 800452c:	4018      	ands	r0, r3
  if (isr & I2C_ISR_OVR)
 800452e:	055b      	lsls	r3, r3, #21
 8004530:	d510      	bpl.n	8004554 <Vector9C+0xd4>
    i2cp->errors |= I2C_OVERRUN;
 8004532:	2308      	movs	r3, #8
 8004534:	4319      	orrs	r1, r3
 8004536:	6091      	str	r1, [r2, #8]
  if (isr & I2C_ISR_TIMEOUT)
 8004538:	2800      	cmp	r0, #0
 800453a:	d141      	bne.n	80045c0 <Vector9C+0x140>
  __ASM volatile ("cpsid i" : : : "memory");
 800453c:	b672      	cpsid	i
  if (*trp != NULL) {
 800453e:	69d0      	ldr	r0, [r2, #28]
 8004540:	2800      	cmp	r0, #0
 8004542:	d005      	beq.n	8004550 <Vector9C+0xd0>
    *trp = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61d3      	str	r3, [r2, #28]
    tp->u.rdymsg = msg;
 8004548:	3b02      	subs	r3, #2
 800454a:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800454c:	f7fe fdc0 	bl	80030d0 <chSchReadyI>
  __ASM volatile ("cpsie i" : : : "memory");
 8004550:	b662      	cpsie	i
 8004552:	e7a4      	b.n	800449e <Vector9C+0x1e>
 8004554:	2800      	cmp	r0, #0
 8004556:	d133      	bne.n	80045c0 <Vector9C+0x140>
  if (i2cp->errors != I2C_NO_ERROR)
 8004558:	2900      	cmp	r1, #0
 800455a:	d0a0      	beq.n	800449e <Vector9C+0x1e>
 800455c:	e7ee      	b.n	800453c <Vector9C+0xbc>
    dmaStreamDisable(i2cp->dmatx);
 800455e:	270f      	movs	r7, #15
 8004560:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004562:	46bc      	mov	ip, r7
 8004564:	685e      	ldr	r6, [r3, #4]
 8004566:	6835      	ldr	r5, [r6, #0]
 8004568:	43bd      	bics	r5, r7
 800456a:	6035      	str	r5, [r6, #0]
 800456c:	7c1e      	ldrb	r6, [r3, #16]
 800456e:	681d      	ldr	r5, [r3, #0]
 8004570:	230e      	movs	r3, #14
 8004572:	001f      	movs	r7, r3
 8004574:	40b7      	lsls	r7, r6
 8004576:	4698      	mov	r8, r3
    dmaStreamDisable(i2cp->dmarx);
 8004578:	4663      	mov	r3, ip
    dmaStreamDisable(i2cp->dmatx);
 800457a:	606f      	str	r7, [r5, #4]
    dmaStreamDisable(i2cp->dmarx);
 800457c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800457e:	686f      	ldr	r7, [r5, #4]
 8004580:	683e      	ldr	r6, [r7, #0]
 8004582:	439e      	bics	r6, r3
 8004584:	4643      	mov	r3, r8
 8004586:	603e      	str	r6, [r7, #0]
 8004588:	682e      	ldr	r6, [r5, #0]
 800458a:	7c2d      	ldrb	r5, [r5, #16]
 800458c:	40ab      	lsls	r3, r5
 800458e:	6073      	str	r3, [r6, #4]
    i2cp->errors |= I2C_ACK_FAILURE;
 8004590:	2304      	movs	r3, #4
 8004592:	6895      	ldr	r5, [r2, #8]
 8004594:	432b      	orrs	r3, r5
 8004596:	6093      	str	r3, [r2, #8]
    dp->CR2 |= I2C_CR2_STOP;
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	6845      	ldr	r5, [r0, #4]
 800459c:	01db      	lsls	r3, r3, #7
 800459e:	432b      	orrs	r3, r5
    dp->CR1 &= ~(I2C_CR1_TCIE | I2C_CR1_TXIE | I2C_CR1_RXIE);
 80045a0:	2546      	movs	r5, #70	; 0x46
    dp->CR2 |= I2C_CR2_STOP;
 80045a2:	6043      	str	r3, [r0, #4]
    dp->CR1 &= ~(I2C_CR1_TCIE | I2C_CR1_TXIE | I2C_CR1_RXIE);
 80045a4:	6803      	ldr	r3, [r0, #0]
 80045a6:	43ab      	bics	r3, r5
 80045a8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045aa:	b672      	cpsid	i
  if (*trp != NULL) {
 80045ac:	69d0      	ldr	r0, [r2, #28]
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d0ce      	beq.n	8004550 <Vector9C+0xd0>
    tp->u.rdymsg = msg;
 80045b2:	2302      	movs	r3, #2
 80045b4:	425b      	negs	r3, r3
    *trp = NULL;
 80045b6:	61d1      	str	r1, [r2, #28]
    tp->u.rdymsg = msg;
 80045b8:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80045ba:	f7fe fd89 	bl	80030d0 <chSchReadyI>
 80045be:	e7c7      	b.n	8004550 <Vector9C+0xd0>
    i2cp->errors |= I2C_TIMEOUT;
 80045c0:	2320      	movs	r3, #32
 80045c2:	4319      	orrs	r1, r3
 80045c4:	6091      	str	r1, [r2, #8]
 80045c6:	e7b9      	b.n	800453c <Vector9C+0xbc>
  if ((isr & I2C_ISR_TC) != 0U) {
 80045c8:	065b      	lsls	r3, r3, #25
 80045ca:	d400      	bmi.n	80045ce <Vector9C+0x14e>
 80045cc:	e767      	b.n	800449e <Vector9C+0x1e>
 80045ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    if (i2cp->state == I2C_ACTIVE_TX) {
 80045d0:	7815      	ldrb	r5, [r2, #0]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	2d03      	cmp	r5, #3
 80045d6:	d031      	beq.n	800463c <Vector9C+0x1bc>
      dmaStreamDisable(i2cp->dmarx);
 80045d8:	260f      	movs	r6, #15
 80045da:	680d      	ldr	r5, [r1, #0]
 80045dc:	43b5      	bics	r5, r6
 80045de:	600d      	str	r5, [r1, #0]
 80045e0:	7c1d      	ldrb	r5, [r3, #16]
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	230e      	movs	r3, #14
 80045e6:	40ab      	lsls	r3, r5
 80045e8:	604b      	str	r3, [r1, #4]
    dp->CR2 |= I2C_CR2_STOP;
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	6841      	ldr	r1, [r0, #4]
 80045ee:	01db      	lsls	r3, r3, #7
 80045f0:	430b      	orrs	r3, r1
    dp->CR1 &= ~I2C_CR1_TCIE;
 80045f2:	2140      	movs	r1, #64	; 0x40
    dp->CR2 |= I2C_CR2_STOP;
 80045f4:	6043      	str	r3, [r0, #4]
    dp->CR1 &= ~I2C_CR1_TCIE;
 80045f6:	6803      	ldr	r3, [r0, #0]
 80045f8:	438b      	bics	r3, r1
 80045fa:	6003      	str	r3, [r0, #0]
 80045fc:	b672      	cpsid	i
  if (*trp != NULL) {
 80045fe:	69d0      	ldr	r0, [r2, #28]
 8004600:	2800      	cmp	r0, #0
 8004602:	d0a5      	beq.n	8004550 <Vector9C+0xd0>
    *trp = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	61d3      	str	r3, [r2, #28]
    tp->u.rdymsg = msg;
 8004608:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800460a:	f7fe fd61 	bl	80030d0 <chSchReadyI>
 800460e:	e79f      	b.n	8004550 <Vector9C+0xd0>
  if (n > 255U) {
 8004610:	25ff      	movs	r5, #255	; 0xff
    reload = I2C_CR2_RELOAD;
 8004612:	2680      	movs	r6, #128	; 0x80
  if (n > 255U) {
 8004614:	042d      	lsls	r5, r5, #16
    reload = I2C_CR2_RELOAD;
 8004616:	0476      	lsls	r6, r6, #17
 8004618:	e759      	b.n	80044ce <Vector9C+0x4e>
  n = i2c_lld_get_txbytes(i2cp);
 800461a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	6859      	ldr	r1, [r3, #4]
  if (n > 255U) {
 8004620:	29ff      	cmp	r1, #255	; 0xff
 8004622:	d838      	bhi.n	8004696 <Vector9C+0x216>
    reload = 0U;
 8004624:	2500      	movs	r5, #0
 8004626:	0409      	lsls	r1, r1, #16
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8004628:	6852      	ldr	r2, [r2, #4]
 800462a:	6843      	ldr	r3, [r0, #4]
 800462c:	4e20      	ldr	r6, [pc, #128]	; (80046b0 <Vector9C+0x230>)
 800462e:	6892      	ldr	r2, [r2, #8]
 8004630:	4033      	ands	r3, r6
 8004632:	4313      	orrs	r3, r2
            (n << 16U) | reload;
 8004634:	430b      	orrs	r3, r1
 8004636:	432b      	orrs	r3, r5
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8004638:	6043      	str	r3, [r0, #4]
 800463a:	e730      	b.n	800449e <Vector9C+0x1e>
      dmaStreamDisable(i2cp->dmatx);
 800463c:	270f      	movs	r7, #15
 800463e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004640:	685e      	ldr	r6, [r3, #4]
 8004642:	6835      	ldr	r5, [r6, #0]
 8004644:	43bd      	bics	r5, r7
 8004646:	6035      	str	r5, [r6, #0]
 8004648:	7c1e      	ldrb	r6, [r3, #16]
 800464a:	681d      	ldr	r5, [r3, #0]
 800464c:	230e      	movs	r3, #14
 800464e:	40b3      	lsls	r3, r6
 8004650:	606b      	str	r3, [r5, #4]
      if (i2c_lld_get_rxbytes(i2cp) > 0U) {
 8004652:	684b      	ldr	r3, [r1, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0c8      	beq.n	80045ea <Vector9C+0x16a>
  n = i2c_lld_get_rxbytes(i2cp);
 8004658:	684e      	ldr	r6, [r1, #4]
  if (n > 255U) {
 800465a:	2eff      	cmp	r6, #255	; 0xff
 800465c:	d820      	bhi.n	80046a0 <Vector9C+0x220>
    reload = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	469c      	mov	ip, r3
 8004662:	0436      	lsls	r6, r6, #16
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8004664:	6853      	ldr	r3, [r2, #4]
 8004666:	6845      	ldr	r5, [r0, #4]
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8004668:	689f      	ldr	r7, [r3, #8]
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	433b      	orrs	r3, r7
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 8004670:	4f0f      	ldr	r7, [pc, #60]	; (80046b0 <Vector9C+0x230>)
 8004672:	403d      	ands	r5, r7
            I2C_CR2_RD_WRN | (n << 16U) | reload;
 8004674:	432b      	orrs	r3, r5
 8004676:	4665      	mov	r5, ip
 8004678:	4333      	orrs	r3, r6
 800467a:	432b      	orrs	r3, r5
        dmaStreamEnable(i2cp->dmarx);
 800467c:	2501      	movs	r5, #1
  dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
 800467e:	6043      	str	r3, [r0, #4]
        dmaStreamEnable(i2cp->dmarx);
 8004680:	680b      	ldr	r3, [r1, #0]
 8004682:	432b      	orrs	r3, r5
 8004684:	600b      	str	r3, [r1, #0]
        dp->CR2 |= I2C_CR2_START;
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	6841      	ldr	r1, [r0, #4]
 800468a:	019b      	lsls	r3, r3, #6
 800468c:	430b      	orrs	r3, r1
 800468e:	6043      	str	r3, [r0, #4]
        i2cp->state = I2C_ACTIVE_RX;
 8004690:	2304      	movs	r3, #4
 8004692:	7013      	strb	r3, [r2, #0]
 8004694:	e703      	b.n	800449e <Vector9C+0x1e>
  if (n > 255U) {
 8004696:	21ff      	movs	r1, #255	; 0xff
    reload = I2C_CR2_RELOAD;
 8004698:	2580      	movs	r5, #128	; 0x80
  if (n > 255U) {
 800469a:	0409      	lsls	r1, r1, #16
    reload = I2C_CR2_RELOAD;
 800469c:	046d      	lsls	r5, r5, #17
 800469e:	e7c3      	b.n	8004628 <Vector9C+0x1a8>
    reload = I2C_CR2_RELOAD;
 80046a0:	2380      	movs	r3, #128	; 0x80
  if (n > 255U) {
 80046a2:	26ff      	movs	r6, #255	; 0xff
    reload = I2C_CR2_RELOAD;
 80046a4:	045b      	lsls	r3, r3, #17
  if (n > 255U) {
 80046a6:	0436      	lsls	r6, r6, #16
    reload = I2C_CR2_RELOAD;
 80046a8:	469c      	mov	ip, r3
 80046aa:	e7db      	b.n	8004664 <Vector9C+0x1e4>
 80046ac:	20000830 	.word	0x20000830
 80046b0:	fe00ffff 	.word	0xfe00ffff
	...

080046c0 <Vector64>:
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 80046c0:	210e      	movs	r1, #14
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <Vector64+0x2c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80046c4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 80046c6:	681a      	ldr	r2, [r3, #0]
  OSAL_IRQ_PROLOGUE();
 80046c8:	4674      	mov	r4, lr
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 80046ca:	4011      	ands	r1, r2
 80046cc:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <Vector64+0x30>)
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	4211      	tst	r1, r2
 80046d2:	d006      	beq.n	80046e2 <Vector64+0x22>
 80046d4:	4a07      	ldr	r2, [pc, #28]	; (80046f4 <Vector64+0x34>)
 80046d6:	6059      	str	r1, [r3, #4]
 80046d8:	6813      	ldr	r3, [r2, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <Vector64+0x22>
 80046de:	6850      	ldr	r0, [r2, #4]
 80046e0:	4798      	blx	r3
 80046e2:	340f      	adds	r4, #15
 80046e4:	d001      	beq.n	80046ea <Vector64+0x2a>
 80046e6:	f7fe fc8b 	bl	8003000 <_port_irq_epilogue.part.0>
}
 80046ea:	bd10      	pop	{r4, pc}
 80046ec:	40020000 	.word	0x40020000
 80046f0:	40020008 	.word	0x40020008
 80046f4:	200008c4 	.word	0x200008c4
	...

08004700 <Vector6C>:
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8004700:	210e      	movs	r1, #14
 8004702:	4a14      	ldr	r2, [pc, #80]	; (8004754 <Vector6C+0x54>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4567_HANDLER) {
 8004704:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8004706:	6813      	ldr	r3, [r2, #0]
  OSAL_IRQ_PROLOGUE();
 8004708:	4674      	mov	r4, lr
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 800470a:	0b1b      	lsrs	r3, r3, #12
 800470c:	4019      	ands	r1, r3
 800470e:	4b12      	ldr	r3, [pc, #72]	; (8004758 <Vector6C+0x58>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4219      	tst	r1, r3
 8004714:	d007      	beq.n	8004726 <Vector6C+0x26>
 8004716:	030b      	lsls	r3, r1, #12
 8004718:	6053      	str	r3, [r2, #4]
 800471a:	4a10      	ldr	r2, [pc, #64]	; (800475c <Vector6C+0x5c>)
 800471c:	6993      	ldr	r3, [r2, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <Vector6C+0x26>
 8004722:	69d0      	ldr	r0, [r2, #28]
 8004724:	4798      	blx	r3
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8004726:	210e      	movs	r1, #14
 8004728:	4a0a      	ldr	r2, [pc, #40]	; (8004754 <Vector6C+0x54>)
 800472a:	6813      	ldr	r3, [r2, #0]
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	4019      	ands	r1, r3
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <Vector6C+0x60>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4219      	tst	r1, r3
 8004736:	d007      	beq.n	8004748 <Vector6C+0x48>
 8004738:	040b      	lsls	r3, r1, #16
 800473a:	6053      	str	r3, [r2, #4]
 800473c:	4a07      	ldr	r2, [pc, #28]	; (800475c <Vector6C+0x5c>)
 800473e:	6a13      	ldr	r3, [r2, #32]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <Vector6C+0x48>
 8004744:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004746:	4798      	blx	r3
 8004748:	340f      	adds	r4, #15
 800474a:	d001      	beq.n	8004750 <Vector6C+0x50>
 800474c:	f7fe fc58 	bl	8003000 <_port_irq_epilogue.part.0>
}
 8004750:	bd10      	pop	{r4, pc}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	40020000 	.word	0x40020000
 8004758:	40020044 	.word	0x40020044
 800475c:	200008c4 	.word	0x200008c4
 8004760:	40020058 	.word	0x40020058
	...

08004770 <Vector68>:
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8004770:	210e      	movs	r1, #14
 8004772:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <Vector68+0x54>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH23_HANDLER) {
 8004774:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8004776:	6813      	ldr	r3, [r2, #0]
  OSAL_IRQ_PROLOGUE();
 8004778:	4674      	mov	r4, lr
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	4019      	ands	r1, r3
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <Vector68+0x58>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4219      	tst	r1, r3
 8004784:	d007      	beq.n	8004796 <Vector68+0x26>
 8004786:	010b      	lsls	r3, r1, #4
 8004788:	6053      	str	r3, [r2, #4]
 800478a:	4a10      	ldr	r2, [pc, #64]	; (80047cc <Vector68+0x5c>)
 800478c:	6893      	ldr	r3, [r2, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <Vector68+0x26>
 8004792:	68d0      	ldr	r0, [r2, #12]
 8004794:	4798      	blx	r3
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8004796:	210e      	movs	r1, #14
 8004798:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <Vector68+0x54>)
 800479a:	6813      	ldr	r3, [r2, #0]
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	4019      	ands	r1, r3
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <Vector68+0x60>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4219      	tst	r1, r3
 80047a6:	d007      	beq.n	80047b8 <Vector68+0x48>
 80047a8:	020b      	lsls	r3, r1, #8
 80047aa:	6053      	str	r3, [r2, #4]
 80047ac:	4a07      	ldr	r2, [pc, #28]	; (80047cc <Vector68+0x5c>)
 80047ae:	6913      	ldr	r3, [r2, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <Vector68+0x48>
 80047b4:	6950      	ldr	r0, [r2, #20]
 80047b6:	4798      	blx	r3
 80047b8:	340f      	adds	r4, #15
 80047ba:	d001      	beq.n	80047c0 <Vector68+0x50>
 80047bc:	f7fe fc20 	bl	8003000 <_port_irq_epilogue.part.0>
}
 80047c0:	bd10      	pop	{r4, pc}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	40020000 	.word	0x40020000
 80047c8:	4002001c 	.word	0x4002001c
 80047cc:	200008c4 	.word	0x200008c4
 80047d0:	40020030 	.word	0x40020030
	...

080047e0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80047e0:	2280      	movs	r2, #128	; 0x80
 80047e2:	4694      	mov	ip, r2
 80047e4:	b5f0      	push	{r4, r5, r6, r7, lr}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80047e6:	2700      	movs	r7, #0
  const ram_init_area_t *rap = ram_areas;
 80047e8:	4e10      	ldr	r6, [pc, #64]	; (800482c <__init_ram_areas+0x4c>)
void __init_ram_areas(void) {
 80047ea:	4d11      	ldr	r5, [pc, #68]	; (8004830 <__init_ram_areas+0x50>)
 80047ec:	4c11      	ldr	r4, [pc, #68]	; (8004834 <__init_ram_areas+0x54>)
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <__init_ram_areas+0x58>)
 80047f0:	4912      	ldr	r1, [pc, #72]	; (800483c <__init_ram_areas+0x5c>)
 80047f2:	44b4      	add	ip, r6
    while (p < rap->clear_area) {
 80047f4:	429c      	cmp	r4, r3
 80047f6:	d90d      	bls.n	8004814 <__init_ram_areas+0x34>
 80047f8:	001a      	movs	r2, r3
      *p = *tp;
 80047fa:	c901      	ldmia	r1!, {r0}
 80047fc:	c201      	stmia	r2!, {r0}
    while (p < rap->clear_area) {
 80047fe:	4294      	cmp	r4, r2
 8004800:	d8fb      	bhi.n	80047fa <__init_ram_areas+0x1a>
 8004802:	43da      	mvns	r2, r3
 8004804:	1914      	adds	r4, r2, r4
 8004806:	08a4      	lsrs	r4, r4, #2
 8004808:	3401      	adds	r4, #1
 800480a:	00a4      	lsls	r4, r4, #2
 800480c:	191b      	adds	r3, r3, r4
    while (p < rap->no_init_area) {
 800480e:	429d      	cmp	r5, r3
 8004810:	d902      	bls.n	8004818 <__init_ram_areas+0x38>
      *p = 0;
 8004812:	c380      	stmia	r3!, {r7}
    while (p < rap->no_init_area) {
 8004814:	429d      	cmp	r5, r3
 8004816:	d8fc      	bhi.n	8004812 <__init_ram_areas+0x32>
      p++;
    }
    rap++;
 8004818:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800481a:	4566      	cmp	r6, ip
 800481c:	d004      	beq.n	8004828 <__init_ram_areas+0x48>
 800481e:	6831      	ldr	r1, [r6, #0]
 8004820:	6873      	ldr	r3, [r6, #4]
 8004822:	68b4      	ldr	r4, [r6, #8]
 8004824:	68f5      	ldr	r5, [r6, #12]
 8004826:	e7e5      	b.n	80047f4 <__init_ram_areas+0x14>
#endif
}
 8004828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	0800521c 	.word	0x0800521c
 8004830:	20000c18 	.word	0x20000c18
 8004834:	20000c18 	.word	0x20000c18
 8004838:	20000c18 	.word	0x20000c18
 800483c:	08005748 	.word	0x08005748

08004840 <__default_exit>:
void __default_exit(void) {
 8004840:	e7fe      	b.n	8004840 <__default_exit>
 8004842:	46c0      	nop			; (mov r8, r8)
	...

08004850 <__late_init>:
 8004850:	4770      	bx	lr
 8004852:	46c0      	nop			; (mov r8, r8)
	...

08004860 <__core_init>:
}
 8004860:	4770      	bx	lr
 8004862:	46c0      	nop			; (mov r8, r8)

08004864 <atan2>:
 8004864:	b510      	push	{r4, lr}
 8004866:	f000 f861 	bl	800492c <__ieee754_atan2>
 800486a:	bd10      	pop	{r4, pc}

0800486c <sqrt>:
 800486c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800486e:	4647      	mov	r7, r8
 8004870:	46ce      	mov	lr, r9
 8004872:	b580      	push	{r7, lr}
 8004874:	b08d      	sub	sp, #52	; 0x34
 8004876:	0004      	movs	r4, r0
 8004878:	000d      	movs	r5, r1
 800487a:	f000 f913 	bl	8004aa4 <__ieee754_sqrt>
 800487e:	4b29      	ldr	r3, [pc, #164]	; (8004924 <sqrt+0xb8>)
 8004880:	0006      	movs	r6, r0
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	000f      	movs	r7, r1
 8004886:	b25b      	sxtb	r3, r3
 8004888:	4698      	mov	r8, r3
 800488a:	3301      	adds	r3, #1
 800488c:	d010      	beq.n	80048b0 <sqrt+0x44>
 800488e:	0022      	movs	r2, r4
 8004890:	002b      	movs	r3, r5
 8004892:	0020      	movs	r0, r4
 8004894:	0029      	movs	r1, r5
 8004896:	f7fe f92f 	bl	8002af8 <__aeabi_dcmpun>
 800489a:	4681      	mov	r9, r0
 800489c:	2800      	cmp	r0, #0
 800489e:	d107      	bne.n	80048b0 <sqrt+0x44>
 80048a0:	2200      	movs	r2, #0
 80048a2:	2300      	movs	r3, #0
 80048a4:	0020      	movs	r0, r4
 80048a6:	0029      	movs	r1, r5
 80048a8:	f7fb fd38 	bl	800031c <__aeabi_dcmplt>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d106      	bne.n	80048be <sqrt+0x52>
 80048b0:	0030      	movs	r0, r6
 80048b2:	0039      	movs	r1, r7
 80048b4:	b00d      	add	sp, #52	; 0x34
 80048b6:	bc0c      	pop	{r2, r3}
 80048b8:	4690      	mov	r8, r2
 80048ba:	4699      	mov	r9, r3
 80048bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048be:	2301      	movs	r3, #1
 80048c0:	9302      	str	r3, [sp, #8]
 80048c2:	4b19      	ldr	r3, [pc, #100]	; (8004928 <sqrt+0xbc>)
 80048c4:	9406      	str	r4, [sp, #24]
 80048c6:	9507      	str	r5, [sp, #28]
 80048c8:	9303      	str	r3, [sp, #12]
 80048ca:	464b      	mov	r3, r9
 80048cc:	930a      	str	r3, [sp, #40]	; 0x28
 80048ce:	4643      	mov	r3, r8
 80048d0:	9404      	str	r4, [sp, #16]
 80048d2:	9505      	str	r5, [sp, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d015      	beq.n	8004904 <sqrt+0x98>
 80048d8:	2300      	movs	r3, #0
 80048da:	2200      	movs	r2, #0
 80048dc:	0019      	movs	r1, r3
 80048de:	0010      	movs	r0, r2
 80048e0:	f7fc ff46 	bl	8001770 <__aeabi_ddiv>
 80048e4:	4643      	mov	r3, r8
 80048e6:	9008      	str	r0, [sp, #32]
 80048e8:	9109      	str	r1, [sp, #36]	; 0x24
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d10e      	bne.n	800490c <sqrt+0xa0>
 80048ee:	f000 fb4b 	bl	8004f88 <__errno>
 80048f2:	2321      	movs	r3, #33	; 0x21
 80048f4:	6003      	str	r3, [r0, #0]
 80048f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10c      	bne.n	8004918 <sqrt+0xac>
 80048fe:	9e08      	ldr	r6, [sp, #32]
 8004900:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004902:	e7d5      	b.n	80048b0 <sqrt+0x44>
 8004904:	2300      	movs	r3, #0
 8004906:	2400      	movs	r4, #0
 8004908:	9308      	str	r3, [sp, #32]
 800490a:	9409      	str	r4, [sp, #36]	; 0x24
 800490c:	a802      	add	r0, sp, #8
 800490e:	f000 fb39 	bl	8004f84 <matherr>
 8004912:	2800      	cmp	r0, #0
 8004914:	d1ef      	bne.n	80048f6 <sqrt+0x8a>
 8004916:	e7ea      	b.n	80048ee <sqrt+0x82>
 8004918:	f000 fb36 	bl	8004f88 <__errno>
 800491c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	6003      	str	r3, [r0, #0]
 8004922:	e7ec      	b.n	80048fe <sqrt+0x92>
 8004924:	20000400 	.word	0x20000400
 8004928:	080052c4 	.word	0x080052c4

0800492c <__ieee754_atan2>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	0015      	movs	r5, r2
 8004930:	4647      	mov	r7, r8
 8004932:	46ce      	mov	lr, r9
 8004934:	005a      	lsls	r2, r3, #1
 8004936:	001c      	movs	r4, r3
 8004938:	426b      	negs	r3, r5
 800493a:	b580      	push	{r7, lr}
 800493c:	432b      	orrs	r3, r5
 800493e:	4f4b      	ldr	r7, [pc, #300]	; (8004a6c <__ieee754_atan2+0x140>)
 8004940:	0852      	lsrs	r2, r2, #1
 8004942:	0fdb      	lsrs	r3, r3, #31
 8004944:	4313      	orrs	r3, r2
 8004946:	42bb      	cmp	r3, r7
 8004948:	d81d      	bhi.n	8004986 <__ieee754_atan2+0x5a>
 800494a:	004b      	lsls	r3, r1, #1
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	4698      	mov	r8, r3
 8004950:	4646      	mov	r6, r8
 8004952:	4243      	negs	r3, r0
 8004954:	4303      	orrs	r3, r0
 8004956:	0fdb      	lsrs	r3, r3, #31
 8004958:	4689      	mov	r9, r1
 800495a:	4333      	orrs	r3, r6
 800495c:	42bb      	cmp	r3, r7
 800495e:	d812      	bhi.n	8004986 <__ieee754_atan2+0x5a>
 8004960:	4b43      	ldr	r3, [pc, #268]	; (8004a70 <__ieee754_atan2+0x144>)
 8004962:	18e3      	adds	r3, r4, r3
 8004964:	432b      	orrs	r3, r5
 8004966:	d039      	beq.n	80049dc <__ieee754_atan2+0xb0>
 8004968:	2602      	movs	r6, #2
 800496a:	17a3      	asrs	r3, r4, #30
 800496c:	401e      	ands	r6, r3
 800496e:	0fcb      	lsrs	r3, r1, #31
 8004970:	431e      	orrs	r6, r3
 8004972:	4643      	mov	r3, r8
 8004974:	4303      	orrs	r3, r0
 8004976:	d110      	bne.n	800499a <__ieee754_atan2+0x6e>
 8004978:	2e02      	cmp	r6, #2
 800497a:	d047      	beq.n	8004a0c <__ieee754_atan2+0xe0>
 800497c:	2e03      	cmp	r6, #3
 800497e:	d108      	bne.n	8004992 <__ieee754_atan2+0x66>
 8004980:	483c      	ldr	r0, [pc, #240]	; (8004a74 <__ieee754_atan2+0x148>)
 8004982:	493d      	ldr	r1, [pc, #244]	; (8004a78 <__ieee754_atan2+0x14c>)
 8004984:	e005      	b.n	8004992 <__ieee754_atan2+0x66>
 8004986:	0002      	movs	r2, r0
 8004988:	000b      	movs	r3, r1
 800498a:	0028      	movs	r0, r5
 800498c:	0021      	movs	r1, r4
 800498e:	f7fc fbd3 	bl	8001138 <__aeabi_dadd>
 8004992:	bc0c      	pop	{r2, r3}
 8004994:	4690      	mov	r8, r2
 8004996:	4699      	mov	r9, r3
 8004998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800499a:	0013      	movs	r3, r2
 800499c:	432b      	orrs	r3, r5
 800499e:	d020      	beq.n	80049e2 <__ieee754_atan2+0xb6>
 80049a0:	42ba      	cmp	r2, r7
 80049a2:	d024      	beq.n	80049ee <__ieee754_atan2+0xc2>
 80049a4:	45b8      	cmp	r8, r7
 80049a6:	d01c      	beq.n	80049e2 <__ieee754_atan2+0xb6>
 80049a8:	4643      	mov	r3, r8
 80049aa:	1a9a      	subs	r2, r3, r2
 80049ac:	1512      	asrs	r2, r2, #20
 80049ae:	2a3c      	cmp	r2, #60	; 0x3c
 80049b0:	dc2f      	bgt.n	8004a12 <__ieee754_atan2+0xe6>
 80049b2:	2c00      	cmp	r4, #0
 80049b4:	da30      	bge.n	8004a18 <__ieee754_atan2+0xec>
 80049b6:	323c      	adds	r2, #60	; 0x3c
 80049b8:	da2e      	bge.n	8004a18 <__ieee754_atan2+0xec>
 80049ba:	2000      	movs	r0, #0
 80049bc:	2100      	movs	r1, #0
 80049be:	2e01      	cmp	r6, #1
 80049c0:	d03e      	beq.n	8004a40 <__ieee754_atan2+0x114>
 80049c2:	2e02      	cmp	r6, #2
 80049c4:	d031      	beq.n	8004a2a <__ieee754_atan2+0xfe>
 80049c6:	2e00      	cmp	r6, #0
 80049c8:	d0e3      	beq.n	8004992 <__ieee754_atan2+0x66>
 80049ca:	4a2c      	ldr	r2, [pc, #176]	; (8004a7c <__ieee754_atan2+0x150>)
 80049cc:	4b2c      	ldr	r3, [pc, #176]	; (8004a80 <__ieee754_atan2+0x154>)
 80049ce:	f7fd fd4b 	bl	8002468 <__aeabi_dsub>
 80049d2:	4a28      	ldr	r2, [pc, #160]	; (8004a74 <__ieee754_atan2+0x148>)
 80049d4:	4b2b      	ldr	r3, [pc, #172]	; (8004a84 <__ieee754_atan2+0x158>)
 80049d6:	f7fd fd47 	bl	8002468 <__aeabi_dsub>
 80049da:	e7da      	b.n	8004992 <__ieee754_atan2+0x66>
 80049dc:	f000 f93a 	bl	8004c54 <atan>
 80049e0:	e7d7      	b.n	8004992 <__ieee754_atan2+0x66>
 80049e2:	464b      	mov	r3, r9
 80049e4:	4823      	ldr	r0, [pc, #140]	; (8004a74 <__ieee754_atan2+0x148>)
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	db0e      	blt.n	8004a08 <__ieee754_atan2+0xdc>
 80049ea:	4927      	ldr	r1, [pc, #156]	; (8004a88 <__ieee754_atan2+0x15c>)
 80049ec:	e7d1      	b.n	8004992 <__ieee754_atan2+0x66>
 80049ee:	4590      	cmp	r8, r2
 80049f0:	d02b      	beq.n	8004a4a <__ieee754_atan2+0x11e>
 80049f2:	2e02      	cmp	r6, #2
 80049f4:	d00a      	beq.n	8004a0c <__ieee754_atan2+0xe0>
 80049f6:	2e03      	cmp	r6, #3
 80049f8:	d0c2      	beq.n	8004980 <__ieee754_atan2+0x54>
 80049fa:	2000      	movs	r0, #0
 80049fc:	2100      	movs	r1, #0
 80049fe:	2e01      	cmp	r6, #1
 8004a00:	d1c7      	bne.n	8004992 <__ieee754_atan2+0x66>
 8004a02:	2180      	movs	r1, #128	; 0x80
 8004a04:	0609      	lsls	r1, r1, #24
 8004a06:	e7c4      	b.n	8004992 <__ieee754_atan2+0x66>
 8004a08:	4920      	ldr	r1, [pc, #128]	; (8004a8c <__ieee754_atan2+0x160>)
 8004a0a:	e7c2      	b.n	8004992 <__ieee754_atan2+0x66>
 8004a0c:	4819      	ldr	r0, [pc, #100]	; (8004a74 <__ieee754_atan2+0x148>)
 8004a0e:	491d      	ldr	r1, [pc, #116]	; (8004a84 <__ieee754_atan2+0x158>)
 8004a10:	e7bf      	b.n	8004992 <__ieee754_atan2+0x66>
 8004a12:	4818      	ldr	r0, [pc, #96]	; (8004a74 <__ieee754_atan2+0x148>)
 8004a14:	491c      	ldr	r1, [pc, #112]	; (8004a88 <__ieee754_atan2+0x15c>)
 8004a16:	e7d2      	b.n	80049be <__ieee754_atan2+0x92>
 8004a18:	002a      	movs	r2, r5
 8004a1a:	0023      	movs	r3, r4
 8004a1c:	f7fc fea8 	bl	8001770 <__aeabi_ddiv>
 8004a20:	f000 faac 	bl	8004f7c <fabs>
 8004a24:	f000 f916 	bl	8004c54 <atan>
 8004a28:	e7c9      	b.n	80049be <__ieee754_atan2+0x92>
 8004a2a:	4a14      	ldr	r2, [pc, #80]	; (8004a7c <__ieee754_atan2+0x150>)
 8004a2c:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <__ieee754_atan2+0x154>)
 8004a2e:	f7fd fd1b 	bl	8002468 <__aeabi_dsub>
 8004a32:	0002      	movs	r2, r0
 8004a34:	000b      	movs	r3, r1
 8004a36:	480f      	ldr	r0, [pc, #60]	; (8004a74 <__ieee754_atan2+0x148>)
 8004a38:	4912      	ldr	r1, [pc, #72]	; (8004a84 <__ieee754_atan2+0x158>)
 8004a3a:	f7fd fd15 	bl	8002468 <__aeabi_dsub>
 8004a3e:	e7a8      	b.n	8004992 <__ieee754_atan2+0x66>
 8004a40:	2480      	movs	r4, #128	; 0x80
 8004a42:	0624      	lsls	r4, r4, #24
 8004a44:	190b      	adds	r3, r1, r4
 8004a46:	0019      	movs	r1, r3
 8004a48:	e7a3      	b.n	8004992 <__ieee754_atan2+0x66>
 8004a4a:	2e02      	cmp	r6, #2
 8004a4c:	d006      	beq.n	8004a5c <__ieee754_atan2+0x130>
 8004a4e:	2e03      	cmp	r6, #3
 8004a50:	d009      	beq.n	8004a66 <__ieee754_atan2+0x13a>
 8004a52:	4808      	ldr	r0, [pc, #32]	; (8004a74 <__ieee754_atan2+0x148>)
 8004a54:	2e01      	cmp	r6, #1
 8004a56:	d004      	beq.n	8004a62 <__ieee754_atan2+0x136>
 8004a58:	490d      	ldr	r1, [pc, #52]	; (8004a90 <__ieee754_atan2+0x164>)
 8004a5a:	e79a      	b.n	8004992 <__ieee754_atan2+0x66>
 8004a5c:	480d      	ldr	r0, [pc, #52]	; (8004a94 <__ieee754_atan2+0x168>)
 8004a5e:	490e      	ldr	r1, [pc, #56]	; (8004a98 <__ieee754_atan2+0x16c>)
 8004a60:	e797      	b.n	8004992 <__ieee754_atan2+0x66>
 8004a62:	490e      	ldr	r1, [pc, #56]	; (8004a9c <__ieee754_atan2+0x170>)
 8004a64:	e795      	b.n	8004992 <__ieee754_atan2+0x66>
 8004a66:	480b      	ldr	r0, [pc, #44]	; (8004a94 <__ieee754_atan2+0x168>)
 8004a68:	490d      	ldr	r1, [pc, #52]	; (8004aa0 <__ieee754_atan2+0x174>)
 8004a6a:	e792      	b.n	8004992 <__ieee754_atan2+0x66>
 8004a6c:	7ff00000 	.word	0x7ff00000
 8004a70:	c0100000 	.word	0xc0100000
 8004a74:	54442d18 	.word	0x54442d18
 8004a78:	c00921fb 	.word	0xc00921fb
 8004a7c:	33145c07 	.word	0x33145c07
 8004a80:	3ca1a626 	.word	0x3ca1a626
 8004a84:	400921fb 	.word	0x400921fb
 8004a88:	3ff921fb 	.word	0x3ff921fb
 8004a8c:	bff921fb 	.word	0xbff921fb
 8004a90:	3fe921fb 	.word	0x3fe921fb
 8004a94:	7f3321d2 	.word	0x7f3321d2
 8004a98:	4002d97c 	.word	0x4002d97c
 8004a9c:	bfe921fb 	.word	0xbfe921fb
 8004aa0:	c002d97c 	.word	0xc002d97c

08004aa4 <__ieee754_sqrt>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	4647      	mov	r7, r8
 8004aa8:	46ce      	mov	lr, r9
 8004aaa:	4b67      	ldr	r3, [pc, #412]	; (8004c48 <__ieee754_sqrt+0x1a4>)
 8004aac:	b580      	push	{r7, lr}
 8004aae:	000a      	movs	r2, r1
 8004ab0:	000f      	movs	r7, r1
 8004ab2:	0019      	movs	r1, r3
 8004ab4:	0005      	movs	r5, r0
 8004ab6:	4039      	ands	r1, r7
 8004ab8:	4299      	cmp	r1, r3
 8004aba:	d100      	bne.n	8004abe <__ieee754_sqrt+0x1a>
 8004abc:	e09b      	b.n	8004bf6 <__ieee754_sqrt+0x152>
 8004abe:	0004      	movs	r4, r0
 8004ac0:	0001      	movs	r1, r0
 8004ac2:	2f00      	cmp	r7, #0
 8004ac4:	dd69      	ble.n	8004b9a <__ieee754_sqrt+0xf6>
 8004ac6:	153f      	asrs	r7, r7, #20
 8004ac8:	d100      	bne.n	8004acc <__ieee754_sqrt+0x28>
 8004aca:	e0b4      	b.n	8004c36 <__ieee754_sqrt+0x192>
 8004acc:	4b5f      	ldr	r3, [pc, #380]	; (8004c4c <__ieee754_sqrt+0x1a8>)
 8004ace:	0312      	lsls	r2, r2, #12
 8004ad0:	469c      	mov	ip, r3
 8004ad2:	2380      	movs	r3, #128	; 0x80
 8004ad4:	0b12      	lsrs	r2, r2, #12
 8004ad6:	035b      	lsls	r3, r3, #13
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	0fca      	lsrs	r2, r1, #31
 8004ade:	4467      	add	r7, ip
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	004a      	lsls	r2, r1, #1
 8004ae4:	07f8      	lsls	r0, r7, #31
 8004ae6:	d503      	bpl.n	8004af0 <__ieee754_sqrt+0x4c>
 8004ae8:	0fd2      	lsrs	r2, r2, #31
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	189b      	adds	r3, r3, r2
 8004aee:	008a      	lsls	r2, r1, #2
 8004af0:	1079      	asrs	r1, r7, #1
 8004af2:	468c      	mov	ip, r1
 8004af4:	2100      	movs	r1, #0
 8004af6:	2080      	movs	r0, #128	; 0x80
 8004af8:	2416      	movs	r4, #22
 8004afa:	4689      	mov	r9, r1
 8004afc:	0380      	lsls	r0, r0, #14
 8004afe:	180d      	adds	r5, r1, r0
 8004b00:	429d      	cmp	r5, r3
 8004b02:	dc02      	bgt.n	8004b0a <__ieee754_sqrt+0x66>
 8004b04:	1829      	adds	r1, r5, r0
 8004b06:	1b5b      	subs	r3, r3, r5
 8004b08:	4481      	add	r9, r0
 8004b0a:	0fd5      	lsrs	r5, r2, #31
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	3c01      	subs	r4, #1
 8004b10:	195b      	adds	r3, r3, r5
 8004b12:	0052      	lsls	r2, r2, #1
 8004b14:	0840      	lsrs	r0, r0, #1
 8004b16:	2c00      	cmp	r4, #0
 8004b18:	d1f1      	bne.n	8004afe <__ieee754_sqrt+0x5a>
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	4680      	mov	r8, r0
 8004b1e:	2080      	movs	r0, #128	; 0x80
 8004b20:	2520      	movs	r5, #32
 8004b22:	2700      	movs	r7, #0
 8004b24:	0600      	lsls	r0, r0, #24
 8004b26:	e009      	b.n	8004b3c <__ieee754_sqrt+0x98>
 8004b28:	428b      	cmp	r3, r1
 8004b2a:	d05c      	beq.n	8004be6 <__ieee754_sqrt+0x142>
 8004b2c:	0fd4      	lsrs	r4, r2, #31
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	3d01      	subs	r5, #1
 8004b32:	18e3      	adds	r3, r4, r3
 8004b34:	0052      	lsls	r2, r2, #1
 8004b36:	0840      	lsrs	r0, r0, #1
 8004b38:	2d00      	cmp	r5, #0
 8004b3a:	d016      	beq.n	8004b6a <__ieee754_sqrt+0xc6>
 8004b3c:	19c4      	adds	r4, r0, r7
 8004b3e:	428b      	cmp	r3, r1
 8004b40:	ddf2      	ble.n	8004b28 <__ieee754_sqrt+0x84>
 8004b42:	1827      	adds	r7, r4, r0
 8004b44:	000e      	movs	r6, r1
 8004b46:	2c00      	cmp	r4, #0
 8004b48:	db49      	blt.n	8004bde <__ieee754_sqrt+0x13a>
 8004b4a:	1a5b      	subs	r3, r3, r1
 8004b4c:	42a2      	cmp	r2, r4
 8004b4e:	4189      	sbcs	r1, r1
 8004b50:	4249      	negs	r1, r1
 8004b52:	1a5b      	subs	r3, r3, r1
 8004b54:	1b12      	subs	r2, r2, r4
 8004b56:	0fd4      	lsrs	r4, r2, #31
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	3d01      	subs	r5, #1
 8004b5c:	4480      	add	r8, r0
 8004b5e:	0031      	movs	r1, r6
 8004b60:	18e3      	adds	r3, r4, r3
 8004b62:	0052      	lsls	r2, r2, #1
 8004b64:	0840      	lsrs	r0, r0, #1
 8004b66:	2d00      	cmp	r5, #0
 8004b68:	d1e8      	bne.n	8004b3c <__ieee754_sqrt+0x98>
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	d14e      	bne.n	8004c0c <__ieee754_sqrt+0x168>
 8004b6e:	4643      	mov	r3, r8
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	4937      	ldr	r1, [pc, #220]	; (8004c50 <__ieee754_sqrt+0x1ac>)
 8004b74:	464a      	mov	r2, r9
 8004b76:	4688      	mov	r8, r1
 8004b78:	4649      	mov	r1, r9
 8004b7a:	1052      	asrs	r2, r2, #1
 8004b7c:	4442      	add	r2, r8
 8004b7e:	07c9      	lsls	r1, r1, #31
 8004b80:	d502      	bpl.n	8004b88 <__ieee754_sqrt+0xe4>
 8004b82:	2180      	movs	r1, #128	; 0x80
 8004b84:	0609      	lsls	r1, r1, #24
 8004b86:	430b      	orrs	r3, r1
 8004b88:	4661      	mov	r1, ip
 8004b8a:	050f      	lsls	r7, r1, #20
 8004b8c:	18bd      	adds	r5, r7, r2
 8004b8e:	0018      	movs	r0, r3
 8004b90:	0029      	movs	r1, r5
 8004b92:	bc0c      	pop	{r2, r3}
 8004b94:	4690      	mov	r8, r2
 8004b96:	4699      	mov	r9, r3
 8004b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b9a:	007b      	lsls	r3, r7, #1
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	4303      	orrs	r3, r0
 8004ba0:	0039      	movs	r1, r7
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f5      	beq.n	8004b92 <__ieee754_sqrt+0xee>
 8004ba6:	2f00      	cmp	r7, #0
 8004ba8:	d13c      	bne.n	8004c24 <__ieee754_sqrt+0x180>
 8004baa:	0ae3      	lsrs	r3, r4, #11
 8004bac:	3a15      	subs	r2, #21
 8004bae:	0564      	lsls	r4, r4, #21
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0fa      	beq.n	8004baa <__ieee754_sqrt+0x106>
 8004bb4:	2080      	movs	r0, #128	; 0x80
 8004bb6:	0340      	lsls	r0, r0, #13
 8004bb8:	4203      	tst	r3, r0
 8004bba:	d13f      	bne.n	8004c3c <__ieee754_sqrt+0x198>
 8004bbc:	2700      	movs	r7, #0
 8004bbe:	e000      	b.n	8004bc2 <__ieee754_sqrt+0x11e>
 8004bc0:	000f      	movs	r7, r1
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	1c79      	adds	r1, r7, #1
 8004bc6:	4203      	tst	r3, r0
 8004bc8:	d0fa      	beq.n	8004bc0 <__ieee754_sqrt+0x11c>
 8004bca:	0025      	movs	r5, r4
 8004bcc:	2020      	movs	r0, #32
 8004bce:	408d      	lsls	r5, r1
 8004bd0:	1a40      	subs	r0, r0, r1
 8004bd2:	0029      	movs	r1, r5
 8004bd4:	1bd7      	subs	r7, r2, r7
 8004bd6:	0022      	movs	r2, r4
 8004bd8:	40c2      	lsrs	r2, r0
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	e776      	b.n	8004acc <__ieee754_sqrt+0x28>
 8004bde:	43fe      	mvns	r6, r7
 8004be0:	0ff6      	lsrs	r6, r6, #31
 8004be2:	198e      	adds	r6, r1, r6
 8004be4:	e7b1      	b.n	8004b4a <__ieee754_sqrt+0xa6>
 8004be6:	4294      	cmp	r4, r2
 8004be8:	d8a0      	bhi.n	8004b2c <__ieee754_sqrt+0x88>
 8004bea:	1827      	adds	r7, r4, r0
 8004bec:	2c00      	cmp	r4, #0
 8004bee:	dbf6      	blt.n	8004bde <__ieee754_sqrt+0x13a>
 8004bf0:	001e      	movs	r6, r3
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e7ae      	b.n	8004b54 <__ieee754_sqrt+0xb0>
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	003b      	movs	r3, r7
 8004bfa:	0028      	movs	r0, r5
 8004bfc:	0039      	movs	r1, r7
 8004bfe:	f7fd f9c1 	bl	8001f84 <__aeabi_dmul>
 8004c02:	002a      	movs	r2, r5
 8004c04:	003b      	movs	r3, r7
 8004c06:	f7fc fa97 	bl	8001138 <__aeabi_dadd>
 8004c0a:	e7c2      	b.n	8004b92 <__ieee754_sqrt+0xee>
 8004c0c:	4643      	mov	r3, r8
 8004c0e:	3301      	adds	r3, #1
 8004c10:	d003      	beq.n	8004c1a <__ieee754_sqrt+0x176>
 8004c12:	4643      	mov	r3, r8
 8004c14:	3301      	adds	r3, #1
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	e7ab      	b.n	8004b72 <__ieee754_sqrt+0xce>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4698      	mov	r8, r3
 8004c1e:	2300      	movs	r3, #0
 8004c20:	44c1      	add	r9, r8
 8004c22:	e7a6      	b.n	8004b72 <__ieee754_sqrt+0xce>
 8004c24:	003b      	movs	r3, r7
 8004c26:	0002      	movs	r2, r0
 8004c28:	f7fd fc1e 	bl	8002468 <__aeabi_dsub>
 8004c2c:	0002      	movs	r2, r0
 8004c2e:	000b      	movs	r3, r1
 8004c30:	f7fc fd9e 	bl	8001770 <__aeabi_ddiv>
 8004c34:	e7ad      	b.n	8004b92 <__ieee754_sqrt+0xee>
 8004c36:	0013      	movs	r3, r2
 8004c38:	2200      	movs	r2, #0
 8004c3a:	e7bb      	b.n	8004bb4 <__ieee754_sqrt+0x110>
 8004c3c:	2701      	movs	r7, #1
 8004c3e:	0021      	movs	r1, r4
 8004c40:	2020      	movs	r0, #32
 8004c42:	427f      	negs	r7, r7
 8004c44:	e7c6      	b.n	8004bd4 <__ieee754_sqrt+0x130>
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	7ff00000 	.word	0x7ff00000
 8004c4c:	fffffc01 	.word	0xfffffc01
 8004c50:	3fe00000 	.word	0x3fe00000

08004c54 <atan>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	464e      	mov	r6, r9
 8004c58:	4657      	mov	r7, sl
 8004c5a:	4645      	mov	r5, r8
 8004c5c:	46de      	mov	lr, fp
 8004c5e:	4ba0      	ldr	r3, [pc, #640]	; (8004ee0 <atan+0x28c>)
 8004c60:	b5e0      	push	{r5, r6, r7, lr}
 8004c62:	004e      	lsls	r6, r1, #1
 8004c64:	4680      	mov	r8, r0
 8004c66:	468a      	mov	sl, r1
 8004c68:	4689      	mov	r9, r1
 8004c6a:	0876      	lsrs	r6, r6, #1
 8004c6c:	429e      	cmp	r6, r3
 8004c6e:	dd0c      	ble.n	8004c8a <atan+0x36>
 8004c70:	4b9c      	ldr	r3, [pc, #624]	; (8004ee4 <atan+0x290>)
 8004c72:	429e      	cmp	r6, r3
 8004c74:	dd00      	ble.n	8004c78 <atan+0x24>
 8004c76:	e0a2      	b.n	8004dbe <atan+0x16a>
 8004c78:	d100      	bne.n	8004c7c <atan+0x28>
 8004c7a:	e09d      	b.n	8004db8 <atan+0x164>
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	dc00      	bgt.n	8004c84 <atan+0x30>
 8004c82:	e0e0      	b.n	8004e46 <atan+0x1f2>
 8004c84:	4b98      	ldr	r3, [pc, #608]	; (8004ee8 <atan+0x294>)
 8004c86:	4a99      	ldr	r2, [pc, #612]	; (8004eec <atan+0x298>)
 8004c88:	e0a1      	b.n	8004dce <atan+0x17a>
 8004c8a:	4b99      	ldr	r3, [pc, #612]	; (8004ef0 <atan+0x29c>)
 8004c8c:	429e      	cmp	r6, r3
 8004c8e:	dd00      	ble.n	8004c92 <atan+0x3e>
 8004c90:	e0b3      	b.n	8004dfa <atan+0x1a6>
 8004c92:	4b98      	ldr	r3, [pc, #608]	; (8004ef4 <atan+0x2a0>)
 8004c94:	429e      	cmp	r6, r3
 8004c96:	dc00      	bgt.n	8004c9a <atan+0x46>
 8004c98:	e0a1      	b.n	8004dde <atan+0x18a>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	425b      	negs	r3, r3
 8004c9e:	469b      	mov	fp, r3
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	4653      	mov	r3, sl
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	f7fd f96c 	bl	8001f84 <__aeabi_dmul>
 8004cac:	0002      	movs	r2, r0
 8004cae:	000b      	movs	r3, r1
 8004cb0:	0006      	movs	r6, r0
 8004cb2:	000f      	movs	r7, r1
 8004cb4:	f7fd f966 	bl	8001f84 <__aeabi_dmul>
 8004cb8:	0004      	movs	r4, r0
 8004cba:	000d      	movs	r5, r1
 8004cbc:	4a8e      	ldr	r2, [pc, #568]	; (8004ef8 <atan+0x2a4>)
 8004cbe:	4b8f      	ldr	r3, [pc, #572]	; (8004efc <atan+0x2a8>)
 8004cc0:	f7fd f960 	bl	8001f84 <__aeabi_dmul>
 8004cc4:	4a8e      	ldr	r2, [pc, #568]	; (8004f00 <atan+0x2ac>)
 8004cc6:	4b8f      	ldr	r3, [pc, #572]	; (8004f04 <atan+0x2b0>)
 8004cc8:	f7fc fa36 	bl	8001138 <__aeabi_dadd>
 8004ccc:	0022      	movs	r2, r4
 8004cce:	002b      	movs	r3, r5
 8004cd0:	f7fd f958 	bl	8001f84 <__aeabi_dmul>
 8004cd4:	4a8c      	ldr	r2, [pc, #560]	; (8004f08 <atan+0x2b4>)
 8004cd6:	4b8d      	ldr	r3, [pc, #564]	; (8004f0c <atan+0x2b8>)
 8004cd8:	f7fc fa2e 	bl	8001138 <__aeabi_dadd>
 8004cdc:	0022      	movs	r2, r4
 8004cde:	002b      	movs	r3, r5
 8004ce0:	f7fd f950 	bl	8001f84 <__aeabi_dmul>
 8004ce4:	4a8a      	ldr	r2, [pc, #552]	; (8004f10 <atan+0x2bc>)
 8004ce6:	4b8b      	ldr	r3, [pc, #556]	; (8004f14 <atan+0x2c0>)
 8004ce8:	f7fc fa26 	bl	8001138 <__aeabi_dadd>
 8004cec:	0022      	movs	r2, r4
 8004cee:	002b      	movs	r3, r5
 8004cf0:	f7fd f948 	bl	8001f84 <__aeabi_dmul>
 8004cf4:	4a88      	ldr	r2, [pc, #544]	; (8004f18 <atan+0x2c4>)
 8004cf6:	4b89      	ldr	r3, [pc, #548]	; (8004f1c <atan+0x2c8>)
 8004cf8:	f7fc fa1e 	bl	8001138 <__aeabi_dadd>
 8004cfc:	0022      	movs	r2, r4
 8004cfe:	002b      	movs	r3, r5
 8004d00:	f7fd f940 	bl	8001f84 <__aeabi_dmul>
 8004d04:	4a86      	ldr	r2, [pc, #536]	; (8004f20 <atan+0x2cc>)
 8004d06:	4b87      	ldr	r3, [pc, #540]	; (8004f24 <atan+0x2d0>)
 8004d08:	f7fc fa16 	bl	8001138 <__aeabi_dadd>
 8004d0c:	0032      	movs	r2, r6
 8004d0e:	003b      	movs	r3, r7
 8004d10:	f7fd f938 	bl	8001f84 <__aeabi_dmul>
 8004d14:	4a84      	ldr	r2, [pc, #528]	; (8004f28 <atan+0x2d4>)
 8004d16:	0006      	movs	r6, r0
 8004d18:	000f      	movs	r7, r1
 8004d1a:	4b84      	ldr	r3, [pc, #528]	; (8004f2c <atan+0x2d8>)
 8004d1c:	0020      	movs	r0, r4
 8004d1e:	0029      	movs	r1, r5
 8004d20:	f7fd f930 	bl	8001f84 <__aeabi_dmul>
 8004d24:	4a82      	ldr	r2, [pc, #520]	; (8004f30 <atan+0x2dc>)
 8004d26:	4b83      	ldr	r3, [pc, #524]	; (8004f34 <atan+0x2e0>)
 8004d28:	f7fd fb9e 	bl	8002468 <__aeabi_dsub>
 8004d2c:	0022      	movs	r2, r4
 8004d2e:	002b      	movs	r3, r5
 8004d30:	f7fd f928 	bl	8001f84 <__aeabi_dmul>
 8004d34:	4a80      	ldr	r2, [pc, #512]	; (8004f38 <atan+0x2e4>)
 8004d36:	4b81      	ldr	r3, [pc, #516]	; (8004f3c <atan+0x2e8>)
 8004d38:	f7fd fb96 	bl	8002468 <__aeabi_dsub>
 8004d3c:	0022      	movs	r2, r4
 8004d3e:	002b      	movs	r3, r5
 8004d40:	f7fd f920 	bl	8001f84 <__aeabi_dmul>
 8004d44:	4a7e      	ldr	r2, [pc, #504]	; (8004f40 <atan+0x2ec>)
 8004d46:	4b7f      	ldr	r3, [pc, #508]	; (8004f44 <atan+0x2f0>)
 8004d48:	f7fd fb8e 	bl	8002468 <__aeabi_dsub>
 8004d4c:	0022      	movs	r2, r4
 8004d4e:	002b      	movs	r3, r5
 8004d50:	f7fd f918 	bl	8001f84 <__aeabi_dmul>
 8004d54:	4a7c      	ldr	r2, [pc, #496]	; (8004f48 <atan+0x2f4>)
 8004d56:	4b7d      	ldr	r3, [pc, #500]	; (8004f4c <atan+0x2f8>)
 8004d58:	f7fd fb86 	bl	8002468 <__aeabi_dsub>
 8004d5c:	0022      	movs	r2, r4
 8004d5e:	002b      	movs	r3, r5
 8004d60:	f7fd f910 	bl	8001f84 <__aeabi_dmul>
 8004d64:	0002      	movs	r2, r0
 8004d66:	000b      	movs	r3, r1
 8004d68:	0030      	movs	r0, r6
 8004d6a:	0039      	movs	r1, r7
 8004d6c:	f7fc f9e4 	bl	8001138 <__aeabi_dadd>
 8004d70:	4653      	mov	r3, sl
 8004d72:	4642      	mov	r2, r8
 8004d74:	f7fd f906 	bl	8001f84 <__aeabi_dmul>
 8004d78:	465b      	mov	r3, fp
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	d066      	beq.n	8004e4c <atan+0x1f8>
 8004d7e:	465b      	mov	r3, fp
 8004d80:	4a73      	ldr	r2, [pc, #460]	; (8004f50 <atan+0x2fc>)
 8004d82:	4c74      	ldr	r4, [pc, #464]	; (8004f54 <atan+0x300>)
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	18e4      	adds	r4, r4, r3
 8004d88:	18d3      	adds	r3, r2, r3
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f7fd fb6b 	bl	8002468 <__aeabi_dsub>
 8004d92:	4642      	mov	r2, r8
 8004d94:	4653      	mov	r3, sl
 8004d96:	f7fd fb67 	bl	8002468 <__aeabi_dsub>
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	000b      	movs	r3, r1
 8004d9e:	6820      	ldr	r0, [r4, #0]
 8004da0:	6861      	ldr	r1, [r4, #4]
 8004da2:	f7fd fb61 	bl	8002468 <__aeabi_dsub>
 8004da6:	0003      	movs	r3, r0
 8004da8:	4648      	mov	r0, r9
 8004daa:	000a      	movs	r2, r1
 8004dac:	2800      	cmp	r0, #0
 8004dae:	da0e      	bge.n	8004dce <atan+0x17a>
 8004db0:	2280      	movs	r2, #128	; 0x80
 8004db2:	0612      	lsls	r2, r2, #24
 8004db4:	188a      	adds	r2, r1, r2
 8004db6:	e00a      	b.n	8004dce <atan+0x17a>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d100      	bne.n	8004dbe <atan+0x16a>
 8004dbc:	e75e      	b.n	8004c7c <atan+0x28>
 8004dbe:	4642      	mov	r2, r8
 8004dc0:	4653      	mov	r3, sl
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	4651      	mov	r1, sl
 8004dc6:	f7fc f9b7 	bl	8001138 <__aeabi_dadd>
 8004dca:	0003      	movs	r3, r0
 8004dcc:	000a      	movs	r2, r1
 8004dce:	0018      	movs	r0, r3
 8004dd0:	0011      	movs	r1, r2
 8004dd2:	bc3c      	pop	{r2, r3, r4, r5}
 8004dd4:	4690      	mov	r8, r2
 8004dd6:	4699      	mov	r9, r3
 8004dd8:	46a2      	mov	sl, r4
 8004dda:	46ab      	mov	fp, r5
 8004ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dde:	4a5e      	ldr	r2, [pc, #376]	; (8004f58 <atan+0x304>)
 8004de0:	4b5e      	ldr	r3, [pc, #376]	; (8004f5c <atan+0x308>)
 8004de2:	f7fc f9a9 	bl	8001138 <__aeabi_dadd>
 8004de6:	2200      	movs	r2, #0
 8004de8:	4b5d      	ldr	r3, [pc, #372]	; (8004f60 <atan+0x30c>)
 8004dea:	f7fb faab 	bl	8000344 <__aeabi_dcmpgt>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d100      	bne.n	8004df4 <atan+0x1a0>
 8004df2:	e752      	b.n	8004c9a <atan+0x46>
 8004df4:	4643      	mov	r3, r8
 8004df6:	4652      	mov	r2, sl
 8004df8:	e7e9      	b.n	8004dce <atan+0x17a>
 8004dfa:	f000 f8bf 	bl	8004f7c <fabs>
 8004dfe:	4b59      	ldr	r3, [pc, #356]	; (8004f64 <atan+0x310>)
 8004e00:	0004      	movs	r4, r0
 8004e02:	000d      	movs	r5, r1
 8004e04:	429e      	cmp	r6, r3
 8004e06:	dc2a      	bgt.n	8004e5e <atan+0x20a>
 8004e08:	4b57      	ldr	r3, [pc, #348]	; (8004f68 <atan+0x314>)
 8004e0a:	429e      	cmp	r6, r3
 8004e0c:	dc50      	bgt.n	8004eb0 <atan+0x25c>
 8004e0e:	0002      	movs	r2, r0
 8004e10:	000b      	movs	r3, r1
 8004e12:	f7fc f991 	bl	8001138 <__aeabi_dadd>
 8004e16:	2200      	movs	r2, #0
 8004e18:	4b51      	ldr	r3, [pc, #324]	; (8004f60 <atan+0x30c>)
 8004e1a:	f7fd fb25 	bl	8002468 <__aeabi_dsub>
 8004e1e:	2380      	movs	r3, #128	; 0x80
 8004e20:	0006      	movs	r6, r0
 8004e22:	000f      	movs	r7, r1
 8004e24:	2200      	movs	r2, #0
 8004e26:	05db      	lsls	r3, r3, #23
 8004e28:	0020      	movs	r0, r4
 8004e2a:	0029      	movs	r1, r5
 8004e2c:	f7fc f984 	bl	8001138 <__aeabi_dadd>
 8004e30:	000b      	movs	r3, r1
 8004e32:	0002      	movs	r2, r0
 8004e34:	0039      	movs	r1, r7
 8004e36:	0030      	movs	r0, r6
 8004e38:	f7fc fc9a 	bl	8001770 <__aeabi_ddiv>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	4680      	mov	r8, r0
 8004e40:	468a      	mov	sl, r1
 8004e42:	469b      	mov	fp, r3
 8004e44:	e72c      	b.n	8004ca0 <atan+0x4c>
 8004e46:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <atan+0x294>)
 8004e48:	4a48      	ldr	r2, [pc, #288]	; (8004f6c <atan+0x318>)
 8004e4a:	e7c0      	b.n	8004dce <atan+0x17a>
 8004e4c:	0002      	movs	r2, r0
 8004e4e:	000b      	movs	r3, r1
 8004e50:	4640      	mov	r0, r8
 8004e52:	4651      	mov	r1, sl
 8004e54:	f7fd fb08 	bl	8002468 <__aeabi_dsub>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	000a      	movs	r2, r1
 8004e5c:	e7b7      	b.n	8004dce <atan+0x17a>
 8004e5e:	4b44      	ldr	r3, [pc, #272]	; (8004f70 <atan+0x31c>)
 8004e60:	429e      	cmp	r6, r3
 8004e62:	dc1a      	bgt.n	8004e9a <atan+0x246>
 8004e64:	2200      	movs	r2, #0
 8004e66:	4b43      	ldr	r3, [pc, #268]	; (8004f74 <atan+0x320>)
 8004e68:	f7fd fafe 	bl	8002468 <__aeabi_dsub>
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	0006      	movs	r6, r0
 8004e70:	000f      	movs	r7, r1
 8004e72:	4b40      	ldr	r3, [pc, #256]	; (8004f74 <atan+0x320>)
 8004e74:	0020      	movs	r0, r4
 8004e76:	0029      	movs	r1, r5
 8004e78:	f7fd f884 	bl	8001f84 <__aeabi_dmul>
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	4b38      	ldr	r3, [pc, #224]	; (8004f60 <atan+0x30c>)
 8004e80:	f7fc f95a 	bl	8001138 <__aeabi_dadd>
 8004e84:	000b      	movs	r3, r1
 8004e86:	0002      	movs	r2, r0
 8004e88:	0039      	movs	r1, r7
 8004e8a:	0030      	movs	r0, r6
 8004e8c:	f7fc fc70 	bl	8001770 <__aeabi_ddiv>
 8004e90:	2302      	movs	r3, #2
 8004e92:	4680      	mov	r8, r0
 8004e94:	468a      	mov	sl, r1
 8004e96:	469b      	mov	fp, r3
 8004e98:	e702      	b.n	8004ca0 <atan+0x4c>
 8004e9a:	000b      	movs	r3, r1
 8004e9c:	0002      	movs	r2, r0
 8004e9e:	4936      	ldr	r1, [pc, #216]	; (8004f78 <atan+0x324>)
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f7fc fc65 	bl	8001770 <__aeabi_ddiv>
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	468a      	mov	sl, r1
 8004eac:	469b      	mov	fp, r3
 8004eae:	e6f7      	b.n	8004ca0 <atan+0x4c>
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	4b2b      	ldr	r3, [pc, #172]	; (8004f60 <atan+0x30c>)
 8004eb4:	f7fd fad8 	bl	8002468 <__aeabi_dsub>
 8004eb8:	2200      	movs	r2, #0
 8004eba:	0006      	movs	r6, r0
 8004ebc:	000f      	movs	r7, r1
 8004ebe:	4b28      	ldr	r3, [pc, #160]	; (8004f60 <atan+0x30c>)
 8004ec0:	0020      	movs	r0, r4
 8004ec2:	0029      	movs	r1, r5
 8004ec4:	f7fc f938 	bl	8001138 <__aeabi_dadd>
 8004ec8:	000b      	movs	r3, r1
 8004eca:	0002      	movs	r2, r0
 8004ecc:	0039      	movs	r1, r7
 8004ece:	0030      	movs	r0, r6
 8004ed0:	f7fc fc4e 	bl	8001770 <__aeabi_ddiv>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	4680      	mov	r8, r0
 8004ed8:	468a      	mov	sl, r1
 8004eda:	469b      	mov	fp, r3
 8004edc:	e6e0      	b.n	8004ca0 <atan+0x4c>
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	440fffff 	.word	0x440fffff
 8004ee4:	7ff00000 	.word	0x7ff00000
 8004ee8:	54442d18 	.word	0x54442d18
 8004eec:	3ff921fb 	.word	0x3ff921fb
 8004ef0:	3fdbffff 	.word	0x3fdbffff
 8004ef4:	3e1fffff 	.word	0x3e1fffff
 8004ef8:	e322da11 	.word	0xe322da11
 8004efc:	3f90ad3a 	.word	0x3f90ad3a
 8004f00:	24760deb 	.word	0x24760deb
 8004f04:	3fa97b4b 	.word	0x3fa97b4b
 8004f08:	a0d03d51 	.word	0xa0d03d51
 8004f0c:	3fb10d66 	.word	0x3fb10d66
 8004f10:	c54c206e 	.word	0xc54c206e
 8004f14:	3fb745cd 	.word	0x3fb745cd
 8004f18:	920083ff 	.word	0x920083ff
 8004f1c:	3fc24924 	.word	0x3fc24924
 8004f20:	5555550d 	.word	0x5555550d
 8004f24:	3fd55555 	.word	0x3fd55555
 8004f28:	2c6a6c2f 	.word	0x2c6a6c2f
 8004f2c:	bfa2b444 	.word	0xbfa2b444
 8004f30:	52defd9a 	.word	0x52defd9a
 8004f34:	3fadde2d 	.word	0x3fadde2d
 8004f38:	af749a6d 	.word	0xaf749a6d
 8004f3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8004f40:	fe231671 	.word	0xfe231671
 8004f44:	3fbc71c6 	.word	0x3fbc71c6
 8004f48:	9998ebc4 	.word	0x9998ebc4
 8004f4c:	3fc99999 	.word	0x3fc99999
 8004f50:	080052f0 	.word	0x080052f0
 8004f54:	080052d0 	.word	0x080052d0
 8004f58:	8800759c 	.word	0x8800759c
 8004f5c:	7e37e43c 	.word	0x7e37e43c
 8004f60:	3ff00000 	.word	0x3ff00000
 8004f64:	3ff2ffff 	.word	0x3ff2ffff
 8004f68:	3fe5ffff 	.word	0x3fe5ffff
 8004f6c:	bff921fb 	.word	0xbff921fb
 8004f70:	40037fff 	.word	0x40037fff
 8004f74:	3ff80000 	.word	0x3ff80000
 8004f78:	bff00000 	.word	0xbff00000

08004f7c <fabs>:
 8004f7c:	0049      	lsls	r1, r1, #1
 8004f7e:	084b      	lsrs	r3, r1, #1
 8004f80:	0019      	movs	r1, r3
 8004f82:	4770      	bx	lr

08004f84 <matherr>:
 8004f84:	2000      	movs	r0, #0
 8004f86:	4770      	bx	lr

08004f88 <__errno>:
 8004f88:	4b01      	ldr	r3, [pc, #4]	; (8004f90 <__errno+0x8>)
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	4770      	bx	lr
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	20000404 	.word	0x20000404

08004f94 <memcpy>:
 8004f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f96:	2a0f      	cmp	r2, #15
 8004f98:	d937      	bls.n	800500a <memcpy+0x76>
 8004f9a:	000d      	movs	r5, r1
 8004f9c:	4305      	orrs	r5, r0
 8004f9e:	000c      	movs	r4, r1
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	07ad      	lsls	r5, r5, #30
 8004fa4:	d135      	bne.n	8005012 <memcpy+0x7e>
 8004fa6:	0015      	movs	r5, r2
 8004fa8:	3d10      	subs	r5, #16
 8004faa:	092d      	lsrs	r5, r5, #4
 8004fac:	012e      	lsls	r6, r5, #4
 8004fae:	1836      	adds	r6, r6, r0
 8004fb0:	3610      	adds	r6, #16
 8004fb2:	6827      	ldr	r7, [r4, #0]
 8004fb4:	601f      	str	r7, [r3, #0]
 8004fb6:	6867      	ldr	r7, [r4, #4]
 8004fb8:	605f      	str	r7, [r3, #4]
 8004fba:	68a7      	ldr	r7, [r4, #8]
 8004fbc:	609f      	str	r7, [r3, #8]
 8004fbe:	68e7      	ldr	r7, [r4, #12]
 8004fc0:	3410      	adds	r4, #16
 8004fc2:	60df      	str	r7, [r3, #12]
 8004fc4:	3310      	adds	r3, #16
 8004fc6:	42b3      	cmp	r3, r6
 8004fc8:	d1f3      	bne.n	8004fb2 <memcpy+0x1e>
 8004fca:	240f      	movs	r4, #15
 8004fcc:	3501      	adds	r5, #1
 8004fce:	012d      	lsls	r5, r5, #4
 8004fd0:	1949      	adds	r1, r1, r5
 8004fd2:	4014      	ands	r4, r2
 8004fd4:	1945      	adds	r5, r0, r5
 8004fd6:	2c03      	cmp	r4, #3
 8004fd8:	d91d      	bls.n	8005016 <memcpy+0x82>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	58ce      	ldr	r6, [r1, r3]
 8004fde:	50ee      	str	r6, [r5, r3]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	1ae6      	subs	r6, r4, r3
 8004fe4:	2e03      	cmp	r6, #3
 8004fe6:	d8f9      	bhi.n	8004fdc <memcpy+0x48>
 8004fe8:	2303      	movs	r3, #3
 8004fea:	3c04      	subs	r4, #4
 8004fec:	08a4      	lsrs	r4, r4, #2
 8004fee:	3401      	adds	r4, #1
 8004ff0:	00a4      	lsls	r4, r4, #2
 8004ff2:	401a      	ands	r2, r3
 8004ff4:	192d      	adds	r5, r5, r4
 8004ff6:	1909      	adds	r1, r1, r4
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	d005      	beq.n	8005008 <memcpy+0x74>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	5ccc      	ldrb	r4, [r1, r3]
 8005000:	54ec      	strb	r4, [r5, r3]
 8005002:	3301      	adds	r3, #1
 8005004:	4293      	cmp	r3, r2
 8005006:	d1fa      	bne.n	8004ffe <memcpy+0x6a>
 8005008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800500a:	0005      	movs	r5, r0
 800500c:	2a00      	cmp	r2, #0
 800500e:	d1f5      	bne.n	8004ffc <memcpy+0x68>
 8005010:	e7fa      	b.n	8005008 <memcpy+0x74>
 8005012:	0005      	movs	r5, r0
 8005014:	e7f2      	b.n	8004ffc <memcpy+0x68>
 8005016:	0022      	movs	r2, r4
 8005018:	e7f8      	b.n	800500c <memcpy+0x78>
 800501a:	46c0      	nop			; (mov r8, r8)
